id: Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
yaml: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.yaml
href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
name:
  CSharp: CodeFixProvider
qualifiedName:
  CSharp: CodeFixProvider
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    local: C:\roslyn\
    sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
  path: src\Workspaces\Core\Portable\CodeFixes\CodeFixProvider.cs
  startLine: 11
summary: >+
  Implement this type to provide fixes for source code problems.

  Remember to use [Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute](#/api\Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute) so the host environment can offer your fixes in a UI.

syntax:
  content:
    CSharp: public abstract class CodeFixProvider
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds
  yaml: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.yaml
  href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
  name:
    CSharp: FixableDiagnosticIds
  qualifiedName:
    CSharp: FixableDiagnosticIds
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\CodeFixes\CodeFixProvider.cs
    startLine: 16
  summary: >+
    A list of diagnostic IDs that this provider can provider fixes for.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<string> FixableDiagnosticIds
    parameters:
    - id: FixableDiagnosticIds
      type:
        id: System.Collections.Immutable.ImmutableArray{System.String}
        name: System.Collections.Immutable.ImmutableArray{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.get_FixableDiagnosticIds
  yaml: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.yaml
  href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
  name:
    CSharp: get_FixableDiagnosticIds
  qualifiedName:
    CSharp: get_FixableDiagnosticIds
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\CodeFixes\CodeFixProvider.cs
    startLine: 16
- id: Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)
  yaml: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.yaml
  href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
  name:
    CSharp: RegisterCodeFixesAsync
  qualifiedName:
    CSharp: RegisterCodeFixesAsync
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\CodeFixes\CodeFixProvider.cs
    startLine: 21
  summary: >+
    Computes one or more fixes for the specified [Microsoft.CodeAnalysis.CodeFixes.CodeFixContext](#/api\Microsoft.CodeAnalysis.CodeFixes.CodeFixContext).

  syntax:
    content:
      CSharp: public abstract Task RegisterCodeFixesAsync(CodeFixContext context);
    parameters:
    - id: context
      type:
        id: Microsoft.CodeAnalysis.CodeFixes.CodeFixContext
        name: CodeFixContext
        href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixContext
    return:
      id: Task
- id: Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider
  yaml: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.yaml
  href: api\Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider
  name:
    CSharp: GetFixAllProvider
  qualifiedName:
    CSharp: GetFixAllProvider
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\CodeFixes\CodeFixProvider.cs
    startLine: 28
  summary: >+
    Gets an optional [Microsoft.CodeAnalysis.CodeFixes.FixAllProvider](#/api\Microsoft.CodeAnalysis.CodeFixes.FixAllProvider) that can fix all/multiple occurrences of diagnostics fixed by this code fix provider.

    Return null if the provider doesn't support fix all/multiple occurrences.

    Otherwise, you can return any of the well known fix all providers from [Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders](#/api\Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders) or implement your own fix all provider.

  syntax:
    content:
      CSharp: public virtual FixAllProvider GetFixAllProvider()
    parameters: []
    return:
      id: FixAllProvider
