id: Microsoft.CodeAnalysis.Diagnostic
yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
href: api/Microsoft.CodeAnalysis.Diagnostic
name:
  CSharp: Diagnostic
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Diagnostic
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
  startLine: 14
summary: >+
  Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred.

syntax:
  content:
    CSharp: public abstract partial class Diagnostic
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 31
  summary: >+
    Creates a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance.

  syntax:
    content:
      CSharp: public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, params object[] messageArgs)
    parameters:
    - id: descriptor
      type:
        id: Microsoft.CodeAnalysis.DiagnosticDescriptor
        name: DiagnosticDescriptor
        href: api/Microsoft.CodeAnalysis.DiagnosticDescriptor
      description: A [Microsoft.CodeAnalysis.DiagnosticDescriptor](#/api/Microsoft.CodeAnalysis.DiagnosticDescriptor) describing the diagnostic
    - id: location
      type:
        id: Microsoft.CodeAnalysis.Location
        name: Location
        href: api/Microsoft.CodeAnalysis.Location
      description: An optional primary location of the diagnostic. If null, [Microsoft.CodeAnalysis.Diagnostic.Location](#/api/Microsoft.CodeAnalysis.Diagnostic) will return [Microsoft.CodeAnalysis.Location.None](#/api/Microsoft.CodeAnalysis.Location).
    - id: messageArgs
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: Arguments to the message of the diagnostic
    return:
      id: Diagnostic
      description: The [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance.
- id: Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 51
  summary: >+
    Creates a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance.

  syntax:
    content:
      CSharp: public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, IEnumerable<Location> additionalLocations, params object[] messageArgs)
    parameters:
    - id: descriptor
      type:
        id: Microsoft.CodeAnalysis.DiagnosticDescriptor
        name: DiagnosticDescriptor
        href: api/Microsoft.CodeAnalysis.DiagnosticDescriptor
      description: A [Microsoft.CodeAnalysis.DiagnosticDescriptor](#/api/Microsoft.CodeAnalysis.DiagnosticDescriptor) describing the diagnostic.
    - id: location
      type:
        id: Microsoft.CodeAnalysis.Location
        name: Location
        href: api/Microsoft.CodeAnalysis.Location
      description: An optional primary location of the diagnostic. If null, [Microsoft.CodeAnalysis.Diagnostic.Location](#/api/Microsoft.CodeAnalysis.Diagnostic) will return [Microsoft.CodeAnalysis.Location.None](#/api/Microsoft.CodeAnalysis.Location).
    - id: additionalLocations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        isExternal: true
      description: >-
        An optional set of additional locations related to the diagnostic.

            Typically, these are locations of other items referenced in the message.

            If null, [Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations](#/api/Microsoft.CodeAnalysis.Diagnostic) will return an empty list.
    - id: messageArgs
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: Arguments to the message of the diagnostic.
    return:
      id: Diagnostic
      description: The [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance.
- id: Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 96
  summary: >+
    Creates a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance which is localizable.

  syntax:
    content:
      CSharp: public static Diagnostic Create(string id, string category, LocalizableString message, DiagnosticSeverity severity, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, LocalizableString title = null, LocalizableString description = null, string helpLink = null, Location location = null, IEnumerable<Location> additionalLocations = null, IEnumerable<string> customTags = null)
    parameters:
    - id: id
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as "CS1001".
    - id: category
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The category of the diagnostic. For diagnostics generated by the compiler, the category will be "Compiler".
    - id: message
      type:
        id: Microsoft.CodeAnalysis.LocalizableString
        name: LocalizableString
        href: api/Microsoft.CodeAnalysis.LocalizableString
      description: The diagnostic message text.
    - id: severity
      type:
        id: Microsoft.CodeAnalysis.DiagnosticSeverity
        name: DiagnosticSeverity
        href: api/Microsoft.CodeAnalysis.DiagnosticSeverity
      description: The diagnostic's effective severity.
    - id: defaultSeverity
      type:
        id: Microsoft.CodeAnalysis.DiagnosticSeverity
        name: DiagnosticSeverity
        href: api/Microsoft.CodeAnalysis.DiagnosticSeverity
      description: The diagnostic's default severity.
    - id: isEnabledByDefault
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if the diagnostic is enabled by default
    - id: warningLevel
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The warning level, between 1 and 4 if severity is [Microsoft.CodeAnalysis.DiagnosticSeverity.Warning](#/api/Microsoft.CodeAnalysis.DiagnosticSeverity); otherwise 0.
    - id: title
      type:
        id: Microsoft.CodeAnalysis.LocalizableString
        name: LocalizableString
        href: api/Microsoft.CodeAnalysis.LocalizableString
      description: An optional short localizable title describing the diagnostic.
    - id: description
      type:
        id: Microsoft.CodeAnalysis.LocalizableString
        name: LocalizableString
        href: api/Microsoft.CodeAnalysis.LocalizableString
      description: An optional longer localizable description for the diagnostic.
    - id: helpLink
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: An optional hyperlink that provides more detailed information regarding the diagnostic.
    - id: location
      type:
        id: Microsoft.CodeAnalysis.Location
        name: Location
        href: api/Microsoft.CodeAnalysis.Location
      description: An optional primary location of the diagnostic. If null, [Microsoft.CodeAnalysis.Diagnostic.Location](#/api/Microsoft.CodeAnalysis.Diagnostic) will return [Microsoft.CodeAnalysis.Location.None](#/api/Microsoft.CodeAnalysis.Location).
    - id: additionalLocations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        isExternal: true
      description: >-
        An optional set of additional locations related to the diagnostic.

            Typically, these are locations of other items referenced in the message.

            If null, [Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations](#/api/Microsoft.CodeAnalysis.Diagnostic) will return an empty list.
    - id: customTags
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
      description: >-
        An optional set of custom tags for the diagnostic. See [Microsoft.CodeAnalysis.WellKnownDiagnosticTags](#/api/Microsoft.CodeAnalysis.WellKnownDiagnosticTags) for some well known tags.

            If null, [Microsoft.CodeAnalysis.Diagnostic.CustomTags](#) will return an empty list.
    return:
      id: Diagnostic
      description: The [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) instance.
- id: Microsoft.CodeAnalysis.Diagnostic.Descriptor
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Descriptor
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Descriptor
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 148
  summary: >+
    Gets the diagnostic descriptor, which provides a description about a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic).

  syntax:
    content:
      CSharp: public abstract DiagnosticDescriptor Descriptor
    parameters:
    - id: Descriptor
      type:
        id: Microsoft.CodeAnalysis.DiagnosticDescriptor
        name: DiagnosticDescriptor
        href: api/Microsoft.CodeAnalysis.DiagnosticDescriptor
- id: Microsoft.CodeAnalysis.Diagnostic.get_Descriptor
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_Descriptor
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_Descriptor
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 148
- id: Microsoft.CodeAnalysis.Diagnostic.Id
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Id
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Id
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 153
  summary: >+
    Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as "CS1001".

  syntax:
    content:
      CSharp: public abstract string Id
    parameters:
    - id: Id
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostic.get_Id
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_Id
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_Id
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 153
- id: Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: GetMessage
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 163
  summary: >+
    Get the culture specific text of the message.

  syntax:
    content:
      CSharp: public abstract string GetMessage(IFormatProvider formatProvider = null);
    parameters:
    - id: formatProvider
      type:
        id: System.IFormatProvider
        name: System.IFormatProvider
        isExternal: true
    return:
      id: String
- id: Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: DefaultSeverity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 171
  summary: >+
    Gets the default [Microsoft.CodeAnalysis.DiagnosticSeverity](#/api/Microsoft.CodeAnalysis.DiagnosticSeverity) of the diagnostic's [Microsoft.CodeAnalysis.DiagnosticDescriptor](#/api/Microsoft.CodeAnalysis.DiagnosticDescriptor).

  syntax:
    content:
      CSharp: public virtual DiagnosticSeverity DefaultSeverity
    parameters:
    - id: DefaultSeverity
      type:
        id: Microsoft.CodeAnalysis.DiagnosticSeverity
        name: DiagnosticSeverity
        href: api/Microsoft.CodeAnalysis.DiagnosticSeverity
- id: Microsoft.CodeAnalysis.Diagnostic.get_DefaultSeverity
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_DefaultSeverity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_DefaultSeverity
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 171
- id: Microsoft.CodeAnalysis.Diagnostic.Severity
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Severity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Severity
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 180
  summary: >+
    Gets the effective [Microsoft.CodeAnalysis.DiagnosticSeverity](#/api/Microsoft.CodeAnalysis.DiagnosticSeverity) of the diagnostic.

  syntax:
    content:
      CSharp: public abstract DiagnosticSeverity Severity
    parameters:
    - id: Severity
      type:
        id: Microsoft.CodeAnalysis.DiagnosticSeverity
        name: DiagnosticSeverity
        href: api/Microsoft.CodeAnalysis.DiagnosticSeverity
- id: Microsoft.CodeAnalysis.Diagnostic.get_Severity
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_Severity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_Severity
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 180
- id: Microsoft.CodeAnalysis.Diagnostic.WarningLevel
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: WarningLevel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.WarningLevel
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 186
  summary: >+
    Gets the warning level. This is 0 for diagnostics with severity [Microsoft.CodeAnalysis.DiagnosticSeverity.Error](#/api/Microsoft.CodeAnalysis.DiagnosticSeverity),

    otherwise an integer between 1 and 4.

  syntax:
    content:
      CSharp: public abstract int WarningLevel
    parameters:
    - id: WarningLevel
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostic.get_WarningLevel
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_WarningLevel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_WarningLevel
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 186
- id: Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: IsWarningAsError
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 200
  summary: >+
    Returns true if this is a warning treated as an error; otherwise false.

  syntax:
    content:
      CSharp: public bool IsWarningAsError
    parameters:
    - id: IsWarningAsError
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostic.get_IsWarningAsError
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_IsWarningAsError
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_IsWarningAsError
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 202
- id: Microsoft.CodeAnalysis.Diagnostic.Location
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Location
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Location
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 212
  summary: >+
    Gets the primary location of the diagnostic, or [Microsoft.CodeAnalysis.Location.None](#/api/Microsoft.CodeAnalysis.Location) if no primary location.

  syntax:
    content:
      CSharp: public abstract Location Location
    parameters:
    - id: Location
      type:
        id: Microsoft.CodeAnalysis.Location
        name: Location
        href: api/Microsoft.CodeAnalysis.Location
- id: Microsoft.CodeAnalysis.Diagnostic.get_Location
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_Location
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_Location
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 212
- id: Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: AdditionalLocations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 218
  summary: >+
    Gets an array of additional locations related to the diagnostic.

    Typically these are the locations of other items referenced in the message.

  syntax:
    content:
      CSharp: public abstract IReadOnlyList<Location> AdditionalLocations
    parameters:
    - id: AdditionalLocations
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Location}
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: get_AdditionalLocations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 218
- id: Microsoft.CodeAnalysis.Diagnostic.ToString
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 230
  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
- id: Microsoft.CodeAnalysis.Diagnostic.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 235
  syntax:
    content:
      CSharp: public abstract override bool Equals(object obj);
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Diagnostic.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 237
  syntax:
    content:
      CSharp: public abstract override int GetHashCode();
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.Diagnostic.Equals(Microsoft.CodeAnalysis.Diagnostic)
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostic.Equals(Microsoft.CodeAnalysis.Diagnostic)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Diagnostic/Diagnostic.cs
    startLine: 239
  syntax:
    content:
      CSharp: public abstract bool Equals(Diagnostic obj);
    parameters:
    - id: obj
      type:
        id: Microsoft.CodeAnalysis.Diagnostic
        name: Diagnostic
        href: api/Microsoft.CodeAnalysis.Diagnostic
    return:
      id: Boolean
