id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
name:
  CSharp: CodeBlockStartAnalysisContext`1
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
  startLine: 429
summary: >+
  Context for a code block start action.

  A code block start action can use a [Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1](#/api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1) to register actions to be executed

  at any of:

  completion of semantic analysis of a method body or an expression appearing outside a method body, orcompletion of semantic analysis of a syntax node.

syntax:
  content:
    CSharp: >-
      public abstract class CodeBlockStartAnalysisContext<TLanguageKindEnum>

          where TLanguageKindEnum : struct
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: CodeBlock
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 440
  summary: >+
    Method body or expression subjext to analysis.

  syntax:
    content:
      CSharp: public SyntaxNode CodeBlock
    parameters:
    - id: CodeBlock
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_CodeBlock
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: get_CodeBlock
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_CodeBlock
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 440
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: OwningSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 445
  summary: >+
    [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol) for which the code block provides a definition or value.

  syntax:
    content:
      CSharp: public ISymbol OwningSymbol
    parameters:
    - id: OwningSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_OwningSymbol
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: get_OwningSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_OwningSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 445
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: SemanticModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 450
  summary: >+
    [Microsoft.CodeAnalysis.SemanticModel](#/api/Microsoft.CodeAnalysis.SemanticModel) that can provide semantic information about the [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)s in the code block.

  syntax:
    content:
      CSharp: public SemanticModel SemanticModel
    parameters:
    - id: SemanticModel
      type:
        id: Microsoft.CodeAnalysis.SemanticModel
        name: SemanticModel
        href: api/Microsoft.CodeAnalysis.SemanticModel
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_SemanticModel
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: get_SemanticModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_SemanticModel
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 450
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 455
  summary: >+
    Options specified for the analysis.

  syntax:
    content:
      CSharp: public AnalyzerOptions Options
    parameters:
    - id: Options
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
        name: AnalyzerOptions
        href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_Options
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: get_Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_Options
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 455
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: CancellationToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 460
  summary: >+
    Token to check for requested cancellation of the analysis.

  syntax:
    content:
      CSharp: public CancellationToken CancellationToken
    parameters:
    - id: CancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_CancellationToken
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: get_CancellationToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.get_CancellationToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 460
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: RegisterCodeBlockEndAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 476
  summary: >+
    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.

    A code block end action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about code blocks.

  syntax:
    content:
      CSharp: public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext}
        isExternal: true
      description: Action to be executed at the end of semantic analysis of a code block.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: RegisterSyntaxNodeAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 485
  summary: >+
    Register an action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode) with an appropriate Kind.

    A syntax node action can report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)s, and can also collect

    state information to be used by other syntax node actions or code block end actions.

  syntax:
    content:
      CSharp: public void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        isExternal: true
      description: Action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).
    - id: syntaxKinds
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: Action will be executed only if a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)'s Kind matches one of the syntax kind values.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  name:
    CSharp: RegisterSyntaxNodeAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 497
  summary: >+
    Register an action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode) with an appropriate Kind.

    A syntax node action can report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)s, and can also collect

    state information to be used by other syntax node actions or code block end actions.

  syntax:
    content:
      CSharp: public abstract void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        isExternal: true
      description: Action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).
    - id: syntaxKinds
      type:
        id: System.Collections.Immutable.ImmutableArray{`0}
        name: System.Collections.Immutable.ImmutableArray{`0}
        isExternal: true
      description: Action will be executed only if a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)'s Kind matches one of the syntax kind values.
    return:
      id: Void
