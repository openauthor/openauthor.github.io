id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
name:
  CSharp: CompilationStartAnalysisContext
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
  startLine: 156
summary: >+
  Context for a compilation start action.

  A compilation start action can use a [Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext) to register actions to be executed at any of:

  compilation end,completion of parsing a code document,completion of semantic analysis of a code document,completion of semantic analysis of a symbol,start of semantic analysis of a method body or an expression appearing outside a method body,completion of semantic analysis of a method body or an expression appearing outside a method body, orcompletion of semantic analysis of a syntax node.

syntax:
  content:
    CSharp: public abstract class CompilationStartAnalysisContext
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 165
  summary: >+
    [Microsoft.CodeAnalysis.Compilation](#/api/Microsoft.CodeAnalysis.Compilation) that is the subject of the analysis.

  syntax:
    content:
      CSharp: public Compilation Compilation
    parameters:
    - id: Compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: api/Microsoft.CodeAnalysis.Compilation
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_Compilation
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: get_Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_Compilation
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 165
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 170
  summary: >+
    Options specified for the analysis.

  syntax:
    content:
      CSharp: public AnalyzerOptions Options
    parameters:
    - id: Options
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
        name: AnalyzerOptions
        href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_Options
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: get_Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_Options
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 170
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: CancellationToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 175
  summary: >+
    Token to check for requested cancellation of the analysis.

  syntax:
    content:
      CSharp: public CancellationToken CancellationToken
    parameters:
    - id: CancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_CancellationToken
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: get_CancellationToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_CancellationToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 175
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterCompilationEndAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 189
  summary: >+
    Register an action to be executed at compilation end.

    A compilation end action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about the [Microsoft.CodeAnalysis.Compilation](#/api/Microsoft.CodeAnalysis.Compilation).

  syntax:
    content:
      CSharp: public abstract void RegisterCompilationEndAction(Action<CompilationEndAnalysisContext> action);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext}
        isExternal: true
      description: Action to be executed at compilation end.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSemanticModelAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 197
  summary: >+
    Register an action to be executed at completion of semantic analysis of a document,

    which will operate on the [Microsoft.CodeAnalysis.SemanticModel](#/api/Microsoft.CodeAnalysis.SemanticModel) of the document. A semantic model action

    reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about the model.

  syntax:
    content:
      CSharp: public abstract void RegisterSemanticModelAction(Action<SemanticModelAnalysisContext> action);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext}
        isExternal: true
      description: Action to be executed for a document's [Microsoft.CodeAnalysis.SemanticModel](#/api/Microsoft.CodeAnalysis.SemanticModel).
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSymbolAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 205
  summary: >+
    Register an action to be executed at completion of semantic analysis of an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol) with an appropriate Kind.>

    A symbol action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol)s.

  syntax:
    content:
      CSharp: public void RegisterSymbolAction(Action<SymbolAnalysisContext> action, params SymbolKind[] symbolKinds)
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext}
        isExternal: true
      description: Action to be executed for an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol).
    - id: symbolKinds
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: Action will be executed only if an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol)'s Kind matches one of the [Microsoft.CodeAnalysis.SymbolKind](#/api/Microsoft.CodeAnalysis.SymbolKind) values.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSymbolAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 216
  summary: >+
    Register an action to be executed at completion of semantic analysis of an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol) with an appropriate Kind.>

    A symbol action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol)s.

  syntax:
    content:
      CSharp: public abstract void RegisterSymbolAction(Action<SymbolAnalysisContext> action, ImmutableArray<SymbolKind> symbolKinds);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext}
        isExternal: true
      description: Action to be executed for an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol).
    - id: symbolKinds
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind}
        isExternal: true
      description: Action will be executed only if an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol)'s Kind matches one of the [Microsoft.CodeAnalysis.SymbolKind](#/api/Microsoft.CodeAnalysis.SymbolKind) values.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterCodeBlockStartAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 225
  summary: >+
    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.

    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,

    but cannot itself report any [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s.

  syntax:
    content:
      CSharp: 'public abstract void RegisterCodeBlockStartAction<TLanguageKindEnum>(Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action)where TLanguageKindEnum : struct;'
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}}
        isExternal: true
      description: Action to be executed at the start of semantic analysis of a code block.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterCodeBlockEndAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 232
  summary: >+
    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.

    A code block end action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about code blocks.

  syntax:
    content:
      CSharp: public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext}
        isExternal: true
      description: Action to be executed at the end of semantic analysis of a code block.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSyntaxTreeAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 239
  summary: >+
    Register an action to be executed at completion of parsing of a code document.

    A syntax tree action reports [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about the [Microsoft.CodeAnalysis.SyntaxTree](#/api/Microsoft.CodeAnalysis.SyntaxTree) of a document.

  syntax:
    content:
      CSharp: public abstract void RegisterSyntaxTreeAction(Action<SyntaxTreeAnalysisContext> action);
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext}
        isExternal: true
      description: Action to be executed at completion of parsing of a document.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSyntaxNodeAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 249
  summary: >+
    Register an action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode) with an appropriate Kind.

    A syntax node action can report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)s, and can also collect

    state information to be used by other syntax node actions or code block end actions.

  syntax:
    content:
      CSharp: 'public void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)where TLanguageKindEnum : struct'
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        isExternal: true
      description: Action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).
    - id: syntaxKinds
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: Action will be executed only if a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)'s Kind matches one of the syntax kind values.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  name:
    CSharp: RegisterSyntaxNodeAction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs
    startLine: 262
  summary: >+
    Register an action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode) with an appropriate Kind.

    A syntax node action can report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)s, and can also collect

    state information to be used by other syntax node actions or code block end actions.

  syntax:
    content:
      CSharp: 'public abstract void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds)where TLanguageKindEnum : struct;'
    parameters:
    - id: action
      type:
        id: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        name: System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext}
        isExternal: true
      description: Action to be executed at completion of semantic analysis of a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).
    - id: syntaxKinds
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: System.Collections.Immutable.ImmutableArray{``0}
        isExternal: true
      description: Action will be executed only if a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)'s Kind matches one of the syntax kind values.
    return:
      id: Void
