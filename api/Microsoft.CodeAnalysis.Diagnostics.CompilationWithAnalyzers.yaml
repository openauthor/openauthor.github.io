id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
name:
  CSharp: CompilationWithAnalyzers
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
  startLine: 10
syntax:
  content:
    CSharp: public class CompilationWithAnalyzers
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.Compilation
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.Compilation
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 16
  syntax:
    content:
      CSharp: public Compilation Compilation
    parameters:
    - id: Compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: api/Microsoft.CodeAnalysis.Compilation
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.get_Compilation
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: get_Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.get_Compilation
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 18
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: CompilationWithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 28
  summary: >+
    Creates a new compilation by attaching diagnostic analyzers to an existing compilation.

  syntax:
    content:
      CSharp: public CompilationWithAnalyzers(Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options, CancellationToken cancellationToken)
    parameters:
    - id: compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: api/Microsoft.CodeAnalysis.Compilation
      description: The original compilation.
    - id: analyzers
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}
        isExternal: true
      description: The set of analyzers to include in future analyses.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
        name: AnalyzerOptions
        href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
      description: Options that are passed to analyzers.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: A cancellation token that can be used to abort analysis.
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetAnalyzerDiagnosticsAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 37
  summary: >+
    Returns diagnostics produced by diagnostic analyzers.

  syntax:
    content:
      CSharp: public async Task<ImmutableArray<Diagnostic>> GetAnalyzerDiagnosticsAsync()
    parameters: []
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetAllDiagnosticsAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 49
  summary: >+
    Returns diagnostics produced by compilation and by diagnostic analyzers.

  syntax:
    content:
      CSharp: public async Task<ImmutableArray<Diagnostic>> GetAllDiagnosticsAsync()
    parameters: []
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetEffectiveDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 65
  summary: >+
    Given a set of compiler or [Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer](#/api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer) generated , returns the effective diagnostics after applying the below filters:

    1) [Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions](#/api/Microsoft.CodeAnalysis.CompilationOptions) specified for the given .

    2) [Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption](#/api/Microsoft.CodeAnalysis.CompilationOptions) specified for the given .

    3) Diagnostic suppression through applied [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute](#).

    4) Pragma directives for the given .

  syntax:
    content:
      CSharp: public static IEnumerable<Diagnostic> GetEffectiveDiagnostics(IEnumerable<Diagnostic> diagnostics, Compilation compilation)
    parameters:
    - id: diagnostics
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}
        isExternal: true
    - id: compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: api/Microsoft.CodeAnalysis.Compilation
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: IsDiagnosticAnalyzerSuppressed
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs
    startLine: 95
  summary: >+
    Returns true if all the diagnostics that can be produced by this analyzer are suppressed through options.

    says whether the caller would like the exception thrown by the analyzers to be handled or not. If true - Handles ; False - Not handled.

  syntax:
    content:
      CSharp: public static bool IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, Func<Exception, DiagnosticAnalyzer, bool> continueOnAnalyzerException)
    parameters:
    - id: analyzer
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
        name: DiagnosticAnalyzer
        href: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CompilationOptions
        name: CompilationOptions
        href: api/Microsoft.CodeAnalysis.CompilationOptions
    - id: continueOnAnalyzerException
      type:
        id: System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean}
        name: System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean}
        isExternal: true
    return:
      id: Boolean
