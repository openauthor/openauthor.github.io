id: Microsoft.CodeAnalysis.Diagnostics
yaml: api/Microsoft.CodeAnalysis.Diagnostics.yaml
href: api/Microsoft.CodeAnalysis.Diagnostics
name:
  CSharp: Diagnostics
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Diagnostics
type: Namespace
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilerDiagnosticAnalyzer.CompilationAnalyzer.cs
  startLine: 5
items:
- id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference
  type: Class
  summary: >+
    Represents an in-memory analyzer reference image.

- id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
  type: Class
  summary: >+
    Options passed to [Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer](#/api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer).

- id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
  type: Class
  summary: >+
    Represents an analyzer assembly reference that contains diagnostic analyzers.

- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  type: Class
- id: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions
  type: Class
- id: Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference
  type: Class
  summary: >+
    Represents an analyzer reference that can't be resolved.

- id: Microsoft.CodeAnalysis.Diagnostics.AnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.AnalysisContext
  type: Class
  summary: >+
    Context for initializing an analyzer.

    Analyzer initialization can use an [Microsoft.CodeAnalysis.Diagnostics.AnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.AnalysisContext) to register actions to be executed at any of:

    compilation start,compilation end,completion of parsing a code document,completion of semantic analysis of a code document,completion of semantic analysis of a symbol,start of semantic analysis of a method body or an expression appearing outside a method body,completion of semantic analysis of a method body or an expression appearing outside a method body, orcompletion of semantic analysis of a syntax node.

- id: Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext
  type: Class
  summary: >+
    Context for a compilation start action.

    A compilation start action can use a [Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext) to register actions to be executed at any of:

    compilation end,completion of parsing a code document,completion of semantic analysis of a code document,completion of semantic analysis of a symbol,start of semantic analysis of a method body or an expression appearing outside a method body,completion of semantic analysis of a method body or an expression appearing outside a method body, orcompletion of semantic analysis of a syntax node.

- id: Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext
  type: Struct
  summary: >+
    Context for a compilation end action.

    A compilation end action can use a [Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about a [Microsoft.CodeAnalysis.Compilation](#/api/Microsoft.CodeAnalysis.Compilation).

- id: Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext
  type: Struct
  summary: >+
    Context for a semantic model action.

    A semantic model action operates on the [Microsoft.CodeAnalysis.SemanticModel](#/api/Microsoft.CodeAnalysis.SemanticModel) of a code document, and can use a [Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about the model.

- id: Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext
  type: Struct
  summary: >+
    Context for a symbol action.

    A symbol action can use a [Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about an [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol).

- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1
  type: Class
  summary: >+
    Context for a code block start action.

    A code block start action can use a [Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1](#/api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1) to register actions to be executed

    at any of:

    completion of semantic analysis of a method body or an expression appearing outside a method body, orcompletion of semantic analysis of a syntax node.

- id: Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext
  type: Struct
  summary: >+
    Context for a code block end action.

    A code block end action can use a [Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about a code block.

- id: Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext
  type: Struct
  summary: >+
    Context for a syntax tree action.

    A syntax tree action can use a [Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s about a [Microsoft.CodeAnalysis.SyntaxTree](#/api/Microsoft.CodeAnalysis.SyntaxTree) for a code document.

- id: Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext
  type: Struct
  summary: >+
    Context for a syntax node action.

    A syntax node action can use a [Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext](#/api/Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext) to report [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)s for a [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).

- id: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  type: Class
  summary: >+
    The base type for diagnostic analyzers.

- id: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute
  yaml: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute
  type: Class
  summary: >+
    Place this attribute onto a type to cause it to be considered a diagnostic analyzer.

