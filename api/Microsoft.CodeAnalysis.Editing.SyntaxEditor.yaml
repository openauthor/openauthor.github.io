id: Microsoft.CodeAnalysis.Editing.SyntaxEditor
yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
name:
  CSharp: SyntaxEditor
qualifiedName:
  CSharp: SyntaxEditor
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    local: C:\roslyn\
    sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
  path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
  startLine: 14
summary: >+
  An editor for making changes to a syntax tree.

syntax:
  content:
    CSharp: public class SyntaxEditor
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: .ctor
  qualifiedName:
    CSharp: .ctor
  type: Constructor
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 23
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.Editing.SyntaxEditor](#/api\Microsoft.CodeAnalysis.Editing.SyntaxEditor) instance.

  syntax:
    content:
      CSharp: public SyntaxEditor(SyntaxNode root, Workspace workspace)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: workspace
      type:
        id: Microsoft.CodeAnalysis.Workspace
        name: Workspace
        href: api\Microsoft.CodeAnalysis.Workspace
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.OriginalRoot
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: OriginalRoot
  qualifiedName:
    CSharp: OriginalRoot
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 43
  summary: >+
    The [Microsoft.CodeAnalysis.SyntaxNode](#) that was specified when the [Microsoft.CodeAnalysis.Editing.SyntaxEditor](#/api\Microsoft.CodeAnalysis.Editing.SyntaxEditor) was constructed.

  syntax:
    content:
      CSharp: public SyntaxNode OriginalRoot
    parameters:
    - id: OriginalRoot
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.get_OriginalRoot
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: get_OriginalRoot
  qualifiedName:
    CSharp: get_OriginalRoot
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 45
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.Generator
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: Generator
  qualifiedName:
    CSharp: Generator
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 51
  summary: >+
    A [Microsoft.CodeAnalysis.Editing.SyntaxGenerator](#/api\Microsoft.CodeAnalysis.Editing.SyntaxGenerator) to use to create and change [Microsoft.CodeAnalysis.SyntaxNode](#)'s.

  syntax:
    content:
      CSharp: public SyntaxGenerator Generator
    parameters:
    - id: Generator
      type:
        id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
        name: SyntaxGenerator
        href: api\Microsoft.CodeAnalysis.Editing.SyntaxGenerator
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.get_Generator
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: get_Generator
  qualifiedName:
    CSharp: get_Generator
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 53
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: GetChangedRoot
  qualifiedName:
    CSharp: GetChangedRoot
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 59
  summary: >+
    Returns the changed root node.

  syntax:
    content:
      CSharp: public SyntaxNode GetChangedRoot()
    parameters: []
    return:
      id: SyntaxNode
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.TrackNode(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: TrackNode
  qualifiedName:
    CSharp: TrackNode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 75
  summary: >+
    Makes sure the node is tracked, even if it is not changed.

  syntax:
    content:
      CSharp: public void TrackNode(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: RemoveNode
  qualifiedName:
    CSharp: RemoveNode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 85
  summary: >+
    Remove the node from the tree.

  syntax:
    content:
      CSharp: public void RemoveNode(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node to remove that currently exists as part of the tree.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: ReplaceNode
  qualifiedName:
    CSharp: ReplaceNode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 97
  summary: >+
    Replace the specified node with a node produced by the function.

  syntax:
    content:
      CSharp: public void ReplaceNode(SyntaxNode node, Func<SyntaxNode, SyntaxGenerator, SyntaxNode> computeReplacement)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node to replace that already exists in the tree.
    - id: computeReplacement
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: "A function that computes a replacement node. \r\n    The node passed into the compute function includes changes from prior edits. It will not appear as a descendant of the original root."
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: ReplaceNode
  qualifiedName:
    CSharp: ReplaceNode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 108
  summary: >+
    Replace the specified node with a different node.

  syntax:
    content:
      CSharp: public void ReplaceNode(SyntaxNode node, SyntaxNode newNode)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node to replace that already exists in the tree.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The new node that will be placed into the tree in the existing node's location.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: InsertBefore
  qualifiedName:
    CSharp: InsertBefore
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 119
  summary: >+
    Insert the new nodes before the specified node already existing in the tree.

  syntax:
    content:
      CSharp: public void InsertBefore(SyntaxNode node, IEnumerable<SyntaxNode> newNodes)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: The nodes to place before the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: InsertBefore
  qualifiedName:
    CSharp: InsertBefore
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 130
  summary: >+
    Insert the new node before the specified node already existing in the tree.

  syntax:
    content:
      CSharp: public void InsertBefore(SyntaxNode node, SyntaxNode newNode)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node to place before the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: InsertAfter
  qualifiedName:
    CSharp: InsertAfter
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 141
  summary: >+
    Insert the new nodes after the specified node already existing in the tree.

  syntax:
    content:
      CSharp: public void InsertAfter(SyntaxNode node, IEnumerable<SyntaxNode> newNodes)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: The nodes to place after the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor.yaml
  href: api\Microsoft.CodeAnalysis.Editing.SyntaxEditor
  name:
    CSharp: InsertAfter
  qualifiedName:
    CSharp: InsertAfter
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\Editing\SyntaxEditor.cs
    startLine: 152
  summary: >+
    Insert the new node after the specified node already existing in the tree.

  syntax:
    content:
      CSharp: public void InsertAfter(SyntaxNode node, SyntaxNode newNode)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The node to place after the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.
    return:
      id: Void
