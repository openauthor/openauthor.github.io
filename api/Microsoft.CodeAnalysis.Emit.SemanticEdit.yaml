id: Microsoft.CodeAnalysis.Emit.SemanticEdit
yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
name:
  CSharp: SemanticEdit
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
  startLine: 34
summary: >+
  Describes a symbol edit between two compilations.

  For example, an addition of a method, an update of a method, removal of a type, etc.

syntax:
  content:
    CSharp: public struct SemanticEdit
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: Kind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
  type: Field
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 42
  summary: >+
    The type of edit.

- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: OldSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
  type: Field
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 48
  summary: >+
    The symbol from the earlier compilation,

    or null if the edit represents an addition.

- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: NewSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
  type: Field
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 54
  summary: >+
    The symbol from the later compilation,

    or null if the edit represents a deletion.

- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: SyntaxMap
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
  type: Field
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 65
  summary: >+
    A map from syntax node in the later compilation to syntax node in the previous compilation,

    or null if [Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables](#/api/Microsoft.CodeAnalysis.Emit.SemanticEdit) is false and the map is not needed or

    the source of the current method is the same as the source of the previous method.

- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: PreserveLocalVariables
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
  type: Field
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 71
  summary: >+
    True if the edit is an update of the active method and local values

    should be preserved; false otherwise.

- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
  type: Constructor
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 91
  summary: >+
    Initializes an instance of [Microsoft.CodeAnalysis.Emit.SemanticEdit](#/api/Microsoft.CodeAnalysis.Emit.SemanticEdit).

  syntax:
    content:
      CSharp: public SemanticEdit(SemanticEditKind kind, ISymbol oldSymbol, ISymbol newSymbol, Func<SyntaxNode, SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.Emit.SemanticEditKind
        name: SemanticEditKind
        href: api/Microsoft.CodeAnalysis.Emit.SemanticEditKind
      description: The type of edit.
    - id: oldSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
      description: The symbol from the earlier compilation, or null if the edit represents an addition.
    - id: newSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
      description: The symbol from the later compilation, or null if the edit represents a deletion.
    - id: syntaxMap
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: "A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if  is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method."
    - id: preserveLocalVariables
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if the edit is an update of an active method and local values should be preserved; false otherwise.
- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 101
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 108
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
  yaml: api/Microsoft.CodeAnalysis.Emit.SemanticEdit.yaml
  href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 113
  syntax:
    content:
      CSharp: public bool Equals(SemanticEdit other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.Emit.SemanticEdit
        name: SemanticEdit
        href: api/Microsoft.CodeAnalysis.Emit.SemanticEdit
    return:
      id: Boolean
