id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
name:
  CSharp: SymbolCallerInfo
qualifiedName:
  CSharp: SymbolCallerInfo
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    local: C:\roslyn\
    sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
  path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
  startLine: 24
summary: >+
  Contains information about a call from one symbol to another.  The symbol making the call is

  stored in CallingSymbol and the symbol that the call was made to is stored in CalledSymbol.

  Whether or not the call is direct or indirect is also stored.  A direct call is a call that

  does not go through any other symbols in the inheritance hierarchy of CalledSymbol, while an

  indirect call does go through the inheritance hierarchy.  For example, calls through a base

  member that this symbol overrides, or through an interface member that this symbol

  implements will be considered 'indirect'.

syntax:
  content:
    CSharp: public struct SymbolCallerInfo
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: CallingSymbol
  qualifiedName:
    CSharp: CallingSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 29
  summary: >+
    The symbol that is calling the symbol being called.

  syntax:
    content:
      CSharp: public ISymbol CallingSymbol
    parameters:
    - id: CallingSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.get_CallingSymbol
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: get_CallingSymbol
  qualifiedName:
    CSharp: get_CallingSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 29
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: Locations
  qualifiedName:
    CSharp: Locations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 34
  summary: >+
    The locations inside the calling symbol where the called symbol is referenced.

  syntax:
    content:
      CSharp: public IEnumerable<Location> Locations
    parameters:
    - id: Locations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        isExternal: true
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.get_Locations
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: get_Locations
  qualifiedName:
    CSharp: get_Locations
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 34
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: CalledSymbol
  qualifiedName:
    CSharp: CalledSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 39
  summary: >+
    The symbol being called.

  syntax:
    content:
      CSharp: public ISymbol CalledSymbol
    parameters:
    - id: CalledSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.get_CalledSymbol
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: get_CalledSymbol
  qualifiedName:
    CSharp: get_CalledSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 39
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: IsDirect
  qualifiedName:
    CSharp: IsDirect
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 47
  summary: >+
    True if the CallingSymbol is directly calling CalledSymbol.  False if it is calling a

    symbol in the inheritance hierarchy of the CalledSymbol.  For example, if the called

    symbol is a class method, then an indirect call might be through an interface method that

    the class method implements.

  syntax:
    content:
      CSharp: public bool IsDirect
    parameters:
    - id: IsDirect
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.get_IsDirect
  yaml: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api\Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  name:
    CSharp: get_IsDirect
  qualifiedName:
    CSharp: get_IsDirect
  source:
    remote:
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      local: C:\roslyn\
      sha1: 1f481aa6a0c6e8392329364a28316e0b6cd563f3
    path: src\Workspaces\Core\Portable\FindSymbols\SymbolCallerInfo.cs
    startLine: 47
