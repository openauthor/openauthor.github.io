id: Microsoft.CodeAnalysis.FindSymbols
yaml: api/Microsoft.CodeAnalysis.FindSymbols.yaml
href: api/Microsoft.CodeAnalysis.FindSymbols
name:
  CSharp: FindSymbols
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.FindSymbols
type: Namespace
source:
  remote:
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    local: C:/roslyn/
    sha1: 8c49d3e937ebadb974cebab7db31e1800918265d
  path: src/Workspaces/Core/Portable/FindSymbols/DeclaredSymbolInfo.cs
  startLine: 7
items:
- id: Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress
  yaml: api/Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress.yaml
  href: api/Microsoft.CodeAnalysis.FindSymbols.IFindReferencesProgress
  type: Interface
  summary: >+
    Reports the progress of the FindReferences operation.  Note: these methods may be called on

    any thread.

- id: Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol
  yaml: api/Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol.yaml
  href: api/Microsoft.CodeAnalysis.FindSymbols.ReferencedSymbol
  type: Class
  summary: >+
    Represents a single result of the call to the synchronous

    IFindReferencesService.FindReferences method. Finding the references to a symbol will result

    in a set of definitions being returned (containing at least the symbol requested) as well as

    any references to those definitions in the source. Multiple definitions may be found due to

    how C# and VB allow a symbol to be both a definition and a reference at the same time (for

    example, a method which implements an interface method).

- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
  yaml: api/Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  href: api/Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
  type: Struct
  summary: >+
    Information about a reference to a symbol.

- id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  yaml: api/Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yaml
  href: api/Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  type: Struct
  summary: >+
    Contains information about a call from one symbol to another.  The symbol making the call is

    stored in CallingSymbol and the symbol that the call was made to is stored in CalledSymbol.

    Whether or not the call is direct or indirect is also stored.  A direct call is a call that

    does not go through any other symbols in the inheritance hierarchy of CalledSymbol, while an

    indirect call does go through the inheritance hierarchy.  For example, calls through a base

    member that this symbol overrides, or through an interface member that this symbol

    implements will be considered 'indirect'.

- id: Microsoft.CodeAnalysis.FindSymbols.SymbolFinder
  yaml: api/Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.yaml
  href: api/Microsoft.CodeAnalysis.FindSymbols.SymbolFinder
  type: Class
