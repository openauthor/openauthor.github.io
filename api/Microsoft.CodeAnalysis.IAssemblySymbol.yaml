id: Microsoft.CodeAnalysis.IAssemblySymbol
yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
href: api/Microsoft.CodeAnalysis.IAssemblySymbol
name:
  CSharp: IAssemblySymbol
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.IAssemblySymbol
type: Interface
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
  startLine: 10
summary: >+
  Represents a .NET assembly, consisting of one or more modules.

syntax:
  content:
    CSharp: public interface IAssemblySymbol
items:
- id: Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: IsInteractive
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 15
  summary: >+
    True if the assembly contains interactive code.

  syntax:
    content:
      CSharp: bool IsInteractive
    parameters:
    - id: IsInteractive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_IsInteractive
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_IsInteractive
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_IsInteractive
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 15
- id: Microsoft.CodeAnalysis.IAssemblySymbol.Identity
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: Identity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.Identity
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 20
  summary: >+
    Gets the name of this assembly.

  syntax:
    content:
      CSharp: AssemblyIdentity Identity
    parameters:
    - id: Identity
      type:
        id: Microsoft.CodeAnalysis.AssemblyIdentity
        name: AssemblyIdentity
        href: api/Microsoft.CodeAnalysis.AssemblyIdentity
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_Identity
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_Identity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_Identity
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 20
- id: Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: GlobalNamespace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 27
  summary: >+
    Gets the merged root namespace that contains all namespaces and types defined in the modules

    of this assembly. If there is just one module in this assembly, this property just returns the

    GlobalNamespace of that module.

  syntax:
    content:
      CSharp: INamespaceSymbol GlobalNamespace
    parameters:
    - id: GlobalNamespace
      type:
        id: Microsoft.CodeAnalysis.INamespaceSymbol
        name: INamespaceSymbol
        href: api/Microsoft.CodeAnalysis.INamespaceSymbol
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_GlobalNamespace
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_GlobalNamespace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_GlobalNamespace
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 27
- id: Microsoft.CodeAnalysis.IAssemblySymbol.Modules
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: Modules
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.Modules
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 33
  summary: >+
    Gets the modules in this assembly. (There must be at least one.) The first one is the main module

    that holds the assembly manifest.

  syntax:
    content:
      CSharp: IEnumerable<IModuleSymbol> Modules
    parameters:
    - id: Modules
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IModuleSymbol}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IModuleSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_Modules
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_Modules
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_Modules
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 33
- id: Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: TypeNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 38
  summary: >+
    Gets the set of type identifiers from this assembly.

  syntax:
    content:
      CSharp: ICollection<string> TypeNames
    parameters:
    - id: TypeNames
      type:
        id: System.Collections.Generic.ICollection{System.String}
        name: System.Collections.Generic.ICollection{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_TypeNames
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_TypeNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_TypeNames
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 38
- id: Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: NamespaceNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 43
  summary: >+
    Gets the set of namespace names from this assembly.

  syntax:
    content:
      CSharp: ICollection<string> NamespaceNames
    parameters:
    - id: NamespaceNames
      type:
        id: System.Collections.Generic.ICollection{System.String}
        name: System.Collections.Generic.ICollection{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_NamespaceNames
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_NamespaceNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_NamespaceNames
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 43
- id: Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: GivesAccessTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 48
  summary: >+
    Gets a value indicating whether this assembly gives

    access to internal symbols

  syntax:
    content:
      CSharp: bool GivesAccessTo(IAssemblySymbol toAssembly);
    parameters:
    - id: toAssembly
      type:
        id: Microsoft.CodeAnalysis.IAssemblySymbol
        name: IAssemblySymbol
        href: api/Microsoft.CodeAnalysis.IAssemblySymbol
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: GetTypeByMetadataName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 55
  summary: >+
    Lookup a type within the assembly using the canonical CLR metadata name of the type.

  syntax:
    content:
      CSharp: INamedTypeSymbol GetTypeByMetadataName(string fullyQualifiedMetadataName);
    parameters:
    - id: fullyQualifiedMetadataName
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: Type name.
    return:
      id: INamedTypeSymbol
      description: Symbol for the type or null if type cannot be found or is ambiguous.
- id: Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: MightContainExtensionMethods
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 61
  summary: >+
    Determines if the assembly might contain extension methods.

    If false, the assembly does not contain extension methods.

  syntax:
    content:
      CSharp: bool MightContainExtensionMethods
    parameters:
    - id: MightContainExtensionMethods
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IAssemblySymbol.get_MightContainExtensionMethods
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: get_MightContainExtensionMethods
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.get_MightContainExtensionMethods
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 61
- id: Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  name:
    CSharp: ResolveForwardedType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/IAssemblySymbol.cs
    startLine: 68
  summary: >+
    Returns the type symbol for a forwarded type based its canonical CLR metadata name.

    The name should refer to a non-nested type. If type with this name is not forwarded,

    null is returned.

  syntax:
    content:
      CSharp: INamedTypeSymbol ResolveForwardedType(string fullyQualifiedMetadataName);
    parameters:
    - id: fullyQualifiedMetadataName
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: INamedTypeSymbol
