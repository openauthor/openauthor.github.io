id: Microsoft.CodeAnalysis.IMethodSymbol
yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
href: api/Microsoft.CodeAnalysis.IMethodSymbol
name:
  CSharp: IMethodSymbol
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.IMethodSymbol
type: Interface
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
  startLine: 11
summary: >+
  Represents a method or method-like symbol (including constructor,

  destructor, operator, or property/event accessor).

syntax:
  content:
    CSharp: public interface IMethodSymbol
items:
- id: Microsoft.CodeAnalysis.IMethodSymbol.MethodKind
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: MethodKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.MethodKind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 18
  summary: >+
    Gets what kind of method this is. There are several different kinds of things in the

    C# language that are represented as methods. This property allow distinguishing those things

    without having to decode the name of the method.

  syntax:
    content:
      CSharp: MethodKind MethodKind
    parameters:
    - id: MethodKind
      type:
        id: Microsoft.CodeAnalysis.MethodKind
        name: MethodKind
        href: api/Microsoft.CodeAnalysis.MethodKind
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_MethodKind
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_MethodKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_MethodKind
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 18
- id: Microsoft.CodeAnalysis.IMethodSymbol.Arity
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: Arity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.Arity
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 24
  summary: >+
    Returns the arity of this method, or the number of type parameters it takes.

    A non-generic method has zero arity.

  syntax:
    content:
      CSharp: int Arity
    parameters:
    - id: Arity
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_Arity
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_Arity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_Arity
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 24
- id: Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: IsGenericMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 29
  summary: >+
    Returns whether this method is generic; i.e., does it have any type parameters?

  syntax:
    content:
      CSharp: bool IsGenericMethod
    parameters:
    - id: IsGenericMethod
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_IsGenericMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_IsGenericMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_IsGenericMethod
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 29
- id: Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: IsExtensionMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 34
  summary: >+
    Returns true if this method is an extension method.

  syntax:
    content:
      CSharp: bool IsExtensionMethod
    parameters:
    - id: IsExtensionMethod
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_IsExtensionMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_IsExtensionMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_IsExtensionMethod
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 34
- id: Microsoft.CodeAnalysis.IMethodSymbol.IsAsync
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: IsAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.IsAsync
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 39
  summary: >+
    Returns true if this method is an async method

  syntax:
    content:
      CSharp: bool IsAsync
    parameters:
    - id: IsAsync
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_IsAsync
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_IsAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_IsAsync
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 39
- id: Microsoft.CodeAnalysis.IMethodSymbol.IsVararg
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: IsVararg
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.IsVararg
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 49
  summary: "Returns whether this method is using CLI VARARG calling convention. This is used for\r\nC-style variable argument lists. This is used extremely rarely in C# code and is\r\nrepresented using the undocumented “__arglist” keyword.\r\n\r\nNote that methods with “params” on the last parameter are indicated with the “IsParams”\r\nproperty on ParameterSymbol, and are not represented with this property.\r\n"
  syntax:
    content:
      CSharp: bool IsVararg
    parameters:
    - id: IsVararg
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_IsVararg
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_IsVararg
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_IsVararg
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 49
- id: Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: IsCheckedBuiltin
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 54
  summary: >+
    Returns whether this built-in operator checks for integer overflow.

  syntax:
    content:
      CSharp: bool IsCheckedBuiltin
    parameters:
    - id: IsCheckedBuiltin
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_IsCheckedBuiltin
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_IsCheckedBuiltin
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_IsCheckedBuiltin
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 54
- id: Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: HidesBaseMethodsByName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 61
  summary: >+
    Returns true if this method hides base methods by name. This cannot be specified directly

    in the C# language, but can be true for methods defined in other languages imported from

    metadata. The equivalent of the "hidebyname" flag in metadata.

  syntax:
    content:
      CSharp: bool HidesBaseMethodsByName
    parameters:
    - id: HidesBaseMethodsByName
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_HidesBaseMethodsByName
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_HidesBaseMethodsByName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_HidesBaseMethodsByName
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 61
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReturnsVoid
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 66
  summary: >+
    Returns true if this method has no return type; i.e., returns "void".

  syntax:
    content:
      CSharp: bool ReturnsVoid
    parameters:
    - id: ReturnsVoid
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnsVoid
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ReturnsVoid
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnsVoid
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 66
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReturnType
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReturnType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReturnType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 71
  summary: >+
    Gets the return type of the method.

  syntax:
    content:
      CSharp: ITypeSymbol ReturnType
    parameters:
    - id: ReturnType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnType
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ReturnType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 71
- id: Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: TypeArguments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 78
  summary: >+
    Returns the type arguments that have been substituted for the type parameters.

    If nothing has been substituted for a given type parameter,

    then the type parameter itself is consider the type argument.

  syntax:
    content:
      CSharp: ImmutableArray<ITypeSymbol> TypeArguments
    parameters:
    - id: TypeArguments
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_TypeArguments
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_TypeArguments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_TypeArguments
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 78
- id: Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: TypeParameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 84
  summary: >+
    Get the type parameters on this method. If the method has not generic,

    returns an empty list.

  syntax:
    content:
      CSharp: ImmutableArray<ITypeParameterSymbol> TypeParameters
    parameters:
    - id: TypeParameters
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_TypeParameters
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_TypeParameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_TypeParameters
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 84
- id: Microsoft.CodeAnalysis.IMethodSymbol.Parameters
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: Parameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.Parameters
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 90
  summary: >+
    Gets the parameters of this method. If this method has no parameters, returns

    an empty list.

  syntax:
    content:
      CSharp: ImmutableArray<IParameterSymbol> Parameters
    parameters:
    - id: Parameters
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_Parameters
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_Parameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_Parameters
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 90
- id: Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ConstructedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 98
  summary: >+
    Returns the method symbol that this method was constructed from. The resulting

    method symbol

    has the same containing type (if any), but has type arguments that are the same

    as the type parameters (although its containing type might not).

  syntax:
    content:
      CSharp: IMethodSymbol ConstructedFrom
    parameters:
    - id: ConstructedFrom
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ConstructedFrom
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ConstructedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ConstructedFrom
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 98
- id: Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 105
  summary: >+
    Get the original definition of this symbol. If this symbol is derived from another

    symbol by (say) type substitution, this gets the original symbol, as it was defined in

    source or metadata.

  syntax:
    content:
      CSharp: new IMethodSymbol OriginalDefinition
    parameters:
    - id: OriginalDefinition
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_OriginalDefinition
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 105
- id: Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: OverriddenMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 111
  summary: >+
    If this method overrides another method (because it both had the override modifier

    and there correctly was a method to override), returns the overridden method.

  syntax:
    content:
      CSharp: IMethodSymbol OverriddenMethod
    parameters:
    - id: OverriddenMethod
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_OverriddenMethod
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_OverriddenMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_OverriddenMethod
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 111
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReceiverType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 116
  summary: >+
    If this method can be applied to an object, returns the type of object it is applied to.

  syntax:
    content:
      CSharp: ITypeSymbol ReceiverType
    parameters:
    - id: ReceiverType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ReceiverType
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ReceiverType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ReceiverType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 116
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReducedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 122
  summary: >+
    If this method is a reduced extension method, returns the definition of extension

    method from which this was reduced. Otherwise, returns null.

  syntax:
    content:
      CSharp: IMethodSymbol ReducedFrom
    parameters:
    - id: ReducedFrom
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ReducedFrom
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ReducedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ReducedFrom
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 122
- id: Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: GetTypeInferredDuringReduction
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 132
  summary: >+
    If this method is a reduced extension method, returns a type inferred during reduction process for the type parameter.

  syntax:
    content:
      CSharp: ITypeSymbol GetTypeInferredDuringReduction(ITypeParameterSymbol reducedFromTypeParameter);
    parameters:
    - id: reducedFromTypeParameter
      type:
        id: Microsoft.CodeAnalysis.ITypeParameterSymbol
        name: ITypeParameterSymbol
        href: api/Microsoft.CodeAnalysis.ITypeParameterSymbol
      description: Type parameter of the corresponding [Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom](#/api/Microsoft.CodeAnalysis.IMethodSymbol) method.
    return:
      id: ITypeSymbol
      description: Inferred type or Nothing if nothing was inferred.
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReduceExtensionMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 138
  summary: >+
    If this is an extension method that can be applied to a receiver of the given type,

    returns a reduced extension method symbol thus formed. Otherwise, returns null.

  syntax:
    content:
      CSharp: IMethodSymbol ReduceExtensionMethod(ITypeSymbol receiverType);
    parameters:
    - id: receiverType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ExplicitInterfaceImplementations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 147
  summary: >+
    Returns interface methods explicitly implemented by this method.

  syntax:
    content:
      CSharp: ImmutableArray<IMethodSymbol> ExplicitInterfaceImplementations
    parameters:
    - id: ExplicitInterfaceImplementations
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ExplicitInterfaceImplementations
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ExplicitInterfaceImplementations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ExplicitInterfaceImplementations
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 147
- id: Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: ReturnTypeCustomModifiers
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 152
  summary: >+
    Returns the list of custom modifiers, if any, associated with the returned value.

  syntax:
    content:
      CSharp: ImmutableArray<CustomModifier> ReturnTypeCustomModifiers
    parameters:
    - id: ReturnTypeCustomModifiers
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}
        isExternal: true
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnTypeCustomModifiers
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_ReturnTypeCustomModifiers
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_ReturnTypeCustomModifiers
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 152
- id: Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: GetReturnTypeAttributes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 157
  summary: >+
    Returns the list of custom attributes, if any, associated with the returned value.

  syntax:
    content:
      CSharp: ImmutableArray<AttributeData> GetReturnTypeAttributes();
    parameters: []
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: AssociatedSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 170
  summary: >+
    Returns a symbol (e.g. property, event, etc.) associated with the method.

  syntax:
    content:
      CSharp: ISymbol AssociatedSymbol
    parameters:
    - id: AssociatedSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_AssociatedSymbol
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_AssociatedSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_AssociatedSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 170
- id: Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: Construct
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 177
  summary: >+
    Returns a constructed method given its type arguments.

  syntax:
    content:
      CSharp: IMethodSymbol Construct(params ITypeSymbol[] typeArguments);
    parameters:
    - id: typeArguments
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The immediate type arguments to be replaced for type

            parameters in the method.
    return:
      id: IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: PartialDefinitionPart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 183
  summary: >+
    If this is a partial method implementation part, returns the corresponding

    definition part.  Otherwise null.

  syntax:
    content:
      CSharp: IMethodSymbol PartialDefinitionPart
    parameters:
    - id: PartialDefinitionPart
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_PartialDefinitionPart
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_PartialDefinitionPart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_PartialDefinitionPart
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 183
- id: Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: PartialImplementationPart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 190
  summary: >+
    If this is a partial method declaration without a body, and the method is

    implemented with a body, returns that implementing definition.  Otherwise

    null.

  syntax:
    content:
      CSharp: IMethodSymbol PartialImplementationPart
    parameters:
    - id: PartialImplementationPart
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_PartialImplementationPart
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_PartialImplementationPart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_PartialImplementationPart
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 190
- id: Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: GetDllImportData
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 195
  summary: >+
    Platform invoke information, or null if the method isn't a P/Invoke.

  syntax:
    content:
      CSharp: DllImportData GetDllImportData();
    parameters: []
    return:
      id: DllImportData
- id: Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: AssociatedAnonymousDelegate
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 204
  summary: >+
    If this method is a Lambda method (MethodKind = MethodKind.LambdaMethod) and

    there is an anonymous delegate associated with it, returns this delegate.



    Returns null if the symbol is not a lambda or if it does not have an

    anonymous delegate associated with it.

  syntax:
    content:
      CSharp: INamedTypeSymbol AssociatedAnonymousDelegate
    parameters:
    - id: AssociatedAnonymousDelegate
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.IMethodSymbol.get_AssociatedAnonymousDelegate
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  name:
    CSharp: get_AssociatedAnonymousDelegate
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.IMethodSymbol.get_AssociatedAnonymousDelegate
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/IMethodSymbol.cs
    startLine: 204
