id: Microsoft.CodeAnalysis.INamedTypeSymbol
yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
name:
  CSharp: INamedTypeSymbol
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol
type: Interface
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
  startLine: 10
summary: >+
  Represents a type other than an array, a pointer, a type parameter.

syntax:
  content:
    CSharp: public interface INamedTypeSymbol
items:
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.Arity
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: Arity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.Arity
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 16
  summary: >+
    Returns the arity of this type, or the number of type parameters it takes.

    A non-generic type has zero arity.

  syntax:
    content:
      CSharp: int Arity
    parameters:
    - id: Arity
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_Arity
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_Arity
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_Arity
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 16
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: IsGenericType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 21
  summary: >+
    True if this type or some containing type has type parameters.

  syntax:
    content:
      CSharp: bool IsGenericType
    parameters:
    - id: IsGenericType
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsGenericType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_IsGenericType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsGenericType
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 21
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: IsUnboundGenericType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 30
  summary: >+
    True if this is a reference to an unbound generic type. A generic type is

    considered unbound if all of the type argument lists in its fully qualified

    name are empty. Note that the type arguments of an unbound generic type will be

    returned as error types because they do not really have type arguments.  An unbound

    generic type yields null for its BaseType and an empty result for its Interfaces.

  syntax:
    content:
      CSharp: bool IsUnboundGenericType
    parameters:
    - id: IsUnboundGenericType
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsUnboundGenericType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_IsUnboundGenericType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsUnboundGenericType
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 30
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: IsScriptClass
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 36
  summary: >+
    Returns true if the type is a Script class.

    It might be an interactive submission class or a Script class in a csx file.

  syntax:
    content:
      CSharp: bool IsScriptClass
    parameters:
    - id: IsScriptClass
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsScriptClass
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_IsScriptClass
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsScriptClass
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 36
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: IsImplicitClass
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 42
  summary: >+
    Returns true if the type is the implicit class that holds onto invalid global members (like methods or

    statements in a non script file).

  syntax:
    content:
      CSharp: bool IsImplicitClass
    parameters:
    - id: IsImplicitClass
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsImplicitClass
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_IsImplicitClass
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_IsImplicitClass
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 42
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: MemberNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 47
  summary: >+
    Returns collection of names of members declared within this type.

  syntax:
    content:
      CSharp: IEnumerable<string> MemberNames
    parameters:
    - id: MemberNames
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_MemberNames
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_MemberNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_MemberNames
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 47
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: TypeParameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 53
  summary: >+
    Returns the type parameters that this type has. If this is a non-generic type,

    returns an empty ImmutableArray.

  syntax:
    content:
      CSharp: ImmutableArray<ITypeParameterSymbol> TypeParameters
    parameters:
    - id: TypeParameters
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_TypeParameters
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_TypeParameters
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_TypeParameters
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 53
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: TypeArguments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 60
  summary: >+
    Returns the type arguments that have been substituted for the type parameters.

    If nothing has been substituted for a give type parameters,

    then the type parameter itself is consider the type argument.

  syntax:
    content:
      CSharp: ImmutableArray<ITypeSymbol> TypeArguments
    parameters:
    - id: TypeArguments
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_TypeArguments
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_TypeArguments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_TypeArguments
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 60
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 67
  summary: >+
    Get the original definition of this type symbol. If this symbol is derived from another

    symbol by (say) type substitution, this gets the original symbol, as it was defined in

    source or metadata.

  syntax:
    content:
      CSharp: new INamedTypeSymbol OriginalDefinition
    parameters:
    - id: OriginalDefinition
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_OriginalDefinition
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 67
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: DelegateInvokeMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 76
  summary: >+
    For delegate types, gets the delegate's invoke method.  Returns null on

    all other kinds of types.  Note that is is possible to have an ill-formed

    delegate type imported from metadata which does not have an Invoke method.

    Such a type will be classified as a delegate but its DelegateInvokeMethod

    would be null.

  syntax:
    content:
      CSharp: IMethodSymbol DelegateInvokeMethod
    parameters:
    - id: DelegateInvokeMethod
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: api/Microsoft.CodeAnalysis.IMethodSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_DelegateInvokeMethod
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_DelegateInvokeMethod
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_DelegateInvokeMethod
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 76
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: EnumUnderlyingType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 82
  summary: >+
    For enum types, gets the underlying type. Returns null on all other

    kinds of types.

  syntax:
    content:
      CSharp: INamedTypeSymbol EnumUnderlyingType
    parameters:
    - id: EnumUnderlyingType
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_EnumUnderlyingType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_EnumUnderlyingType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_EnumUnderlyingType
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 82
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: ConstructedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 89
  summary: >+
    Returns the type symbol that this type was constructed from. This type symbol

    has the same containing type (if any), but has type arguments that are the same

    as the type parameters (although its containing type might not).

  syntax:
    content:
      CSharp: INamedTypeSymbol ConstructedFrom
    parameters:
    - id: ConstructedFrom
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_ConstructedFrom
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_ConstructedFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_ConstructedFrom
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 89
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: Construct
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 96
  summary: >+
    Returns a constructed type given its type arguments.

  syntax:
    content:
      CSharp: INamedTypeSymbol Construct(params ITypeSymbol[] typeArguments);
    parameters:
    - id: typeArguments
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The immediate type arguments to be replaced for type

            parameters in the type.
    return:
      id: INamedTypeSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: ConstructUnboundGenericType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 101
  summary: >+
    Returns an unbound generic type of this named type.

  syntax:
    content:
      CSharp: INamedTypeSymbol ConstructUnboundGenericType();
    parameters: []
    return:
      id: INamedTypeSymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: InstanceConstructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 106
  summary: >+
    Get the instance constructors for this type.

  syntax:
    content:
      CSharp: ImmutableArray<IMethodSymbol> InstanceConstructors
    parameters:
    - id: InstanceConstructors
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_InstanceConstructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_InstanceConstructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_InstanceConstructors
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 106
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: StaticConstructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 111
  summary: >+
    Get the static constructors for this type.

  syntax:
    content:
      CSharp: ImmutableArray<IMethodSymbol> StaticConstructors
    parameters:
    - id: StaticConstructors
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_StaticConstructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_StaticConstructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_StaticConstructors
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 111
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: Constructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 116
  summary: >+
    Get the both instance and static constructors for this type.

  syntax:
    content:
      CSharp: ImmutableArray<IMethodSymbol> Constructors
    parameters:
    - id: Constructors
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_Constructors
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_Constructors
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_Constructors
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 116
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: AssociatedSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 125
  summary: >+
    For implicitly declared delegate types returns the EventSymbol that caused this

    delegate type to be generated.

    For all other types returns null.

    Note, the set of possible associated symbols might be expanded in the future to

    reflect changes in the languages.

  syntax:
    content:
      CSharp: ISymbol AssociatedSymbol
    parameters:
    - id: AssociatedSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_AssociatedSymbol
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_AssociatedSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_AssociatedSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 125
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: MightContainExtensionMethods
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 131
  summary: >+
    Determines if the symbol might contain extension methods.

    If false, the symbol does not contain extension methods.

  syntax:
    content:
      CSharp: bool MightContainExtensionMethods
    parameters:
    - id: MightContainExtensionMethods
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.INamedTypeSymbol.get_MightContainExtensionMethods
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  name:
    CSharp: get_MightContainExtensionMethods
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.INamedTypeSymbol.get_MightContainExtensionMethods
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/INamedTypeSymbol.cs
    startLine: 131
