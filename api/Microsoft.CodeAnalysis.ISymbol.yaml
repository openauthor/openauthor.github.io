id: Microsoft.CodeAnalysis.ISymbol
yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
href: api/Microsoft.CodeAnalysis.ISymbol
name:
  CSharp: ISymbol
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.ISymbol
type: Interface
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
  startLine: 15
summary: >+
  Represents a symbol (namespace, class, method, parameter, etc.)

  exposed by the compiler.

syntax:
  content:
    CSharp: public interface ISymbol
items:
- id: Microsoft.CodeAnalysis.ISymbol.Kind
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Kind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Kind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 21
  summary: >+
    Gets the [Microsoft.CodeAnalysis.SymbolKind](#/api/Microsoft.CodeAnalysis.SymbolKind) indicating what kind of symbol it is.

  syntax:
    content:
      CSharp: SymbolKind Kind
    parameters:
    - id: Kind
      type:
        id: Microsoft.CodeAnalysis.SymbolKind
        name: SymbolKind
        href: api/Microsoft.CodeAnalysis.SymbolKind
- id: Microsoft.CodeAnalysis.ISymbol.get_Kind
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_Kind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_Kind
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 21
- id: Microsoft.CodeAnalysis.ISymbol.Language
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Language
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 26
  summary: >+
    Gets the source language ("C#" or "Visual Basic").

  syntax:
    content:
      CSharp: string Language
    parameters:
    - id: Language
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_Language
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_Language
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 26
- id: Microsoft.CodeAnalysis.ISymbol.Name
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Name
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Name
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 31
  summary: >+
    Gets the symbol name. Returns the empty string if unnamed.

  syntax:
    content:
      CSharp: string Name
    parameters:
    - id: Name
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_Name
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_Name
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_Name
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 31
- id: Microsoft.CodeAnalysis.ISymbol.MetadataName
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: MetadataName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.MetadataName
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 43
  summary: >+
    Gets the name of a symbol as it appears in metadata. Most of the time, this

    is the same as the Name property, with the following exceptions:

    1) The metadata name of generic types includes the "`1", "`2" etc. suffix that

    indicates the number of type parameters (it does not include, however, names of

    containing types or namespaces).

    2) The metadata name of explicit interface names have spaces removed, compared to

    the name property.

    3) The length of names is limited to not exceed metadata restrictions.

  syntax:
    content:
      CSharp: string MetadataName
    parameters:
    - id: MetadataName
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_MetadataName
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_MetadataName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_MetadataName
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 43
- id: Microsoft.CodeAnalysis.ISymbol.ContainingSymbol
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ContainingSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ContainingSymbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 48
  summary: >+
    Gets the [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol) for the immediately containing symbol.

  syntax:
    content:
      CSharp: ISymbol ContainingSymbol
    parameters:
    - id: ContainingSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_ContainingSymbol
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_ContainingSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_ContainingSymbol
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 48
- id: Microsoft.CodeAnalysis.ISymbol.ContainingAssembly
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ContainingAssembly
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ContainingAssembly
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 54
  summary: >+
    Gets the [Microsoft.CodeAnalysis.IAssemblySymbol](#/api/Microsoft.CodeAnalysis.IAssemblySymbol) for the containing assembly. Returns null if the

    symbol is shared across multiple assemblies.

  syntax:
    content:
      CSharp: IAssemblySymbol ContainingAssembly
    parameters:
    - id: ContainingAssembly
      type:
        id: Microsoft.CodeAnalysis.IAssemblySymbol
        name: IAssemblySymbol
        href: api/Microsoft.CodeAnalysis.IAssemblySymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_ContainingAssembly
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_ContainingAssembly
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_ContainingAssembly
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 54
- id: Microsoft.CodeAnalysis.ISymbol.ContainingModule
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ContainingModule
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ContainingModule
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 60
  summary: >+
    Gets the [Microsoft.CodeAnalysis.IModuleSymbol](#/api/Microsoft.CodeAnalysis.IModuleSymbol) for the containing module. Returns null if the

    symbol is shared across multiple modules.

  syntax:
    content:
      CSharp: IModuleSymbol ContainingModule
    parameters:
    - id: ContainingModule
      type:
        id: Microsoft.CodeAnalysis.IModuleSymbol
        name: IModuleSymbol
        href: api/Microsoft.CodeAnalysis.IModuleSymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_ContainingModule
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_ContainingModule
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_ContainingModule
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 60
- id: Microsoft.CodeAnalysis.ISymbol.ContainingType
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ContainingType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ContainingType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 66
  summary: >+
    Gets the [Microsoft.CodeAnalysis.INamedTypeSymbol](#/api/Microsoft.CodeAnalysis.INamedTypeSymbol) for the containing type. Returns null if the

    symbol is not contained within a type.

  syntax:
    content:
      CSharp: INamedTypeSymbol ContainingType
    parameters:
    - id: ContainingType
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_ContainingType
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_ContainingType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_ContainingType
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 66
- id: Microsoft.CodeAnalysis.ISymbol.ContainingNamespace
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ContainingNamespace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ContainingNamespace
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 72
  summary: >+
    Gets the [Microsoft.CodeAnalysis.INamespaceSymbol](#/api/Microsoft.CodeAnalysis.INamespaceSymbol) for the nearest enclosing namespace. Returns null if the

    symbol isn't contained in a namespace.

  syntax:
    content:
      CSharp: INamespaceSymbol ContainingNamespace
    parameters:
    - id: ContainingNamespace
      type:
        id: Microsoft.CodeAnalysis.INamespaceSymbol
        name: INamespaceSymbol
        href: api/Microsoft.CodeAnalysis.INamespaceSymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_ContainingNamespace
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_ContainingNamespace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_ContainingNamespace
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 72
- id: Microsoft.CodeAnalysis.ISymbol.IsDefinition
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsDefinition
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 78
  summary: >+
    Gets a value indicating whether the symbol is the original definition. Returns false

    if the symbol is derived from another symbol, by type substitution for instance.

  syntax:
    content:
      CSharp: bool IsDefinition
    parameters:
    - id: IsDefinition
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsDefinition
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsDefinition
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 78
- id: Microsoft.CodeAnalysis.ISymbol.IsStatic
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsStatic
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsStatic
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 83
  summary: >+
    Gets a value indicating whether the symbol is static.

  syntax:
    content:
      CSharp: bool IsStatic
    parameters:
    - id: IsStatic
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsStatic
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsStatic
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsStatic
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 83
- id: Microsoft.CodeAnalysis.ISymbol.IsVirtual
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsVirtual
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsVirtual
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 88
  summary: >+
    Gets a value indicating whether the symbol is virtual.

  syntax:
    content:
      CSharp: bool IsVirtual
    parameters:
    - id: IsVirtual
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsVirtual
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsVirtual
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsVirtual
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 88
- id: Microsoft.CodeAnalysis.ISymbol.IsOverride
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsOverride
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsOverride
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 93
  summary: >+
    Gets a value indicating whether the symbol is an override of a base class symbol.

  syntax:
    content:
      CSharp: bool IsOverride
    parameters:
    - id: IsOverride
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsOverride
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsOverride
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsOverride
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 93
- id: Microsoft.CodeAnalysis.ISymbol.IsAbstract
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsAbstract
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsAbstract
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 98
  summary: >+
    Gets a value indicating whether the symbol is abstract.

  syntax:
    content:
      CSharp: bool IsAbstract
    parameters:
    - id: IsAbstract
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsAbstract
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsAbstract
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsAbstract
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 98
- id: Microsoft.CodeAnalysis.ISymbol.IsSealed
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsSealed
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsSealed
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 103
  summary: >+
    Gets a value indicating whether the symbol is sealed.

  syntax:
    content:
      CSharp: bool IsSealed
    parameters:
    - id: IsSealed
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsSealed
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsSealed
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsSealed
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 103
- id: Microsoft.CodeAnalysis.ISymbol.IsExtern
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsExtern
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsExtern
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 108
  summary: >+
    Gets a value indicating whether the symbol is defined externally.

  syntax:
    content:
      CSharp: bool IsExtern
    parameters:
    - id: IsExtern
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsExtern
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsExtern
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsExtern
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 108
- id: Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: IsImplicitlyDeclared
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 128
  summary: >+
    Returns true if this symbol was automatically created by the compiler, and does not have

    an explicit corresponding source code declaration.

  syntax:
    content:
      CSharp: bool IsImplicitlyDeclared
    parameters:
    - id: IsImplicitlyDeclared
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_IsImplicitlyDeclared
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_IsImplicitlyDeclared
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_IsImplicitlyDeclared
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 128
- id: Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: CanBeReferencedByName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 133
  summary: >+
    Returns true if this symbol can be referenced by its name in code.

  syntax:
    content:
      CSharp: bool CanBeReferencedByName
    parameters:
    - id: CanBeReferencedByName
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_CanBeReferencedByName
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_CanBeReferencedByName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_CanBeReferencedByName
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 133
- id: Microsoft.CodeAnalysis.ISymbol.Locations
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Locations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Locations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 140
  summary: >+
    Gets the locations where the symbol was originally defined, either in source or

    metadata. Some symbols (for example, partial classes) may be defined in more than one

    location.

  syntax:
    content:
      CSharp: ImmutableArray<Location> Locations
    parameters:
    - id: Locations
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location}
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_Locations
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_Locations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_Locations
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 140
- id: Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: DeclaringSyntaxReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 157
  summary: >+
    Get the syntax node(s) where this symbol was declared in source. Some symbols (for example,

    partial classes) may be defined in more than one location. This property should return

    one or more syntax nodes only if the symbol was declared in source code and also was

    not implicitly declared (see the IsImplicitlyDeclared property).



    Note that for namespace symbol, the declaring syntax might be declaring a nested namespace.

    For example, the declaring syntax node for N1 in "namespace N1.N2 {...}" is the entire

    NamespaceDeclarationSyntax for N1.N2. For the global namespace, the declaring syntax will

    be the CompilationUnitSyntax.

  syntax:
    content:
      CSharp: ImmutableArray<SyntaxReference> DeclaringSyntaxReferences
    parameters:
    - id: DeclaringSyntaxReferences
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxReference}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxReference}
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_DeclaringSyntaxReferences
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_DeclaringSyntaxReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_DeclaringSyntaxReferences
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 157
- id: Microsoft.CodeAnalysis.ISymbol.GetAttributes
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: GetAttributes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.GetAttributes
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 163
  summary: >+
    Gets the attributes for the symbol. Returns an empty [System.Collections.Generic.IEnumerable`1](#)

    if there are no attributes.

  syntax:
    content:
      CSharp: ImmutableArray<AttributeData> GetAttributes();
    parameters: []
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: DeclaredAccessibility
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 169
  summary: >+
    Gets a [Microsoft.CodeAnalysis.Accessibility](#/api/Microsoft.CodeAnalysis.Accessibility) indicating the declared accessibility for the symbol.

    Returns NotApplicable if no accessibility is declared.

  syntax:
    content:
      CSharp: Accessibility DeclaredAccessibility
    parameters:
    - id: DeclaredAccessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: api/Microsoft.CodeAnalysis.Accessibility
- id: Microsoft.CodeAnalysis.ISymbol.get_DeclaredAccessibility
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_DeclaredAccessibility
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_DeclaredAccessibility
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 169
- id: Microsoft.CodeAnalysis.ISymbol.OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.OriginalDefinition
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 176
  summary: >+
    Gets the [Microsoft.CodeAnalysis.ISymbol](#/api/Microsoft.CodeAnalysis.ISymbol) for the original definition of the symbol.

    If this symbol is derived from another symbol, by type substitution for instance,

    this gets the original symbol, as it was defined in source or metadata.

  syntax:
    content:
      CSharp: ISymbol OriginalDefinition
    parameters:
    - id: OriginalDefinition
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.ISymbol.get_OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_OriginalDefinition
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 176
- id: Microsoft.CodeAnalysis.ISymbol.Accept(Microsoft.CodeAnalysis.SymbolVisitor)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Accept
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Accept(Microsoft.CodeAnalysis.SymbolVisitor)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 178
  syntax:
    content:
      CSharp: void Accept(SymbolVisitor visitor);
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.SymbolVisitor
        name: SymbolVisitor
        href: api/Microsoft.CodeAnalysis.SymbolVisitor
    return:
      id: Void
- id: Microsoft.CodeAnalysis.ISymbol.Accept``1(Microsoft.CodeAnalysis.SymbolVisitor{``0})
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: Accept
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.Accept``1(Microsoft.CodeAnalysis.SymbolVisitor{``0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 179
  syntax:
    content:
      CSharp: TResult Accept<TResult>(SymbolVisitor<TResult> visitor);
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.SymbolVisitor{``0}
        name: SymbolVisitor
        href: Microsoft.CodeAnalysis.SymbolVisitor{``0}
    return:
      id: TResult
- id: Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: GetDocumentationCommentId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 185
  summary: >+
    Returns the Documentation Comment ID for the symbol, or null if the symbol doesn't

    support documentation comments.

  syntax:
    content:
      CSharp: string GetDocumentationCommentId();
    parameters: []
    return:
      id: String
- id: Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: GetDocumentationCommentXml
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 194
  summary: >+
    Gets the XML (as text) for the comment associated with the symbol.

  syntax:
    content:
      CSharp: string GetDocumentationCommentXml(CultureInfo preferredCulture = null, bool expandIncludes = false, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: preferredCulture
      type:
        id: System.Globalization.CultureInfo
        name: System.Globalization.CultureInfo
        isExternal: true
      description: Preferred culture or null for the default.
    - id: expandIncludes
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: Optionally, expand <include> elements.  No impact on non-source documentation comments.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: Token allowing cancellation of request.
    return:
      id: String
      description: The XML that would be written to the documentation file for the symbol.
- id: Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ToDisplayString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 201
  summary: >+
    Converts the symbol to a string representation.

  syntax:
    content:
      CSharp: string ToDisplayString(SymbolDisplayFormat format = null);
    parameters:
    - id: format
      type:
        id: Microsoft.CodeAnalysis.SymbolDisplayFormat
        name: SymbolDisplayFormat
        href: api/Microsoft.CodeAnalysis.SymbolDisplayFormat
      description: Format or null for the default.
    return:
      id: String
      description: A formatted string representation of the symbol.
- id: Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ToDisplayParts
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 210
  summary: >+
    Convert a symbol to an array of string parts, each of which has a kind. Useful for

    colorizing the display string.

  syntax:
    content:
      CSharp: ImmutableArray<SymbolDisplayPart> ToDisplayParts(SymbolDisplayFormat format = null);
    parameters:
    - id: format
      type:
        id: Microsoft.CodeAnalysis.SymbolDisplayFormat
        name: SymbolDisplayFormat
        href: api/Microsoft.CodeAnalysis.SymbolDisplayFormat
      description: >-
        Formatting rules - null implies

            SymbolDisplayFormat.ErrorMessageFormat.
    return:
      id: ImmutableArray
      description: A read-only array of string parts.
- id: Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ToMinimalDisplayString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 222
  summary: >+
    Convert a symbol to a string that can be displayed to the user. May be tailored to a

    specific location in the source code.

  syntax:
    content:
      CSharp: string ToMinimalDisplayString(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);
    parameters:
    - id: semanticModel
      type:
        id: Microsoft.CodeAnalysis.SemanticModel
        name: SemanticModel
        href: api/Microsoft.CodeAnalysis.SemanticModel
      description: >-
        Binding information (for determining names appropriate to

            the context).
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: A position in the source code (context).
    - id: format
      type:
        id: Microsoft.CodeAnalysis.SymbolDisplayFormat
        name: SymbolDisplayFormat
        href: api/Microsoft.CodeAnalysis.SymbolDisplayFormat
      description: >-
        Formatting rules - null implies

            SymbolDisplayFormat.MinimallyQualifiedFormat.
    return:
      id: String
      description: A formatted string that can be displayed to the user.
- id: Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: ToMinimalDisplayParts
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 237
  summary: >+
    Convert a symbol to an array of string parts, each of which has a kind. May be tailored

    to a specific location in the source code. Useful for colorizing the display string.

  syntax:
    content:
      CSharp: ImmutableArray<SymbolDisplayPart> ToMinimalDisplayParts(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);
    parameters:
    - id: semanticModel
      type:
        id: Microsoft.CodeAnalysis.SemanticModel
        name: SemanticModel
        href: api/Microsoft.CodeAnalysis.SemanticModel
      description: >-
        Binding information (for determining names appropriate to

            the context).
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: A position in the source code (context).
    - id: format
      type:
        id: Microsoft.CodeAnalysis.SymbolDisplayFormat
        name: SymbolDisplayFormat
        href: api/Microsoft.CodeAnalysis.SymbolDisplayFormat
      description: >-
        Formatting rules - null implies

            SymbolDisplayFormat.MinimallyQualifiedFormat.
    return:
      id: ImmutableArray
      description: A read-only array of string parts.
- id: Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: HasUnsupportedMetadata
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 261
  summary: >+
    Indicates that this symbol uses metadata that cannot be supported by the language.



    Examples include:

    - Pointer types in VB

    - ByRef return type

    - Required custom modifiers



    This is distinguished from, for example, references to metadata symbols defined in assemblies that weren't referenced.

    Symbols where this returns true can never be used successfully, and thus should never appear in any IDE feature.



    This is set for metadata symbols, as follows:

    Type - if a type is unsupported (e.g., a pointer type, etc.)

    Method - parameter or return type is unsupported

    Field - type is unsupported

    Event - type is unsupported

    Property - type is unsupported

    Parameter - type is unsupported

  syntax:
    content:
      CSharp: bool HasUnsupportedMetadata
    parameters:
    - id: HasUnsupportedMetadata
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ISymbol.get_HasUnsupportedMetadata
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  name:
    CSharp: get_HasUnsupportedMetadata
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ISymbol.get_HasUnsupportedMetadata
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Symbols/ISymbol.cs
    startLine: 261
