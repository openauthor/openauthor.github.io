id: Microsoft.CodeAnalysis.ITypeSymbol
yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
href: api/Microsoft.CodeAnalysis.ITypeSymbol
name:
  CSharp: ITypeSymbol
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.ITypeSymbol
type: Interface
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
  startLine: 6
syntax:
  content:
    CSharp: public interface ITypeSymbol
items:
- id: Microsoft.CodeAnalysis.ITypeSymbol.TypeKind
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: TypeKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.TypeKind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 11
  summary: >+
    An enumerated value that identifies whether this type is an array, pointer, enum, and so on.

  syntax:
    content:
      CSharp: TypeKind TypeKind
    parameters:
    - id: TypeKind
      type:
        id: Microsoft.CodeAnalysis.TypeKind
        name: TypeKind
        href: api/Microsoft.CodeAnalysis.TypeKind
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_TypeKind
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_TypeKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_TypeKind
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 11
- id: Microsoft.CodeAnalysis.ITypeSymbol.BaseType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: BaseType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.BaseType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 18
  summary: >+
    The declared base type of this type, or null. The object type, interface types,

    and pointer types do not have a base type. The base type of a type parameter

    is its effective base class.

  syntax:
    content:
      CSharp: INamedTypeSymbol BaseType
    parameters:
    - id: BaseType
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_BaseType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_BaseType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_BaseType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 18
- id: Microsoft.CodeAnalysis.ITypeSymbol.Interfaces
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: Interfaces
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.Interfaces
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 25
  summary: >+
    Gets the set of interfaces that this type directly implements. This set does not include

    interfaces that are base interfaces of directly implemented interfaces. This does

    include the interfaces declared as constraints on type parameters.

  syntax:
    content:
      CSharp: ImmutableArray<INamedTypeSymbol> Interfaces
    parameters:
    - id: Interfaces
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_Interfaces
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_Interfaces
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_Interfaces
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 25
- id: Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: AllInterfaces
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 38
  summary: >+
    The list of all interfaces of which this type is a declared subtype, excluding this type

    itself. This includes all declared base interfaces, all declared base interfaces of base

    types, and all declared base interfaces of those results (recursively). This also is the effective

    interface set of a type parameter. Each result

    appears exactly once in the list. This list is topologically sorted by the inheritance

    relationship: if interface type A extends interface type B, then A precedes B in the

    list. This is not quite the same as "all interfaces of which this type is a proper

    subtype" because it does not take into account variance: AllInterfaces for

    IEnumerable<string> will not include IEnumerable<object>;

  syntax:
    content:
      CSharp: ImmutableArray<INamedTypeSymbol> AllInterfaces
    parameters:
    - id: AllInterfaces
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_AllInterfaces
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_AllInterfaces
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_AllInterfaces
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 38
- id: Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: IsReferenceType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 45
  summary: >+
    True if this type is known to be a reference type. It is never the case that

    [Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) and [Microsoft.CodeAnalysis.ITypeSymbol.IsValueType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) both return true. However, for an unconstrained type

    parameter, [Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) and [Microsoft.CodeAnalysis.ITypeSymbol.IsValueType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) will both return false.

  syntax:
    content:
      CSharp: bool IsReferenceType
    parameters:
    - id: IsReferenceType
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_IsReferenceType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_IsReferenceType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_IsReferenceType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 45
- id: Microsoft.CodeAnalysis.ITypeSymbol.IsValueType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: IsValueType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.IsValueType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 52
  summary: >+
    True if this type is known to be a value type. It is never the case that

    [Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) and [Microsoft.CodeAnalysis.ITypeSymbol.IsValueType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) both return true. However, for an unconstrained type

    parameter, [Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) and [Microsoft.CodeAnalysis.ITypeSymbol.IsValueType](#/api/Microsoft.CodeAnalysis.ITypeSymbol) will both return false.

  syntax:
    content:
      CSharp: bool IsValueType
    parameters:
    - id: IsValueType
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_IsValueType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_IsValueType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_IsValueType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 52
- id: Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: IsAnonymousType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 57
  summary: >+
    Is this a symbol for an anonymous type (including anonymous VB delegate).

  syntax:
    content:
      CSharp: bool IsAnonymousType
    parameters:
    - id: IsAnonymousType
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_IsAnonymousType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_IsAnonymousType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_IsAnonymousType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 57
- id: Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 64
  summary: >+
    The original definition of this symbol. If this symbol is constructed from another

    symbol by type substitution then [Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition](#/api/Microsoft.CodeAnalysis.ITypeSymbol) gets the original symbol as it was defined in

    source or metadata.

  syntax:
    content:
      CSharp: new ITypeSymbol OriginalDefinition
    parameters:
    - id: OriginalDefinition
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_OriginalDefinition
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_OriginalDefinition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_OriginalDefinition
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 64
- id: Microsoft.CodeAnalysis.ITypeSymbol.SpecialType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: SpecialType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.SpecialType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 70
  summary: >+
    An enumerated value that identifies certain 'special' types such as [System.Object](#).

    Returns [Microsoft.CodeAnalysis.SpecialType.None](#/api/Microsoft.CodeAnalysis.SpecialType) if the type is not special.

  syntax:
    content:
      CSharp: SpecialType SpecialType
    parameters:
    - id: SpecialType
      type:
        id: Microsoft.CodeAnalysis.SpecialType
        name: SpecialType
        href: api/Microsoft.CodeAnalysis.SpecialType
- id: Microsoft.CodeAnalysis.ITypeSymbol.get_SpecialType
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: get_SpecialType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.get_SpecialType
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 70
- id: Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  name:
    CSharp: FindImplementationForInterfaceMember
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Symbols/ITypeSymbol.cs
    startLine: 82
  summary: >+
    Returns the corresponding symbol in this type or a base type that implements

    interfaceMember (either implicitly or explicitly), or null if no such symbol exists

    (which might be either because this type doesn't implement the container of

    interfaceMember, or this type doesn't supply a member that successfully implements

    interfaceMember).

  syntax:
    content:
      CSharp: ISymbol FindImplementationForInterfaceMember(ISymbol interfaceMember);
    parameters:
    - id: interfaceMember
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
      description: Must be a non-null interface property, method, or event.
    return:
      id: ISymbol
