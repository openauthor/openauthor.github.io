id: Microsoft.CodeAnalysis.ParseOptions
yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
href: api/Microsoft.CodeAnalysis.ParseOptions
name:
  CSharp: ParseOptions
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.ParseOptions
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
  startLine: 14
summary: >+
  Represents parse options common to C# and VB.

syntax:
  content:
    CSharp: public abstract class ParseOptions
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.ParseOptions.Kind
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: Kind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.Kind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 19
  summary: >+
    Specifies whether to parse as regular code files, script files or interactive code.

  syntax:
    content:
      CSharp: public SourceCodeKind Kind
    parameters:
    - id: Kind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: api/Microsoft.CodeAnalysis.SourceCodeKind
- id: Microsoft.CodeAnalysis.ParseOptions.get_Kind
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: get_Kind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.get_Kind
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 19
- id: Microsoft.CodeAnalysis.ParseOptions.DocumentationMode
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: DocumentationMode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.DocumentationMode
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 25
  summary: >+
    Gets a value indicating whether the documentation comments are parsed.

  syntax:
    content:
      CSharp: public DocumentationMode DocumentationMode
    parameters:
    - id: DocumentationMode
      type:
        id: Microsoft.CodeAnalysis.DocumentationMode
        name: DocumentationMode
        href: api/Microsoft.CodeAnalysis.DocumentationMode
- id: Microsoft.CodeAnalysis.ParseOptions.get_DocumentationMode
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: get_DocumentationMode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.get_DocumentationMode
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 25
- id: Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: WithKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 36
  summary: >+
    Creates a new options instance with the specified source code kind.

  syntax:
    content:
      CSharp: public ParseOptions WithKind(SourceCodeKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: api/Microsoft.CodeAnalysis.SourceCodeKind
    return:
      id: ParseOptions
- id: Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: WithDocumentationMode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 46
  summary: >+
    Creates a new options instance with the specified documentation mode.

  syntax:
    content:
      CSharp: public ParseOptions WithDocumentationMode(DocumentationMode documentationMode)
    parameters:
    - id: documentationMode
      type:
        id: Microsoft.CodeAnalysis.DocumentationMode
        name: DocumentationMode
        href: api/Microsoft.CodeAnalysis.DocumentationMode
    return:
      id: ParseOptions
- id: Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: WithFeatures
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 56
  summary: >+
    Enable some experimental language features for testing.

  syntax:
    content:
      CSharp: public ParseOptions WithFeatures(IEnumerable<KeyValuePair<string, string>> features)
    parameters:
    - id: features
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
        isExternal: true
    return:
      id: ParseOptions
- id: Microsoft.CodeAnalysis.ParseOptions.Features
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: Features
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.Features
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 66
  summary: >+
    Returns the experimental features.

  syntax:
    content:
      CSharp: public abstract IReadOnlyDictionary<string, string> Features
    parameters:
    - id: Features
      type:
        id: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
        name: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.ParseOptions.get_Features
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: get_Features
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.get_Features
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 68
- id: Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: PreprocessorSymbolNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 74
  summary: >+
    Names of defined preprocessor symbols.

  syntax:
    content:
      CSharp: public abstract IEnumerable<string> PreprocessorSymbolNames
    parameters:
    - id: PreprocessorSymbolNames
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.ParseOptions.get_PreprocessorSymbolNames
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: get_PreprocessorSymbolNames
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.get_PreprocessorSymbolNames
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 74
- id: Microsoft.CodeAnalysis.ParseOptions.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 76
  syntax:
    content:
      CSharp: public abstract override bool Equals(object obj);
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.ParseOptions.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 92
  syntax:
    content:
      CSharp: public abstract override int GetHashCode();
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.ParseOptions.op_Equality(Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.ParseOptions)
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.op_Equality(Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.ParseOptions)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 115
- id: Microsoft.CodeAnalysis.ParseOptions.op_Inequality(Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.ParseOptions)
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ParseOptions.op_Inequality(Microsoft.CodeAnalysis.ParseOptions,Microsoft.CodeAnalysis.ParseOptions)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/ParseOptions.cs
    startLine: 120
