id: Microsoft.CodeAnalysis.SemanticModel
yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
href: api/Microsoft.CodeAnalysis.SemanticModel
name:
  CSharp: SemanticModel
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SemanticModel
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
  startLine: 31
summary: >+
  Allows asking semantic questions about a tree of syntax nodes in a Compilation. Typically,

  an instance is obtained by a call to GetBinding on a Compilation or Compilation.

syntax:
  content:
    CSharp: public abstract class SemanticModel
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SemanticModel.Language
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.Language
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 36
  summary: >+
    Gets the source language ("C#" or "Visual Basic").

  syntax:
    content:
      CSharp: public abstract string Language
    parameters:
    - id: Language
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SemanticModel.get_Language
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_Language
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 36
- id: Microsoft.CodeAnalysis.SemanticModel.Compilation
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.Compilation
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 41
  summary: >+
    The compilation this model was obtained from.

  syntax:
    content:
      CSharp: public Compilation Compilation
    parameters:
    - id: Compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: api/Microsoft.CodeAnalysis.Compilation
- id: Microsoft.CodeAnalysis.SemanticModel.get_Compilation
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_Compilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_Compilation
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 43
- id: Microsoft.CodeAnalysis.SemanticModel.SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.SyntaxTree
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 54
  summary: >+
    The syntax tree this model was obtained from.

  syntax:
    content:
      CSharp: public SyntaxTree SyntaxTree
    parameters:
    - id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
- id: Microsoft.CodeAnalysis.SemanticModel.get_SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_SyntaxTree
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 56
- id: Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: IsSpeculativeSemanticModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 212
  summary: >+
    Returns true if this is a speculative semantic model created with any of the TryGetSpeculativeSemanticModel methods.

  syntax:
    content:
      CSharp: public abstract bool IsSpeculativeSemanticModel
    parameters:
    - id: IsSpeculativeSemanticModel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SemanticModel.get_IsSpeculativeSemanticModel
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_IsSpeculativeSemanticModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_IsSpeculativeSemanticModel
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 214
- id: Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: OriginalPositionForSpeculation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 221
  summary: >+
    If this is a speculative semantic model, returns the original position at which the speculative model was created.

    Otherwise, returns 0.

  syntax:
    content:
      CSharp: public abstract int OriginalPositionForSpeculation
    parameters:
    - id: OriginalPositionForSpeculation
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SemanticModel.get_OriginalPositionForSpeculation
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_OriginalPositionForSpeculation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_OriginalPositionForSpeculation
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 223
- id: Microsoft.CodeAnalysis.SemanticModel.ParentModel
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: ParentModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.ParentModel
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 230
  summary: >+
    If this is a speculative semantic model, then returns its parent semantic model.

    Otherwise, returns null.

  syntax:
    content:
      CSharp: public SemanticModel ParentModel
    parameters:
    - id: ParentModel
      type:
        id: Microsoft.CodeAnalysis.SemanticModel
        name: SemanticModel
        href: api/Microsoft.CodeAnalysis.SemanticModel
- id: Microsoft.CodeAnalysis.SemanticModel.get_ParentModel
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: get_ParentModel
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.get_ParentModel
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 232
- id: Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetSyntaxDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 291
  summary: >+
    Get all of the syntax errors within the syntax tree associated with this

    object. Does not get errors involving declarations or compiling method bodies or initializers.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<Diagnostic> GetSyntaxDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        name: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        isExternal: true
      description: >-
        Optional span within the syntax tree for which to get diagnostics.

            If no argument is specified, then diagnostics for the entire tree are returned.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: >-
        A cancellation token that can be used to cancel the

            process of obtaining the diagnostics.
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetDeclarationDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 305
  summary: >+
    Get all of the declaration errors within the syntax tree associated with this

    object. Does not get errors involving incorrect syntax, compiling method bodies or initializers.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<Diagnostic> GetDeclarationDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        name: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        isExternal: true
      description: >-
        Optional span within the syntax tree for which to get diagnostics.

            If no argument is specified, then diagnostics for the entire tree are returned.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: >-
        A cancellation token that can be used to cancel the

            process of obtaining the diagnostics.
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetMethodBodyDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 319
  summary: >+
    Get all of the method body and initializer errors within the syntax tree associated with this

    object. Does not get errors involving incorrect syntax or declarations.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<Diagnostic> GetMethodBodyDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        name: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        isExternal: true
      description: >-
        Optional span within the syntax tree for which to get diagnostics.

            If no argument is specified, then diagnostics for the entire tree are returned.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: >-
        A cancellation token that can be used to cancel the

            process of obtaining the diagnostics.
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 336
  summary: >+
    Get all the errors within the syntax tree associated with this object. Includes errors

    involving compiling method bodies or initializers, in addition to the errors returned by

    GetDeclarationDiagnostics.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<Diagnostic> GetDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        name: System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}
        isExternal: true
      description: >-
        Optional span within the syntax tree for which to get diagnostics.

            If no argument is specified, then diagnostics for the entire tree are returned.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: >-
        A cancellation token that can be used to cancel the

            process of obtaining the diagnostics.
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: LookupSymbols
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 413
  summary: >+
    Gets the available named symbols in the context of the specified location and optional container. Only

    symbols that are accessible and visible from the given location are returned.

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> LookupSymbols(int position, INamespaceOrTypeSymbol container = null, string name = null, bool includeReducedExtensionMethods = false)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The character position for determining the enclosing declaration scope and

            accessibility.
    - id: container
      type:
        id: Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
        name: INamespaceOrTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
      description: >-
        The container to search for symbols within. If null then the enclosing declaration

            scope around position is used.
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The name of the symbol to find. If null is specified then symbols

            with any names are returned.
    - id: includeReducedExtensionMethods
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: Consider (reduced) extension methods.
    return:
      id: ImmutableArray
      description: A list of symbols that were found. If no symbols were found, an empty list is returned.
- id: Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: LookupBaseMembers
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 466
  summary: >+
    Gets the available base type members in the context of the specified location.  Akin to

    calling [Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)](#/api/Microsoft.CodeAnalysis.SemanticModel) with the container set to the immediate base type of

    the type in which  occurs.  However, the accessibility rules

    are different: protected members of the base type will be visible.



    Consider the following example:



    public class Base

    {

    protected void M() { }

    }



    public class Derived : Base

    {

    void Test(Base b)

    {

    b.M(); // Error - cannot access protected member.

    base.M();

    }

    }



    Protected members of an instance of another type are only accessible if the instance is known

    to be "this" instance (as indicated by the "base" keyword).

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> LookupBaseMembers(int position, string name = null)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The character position for determining the enclosing declaration scope and

            accessibility.
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The name of the symbol to find. If null is specified then symbols

            with any names are returned.
    return:
      id: ImmutableArray
      description: A list of symbols that were found. If no symbols were found, an empty list is returned.
- id: Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: LookupStaticMembers
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 500
  summary: >+
    Gets the available named static member symbols in the context of the specified location and optional container.

    Only members that are accessible and visible from the given location are returned.



    Non-reduced extension methods are considered, since they are static methods.

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> LookupStaticMembers(int position, INamespaceOrTypeSymbol container = null, string name = null)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The character position for determining the enclosing declaration scope and

            accessibility.
    - id: container
      type:
        id: Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
        name: INamespaceOrTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
      description: >-
        The container to search for symbols within. If null then the enclosing declaration

            scope around position is used.
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The name of the symbol to find. If null is specified then symbols

            with any names are returned.
    return:
      id: ImmutableArray
      description: A list of symbols that were found. If no symbols were found, an empty list is returned.
- id: Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: LookupNamespacesAndTypes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 534
  summary: >+
    Gets the available named namespace and type symbols in the context of the specified location and optional container.

    Only members that are accessible and visible from the given location are returned.

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> LookupNamespacesAndTypes(int position, INamespaceOrTypeSymbol container = null, string name = null)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The character position for determining the enclosing declaration scope and

            accessibility.
    - id: container
      type:
        id: Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
        name: INamespaceOrTypeSymbol
        href: api/Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
      description: >-
        The container to search for symbols within. If null then the enclosing declaration

            scope around position is used.
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The name of the symbol to find. If null is specified then symbols

            with any names are returned.
    return:
      id: ImmutableArray
      description: A list of symbols that were found. If no symbols were found, an empty list is returned.
- id: Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: LookupLabels
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 564
  summary: >+
    Gets the available named label symbols in the context of the specified location and optional container.

    Only members that are accessible and visible from the given location are returned.

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> LookupLabels(int position, string name = null)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The character position for determining the enclosing declaration scope and

            accessibility.
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The name of the symbol to find. If null is specified then symbols

            with any names are returned.
    return:
      id: ImmutableArray
      description: A list of symbols that were found. If no symbols were found, an empty list is returned.
- id: Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetConstantValue
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 695
  summary: >+
    If the node provided has a constant value an Optional value will be returned with

    HasValue set to true and with Value set to the constant.  If the node does not have an

    constant value, an Optional will be returned with HasValue set to false.

  syntax:
    content:
      CSharp: public Optional<object> GetConstantValue(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Optional
- id: Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetEnclosingSymbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 728
  summary: >+
    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol

    that the position is considered inside of.

  syntax:
    content:
      CSharp: public ISymbol GetEnclosingSymbol(int position, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: ISymbol
- id: Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: IsAccessible
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 754
  summary: >+
    Determines if the symbol is accessible from the specified location.

  syntax:
    content:
      CSharp: public bool IsAccessible(int position, ISymbol symbol)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        A character position used to identify a declaration scope and

            accessibility. This character position must be within the FullSpan of the Root syntax

            node in this SemanticModel.
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
      description: The symbol that we are checking to see if it accessible.
    return:
      id: Boolean
      description: True if "symbol is accessible, false otherwise.
- id: Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: IsEventUsableAsField
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 783
  summary: >+
    Field-like events can be used as fields in types that can access private

    members of the declaring type of the event.

  syntax:
    content:
      CSharp: public bool IsEventUsableAsField(int position, IEventSymbol eventSymbol)
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: eventSymbol
      type:
        id: Microsoft.CodeAnalysis.IEventSymbol
        name: IEventSymbol
        href: api/Microsoft.CodeAnalysis.IEventSymbol
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  name:
    CSharp: GetPreprocessingSymbolInfo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SemanticModel.cs
    startLine: 802
  summary: >+
    If  is an identifier name syntax node, return the [Microsoft.CodeAnalysis.PreprocessingSymbolInfo](#/api/Microsoft.CodeAnalysis.PreprocessingSymbolInfo) corresponding

    to it.

  syntax:
    content:
      CSharp: public PreprocessingSymbolInfo GetPreprocessingSymbolInfo(SyntaxNode nameSyntax)
    parameters:
    - id: nameSyntax
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The nameSyntax node to get semantic information for.
    return:
      id: PreprocessingSymbolInfo
