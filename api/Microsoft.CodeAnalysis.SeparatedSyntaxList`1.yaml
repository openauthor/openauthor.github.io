id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1
yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
name:
  CSharp: SeparatedSyntaxList`1
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
  startLine: 12
syntax:
  content:
    CSharp: >-
      public partial struct SeparatedSyntaxList<TNode>

          where TNode : SyntaxNode
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Count
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Count
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 63
  syntax:
    content:
      CSharp: public int Count
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Count
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: get_Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Count
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 65
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.SeparatorCount
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: SeparatorCount
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.SeparatorCount
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 71
  syntax:
    content:
      CSharp: public int SeparatorCount
    parameters:
    - id: SeparatorCount
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_SeparatorCount
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: get_SeparatorCount
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_SeparatorCount
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 73
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Item(System.Int32)
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 79
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: get_Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Item(System.Int32)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 81
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: GetSeparator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 111
  summary: >+
    Gets the separator at the given index in this list.

  syntax:
    content:
      CSharp: public SyntaxToken GetSeparator(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index.
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: GetSeparators
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 132
  summary: >+
    Returns the sequence of just the separator tokens.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxToken> GetSeparators()
    parameters: []
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 140
  summary: >+
    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 142
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 148
  summary: >+
    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Span
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 150
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 161
  summary: >+
    Returns the string representation of the nodes in this list including separators but not including

    the first node's leading trivia and the last node or token's trailing trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: "The string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia."
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 174
  summary: >+
    Returns the full string representation of the nodes in this list including separators,

    the first node's leading trivia, and the last node or token's trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: >-
        The full string representation of the nodes in this list including separators including separators,

            the first node's leading trivia, and the last node or token's trailing trivia.
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.First
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: First
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.First
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 179
  syntax:
    content:
      CSharp: public TNode First()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FirstOrDefault
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: FirstOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FirstOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 184
  syntax:
    content:
      CSharp: public TNode FirstOrDefault()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Last
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Last
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Last
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 196
  syntax:
    content:
      CSharp: public TNode Last()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastOrDefault
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: LastOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 201
  syntax:
    content:
      CSharp: public TNode LastOrDefault()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Contains(`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Contains(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 213
  syntax:
    content:
      CSharp: public bool Contains(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 218
  syntax:
    content:
      CSharp: public int IndexOf(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(System.Func{`0,System.Boolean})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(System.Func{`0,System.Boolean})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 231
  syntax:
    content:
      CSharp: public int IndexOf(Func<TNode, bool> predicate)
    parameters:
    - id: predicate
      type:
        id: System.Func{`0,System.Boolean}
        name: System.Func{`0,System.Boolean}
        isExternal: true
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 257
  syntax:
    content:
      CSharp: public int LastIndexOf(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 270
  syntax:
    content:
      CSharp: public int LastIndexOf(Func<TNode, bool> predicate)
    parameters:
    - id: predicate
      type:
        id: System.Func{`0,System.Boolean}
        name: System.Func{`0,System.Boolean}
        isExternal: true
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Any
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Any
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Any
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 283
  syntax:
    content:
      CSharp: public bool Any()
    parameters: []
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetWithSeparators
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: GetWithSeparators
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetWithSeparators
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 288
  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList GetWithSeparators()
    parameters: []
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 293
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 298
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 303
  syntax:
    content:
      CSharp: public bool Equals(SeparatedSyntaxList<TNode> other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1
        name: SeparatedSyntaxList
        href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 308
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 313
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Add
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 322
  summary: >+
    Creates a new list with the specified node added to the end.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> Add(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node to add.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 331
  summary: >+
    Creates a new list with the specified nodes added to the end.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)
    parameters:
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The nodes to add.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 341
  summary: >+
    Creates a new list with the specified node inserted at the index.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> Insert(int index, TNode node)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node to insert.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 356
  summary: >+
    Creates a new list with the specified nodes inserted at the index.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The nodes to insert.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 426
  summary: >+
    Creates a new list with the element at the specified index removed.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the element to remove.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 440
  summary: >+
    Creates a new list with specified element removed.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> Remove(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to remove.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 472
  summary: >+
    Creates a new list with the specified element replaced by the new node.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)
    parameters:
    - id: nodeInList
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to replace.
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The new node.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: ReplaceRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 495
  summary: >+
    Creates a new list with the specified element replaced by the new nodes.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)
    parameters:
    - id: nodeInList
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to replace.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The new nodes.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: ReplaceSeparator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 534
  summary: >+
    Creates a new list with the specified separator token replaced with the new separator.

  syntax:
    content:
      CSharp: public SeparatedSyntaxList<TNode> ReplaceSeparator(SyntaxToken separatorToken, SyntaxToken newSeparator)
    parameters:
    - id: separatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The separator token to be replaced.
    - id: newSeparator
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The new separator token.
    return:
      id: SeparatedSyntaxList
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetEnumerator
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetEnumerator
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SeparatedSyntaxList.cs
    startLine: 563
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
