id: Microsoft.CodeAnalysis.SymbolInfo
yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
href: api/Microsoft.CodeAnalysis.SymbolInfo
name:
  CSharp: SymbolInfo
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SymbolInfo
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
  startLine: 10
syntax:
  content:
    CSharp: public struct SymbolInfo
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SymbolInfo.Symbol
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: Symbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.Symbol
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 22
  summary: >+
    The symbol that was referred to by the syntax node, if any. Returns null if the given

    expression did not bind successfully to a single symbol. If null is returned, it may

    still be that case that we have one or more "best guesses" as to what symbol was

    intended. These best guesses are available via the CandidateSymbols property.

  syntax:
    content:
      CSharp: public ISymbol Symbol
    parameters:
    - id: Symbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: api/Microsoft.CodeAnalysis.ISymbol
- id: Microsoft.CodeAnalysis.SymbolInfo.get_Symbol
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: get_Symbol
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.get_Symbol
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 22
- id: Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: CandidateSymbols
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 31
  summary: >+
    If the expression did not successfully resolve to a symbol, but there were one or more

    symbols that may have been considered but discarded, this property returns those

    symbols. The reason that the symbols did not successfully resolve to a symbol are

    available in the CandidateReason property. For example, if the symbol was inaccessible,

    ambiguous, or used in the wrong context.

  syntax:
    content:
      CSharp: public ImmutableArray<ISymbol> CandidateSymbols
    parameters:
    - id: CandidateSymbols
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}
        isExternal: true
- id: Microsoft.CodeAnalysis.SymbolInfo.get_CandidateSymbols
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: get_CandidateSymbols
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.get_CandidateSymbols
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 33
- id: Microsoft.CodeAnalysis.SymbolInfo.CandidateReason
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: CandidateReason
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.CandidateReason
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 56
  summary: >+
    If the expression did not successfully resolve to a symbol, but there were one or more

    symbols that may have been considered but discarded, this property describes why those

    symbol or symbols were not considered suitable.

  syntax:
    content:
      CSharp: public CandidateReason CandidateReason
    parameters:
    - id: CandidateReason
      type:
        id: Microsoft.CodeAnalysis.CandidateReason
        name: CandidateReason
        href: api/Microsoft.CodeAnalysis.CandidateReason
- id: Microsoft.CodeAnalysis.SymbolInfo.get_CandidateReason
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: get_CandidateReason
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.get_CandidateReason
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 56
- id: Microsoft.CodeAnalysis.SymbolInfo.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 91
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SymbolInfo.Equals(Microsoft.CodeAnalysis.SymbolInfo)
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.Equals(Microsoft.CodeAnalysis.SymbolInfo)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 96
  syntax:
    content:
      CSharp: public bool Equals(SymbolInfo other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SymbolInfo
        name: SymbolInfo
        href: api/Microsoft.CodeAnalysis.SymbolInfo
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SymbolInfo.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SymbolInfo.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/SymbolInfo.cs
    startLine: 103
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
