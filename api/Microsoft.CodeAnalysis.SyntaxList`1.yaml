id: Microsoft.CodeAnalysis.SyntaxList`1
yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
href: api/Microsoft.CodeAnalysis.SyntaxList`1
name:
  CSharp: SyntaxList`1
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxList`1
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
  startLine: 15
summary: >+
  A list of [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).

syntax:
  content:
    CSharp: >-
      public partial struct SyntaxList<TNode>

          where TNode : SyntaxNode
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxList`1.Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Count
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 36
  summary: >+
    The number of nodes in the list.

  syntax:
    content:
      CSharp: public int Count
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxList`1.get_Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: get_Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.get_Count
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 38
- id: Microsoft.CodeAnalysis.SyntaxList`1.Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Item(System.Int32)
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 49
  summary: >+
    Gets the node at the specified index.

- id: Microsoft.CodeAnalysis.SyntaxList`1.get_Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: get_Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.get_Item(System.Int32)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 51
- id: Microsoft.CodeAnalysis.SyntaxList`1.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 85
  summary: >+
    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxList`1.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 87
- id: Microsoft.CodeAnalysis.SyntaxList`1.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 103
  summary: >+
    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxList`1.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 105
- id: Microsoft.CodeAnalysis.SyntaxList`1.ToString
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 126
  summary: >+
    Returns the string representation of the nodes in this list, not including

    the first node's leading trivia and the last node's trailing trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: "The string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxList`1.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 139
  summary: >+
    Returns the full string representation of the nodes in this list including

    the first node's leading trivia and the last node's trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: "The full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Add
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 148
  summary: >+
    Creates a new list with the specified node added at the end.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> Add(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node to add.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 157
  summary: >+
    Creates a new list with the specified nodes added at the end.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)
    parameters:
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The nodes to add.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 167
  summary: >+
    Creates a new list with the specified node inserted at the index.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> Insert(int index, TNode node)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node to insert.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 182
  summary: >+
    Creates a new list with the specified nodes inserted at the index.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The nodes to insert.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 211
  summary: >+
    Creates a new list with the element at specified index removed.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the element to remove.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 225
  summary: >+
    Creates a new list with the element removed.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> Remove(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to remove.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 235
  summary: >+
    Creates a new list with the specified element replaced with the new node.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)
    parameters:
    - id: nodeInList
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to replace.
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The new node.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: ReplaceRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 245
  summary: >+
    Creates a new list with the specified element replaced with new nodes.

  syntax:
    content:
      CSharp: public SyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)
    parameters:
    - id: nodeInList
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The element to replace.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The new nodes.
    return:
      id: SyntaxList
- id: Microsoft.CodeAnalysis.SyntaxList`1.First
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: First
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.First
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 297
  summary: >+
    The first node in the list.

  syntax:
    content:
      CSharp: public TNode First()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: FirstOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 305
  summary: >+
    The first node in the list or default if the list is empty.

  syntax:
    content:
      CSharp: public TNode FirstOrDefault()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxList`1.Last
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Last
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Last
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 320
  summary: >+
    The last node in the list.

  syntax:
    content:
      CSharp: public TNode Last()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: LastOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 328
  summary: >+
    The last node in the list or default if the list is empty.

  syntax:
    content:
      CSharp: public TNode LastOrDefault()
    parameters: []
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxList`1.Any
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Any
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Any
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 343
  summary: >+
    True if the list has at least one node.

  syntax:
    content:
      CSharp: public bool Any()
    parameters: []
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 358
  summary: >+
    Get's the enumerator for this list.

  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
- id: Microsoft.CodeAnalysis.SyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 383
- id: Microsoft.CodeAnalysis.SyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 388
- id: Microsoft.CodeAnalysis.SyntaxList`1.Equals(Microsoft.CodeAnalysis.SyntaxList{`0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Equals(Microsoft.CodeAnalysis.SyntaxList{`0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 393
  syntax:
    content:
      CSharp: public bool Equals(SyntaxList<TNode> other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxList`1
        name: SyntaxList
        href: api/Microsoft.CodeAnalysis.SyntaxList`1
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxList`1.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 398
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxList`1.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 403
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode})~Microsoft.CodeAnalysis.SyntaxList{`0}
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode})~Microsoft.CodeAnalysis.SyntaxList{`0}
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 408
- id: Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{`0})~Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode}
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{`0})~Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode}
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 413
- id: Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 421
  summary: >+
    The index of the node in this list, or -1 if the node is not in the list.

  syntax:
    content:
      CSharp: public int IndexOf(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(System.Func{`0,System.Boolean})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(System.Func{`0,System.Boolean})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 437
  syntax:
    content:
      CSharp: public int IndexOf(Func<TNode, bool> predicate)
    parameters:
    - id: predicate
      type:
        id: System.Func{`0,System.Boolean}
        name: System.Func{`0,System.Boolean}
        isExternal: true
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(`0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(`0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 469
  syntax:
    content:
      CSharp: public int LastIndexOf(TNode node)
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxList`1.cs
    startLine: 482
  syntax:
    content:
      CSharp: public int LastIndexOf(Func<TNode, bool> predicate)
    parameters:
    - id: predicate
      type:
        id: System.Func{`0,System.Boolean}
        name: System.Func{`0,System.Boolean}
        isExternal: true
    return:
      id: Int32
