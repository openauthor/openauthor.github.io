id: Microsoft.CodeAnalysis.SyntaxNodeExtensions
yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
name:
  CSharp: SyntaxNodeExtensions
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
  startLine: 8
syntax:
  content:
    CSharp: public static partial class SyntaxNodeExtensions
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceSyntax
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 27
  summary: >+
    Creates a new tree of nodes with the specified nodes, tokens and trivia replaced.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceSyntax<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, Func<SyntaxNode, SyntaxNode, SyntaxNode> computeReplacementNode, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: The nodes to be replaced.
    - id: computeReplacementNode
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: >-
        A function that computes a replacement node for the

            argument nodes. The first argument is the original node. The second argument is the same

            node potentially rewritten with replaced descendants.
    - id: tokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: The tokens to be replaced.
    - id: computeReplacementToken
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: >-
        A function that computes a replacement token for

            the argument tokens. The first argument is the original token. The second argument is

            the same token potentially rewritten with replaced trivia.
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: The trivia to be replaced.
    - id: computeReplacementTrivia
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: >-
        A function that computes replacement trivia for

            the specified arguments. The first argument is the original trivia. The second argument is

            the same trivia with potentially rewritten sub structure.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 53
  summary: >+
    Creates a new tree of nodes with the specified old node replaced with a new node.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceNodes<TRoot, TNode>(this TRoot root, IEnumerable<TNode> nodes, Func<TNode, TNode, SyntaxNode> computeReplacementNode)where TRoot : SyntaxNode where TNode : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: System.Collections.Generic.IEnumerable{``1}
        isExternal: true
      description: The nodes to be replaced; descendants of the root node.
    - id: computeReplacementNode
      type:
        id: System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: >-
        A function that computes a replacement node for the

            argument nodes. The first argument is the original node. The second argument is the same

            node potentially rewritten with replaced descendants.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 67
  summary: >+
    Creates a new tree of nodes with the specified old node replaced with a new node.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, SyntaxNode newNode)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The node to be replaced; a descendant of the root node.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The new node to use in the new tree in place of the old node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 80
  summary: >+
    Creates a new tree of nodes with specified old node replaced with a new nodes.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The node to be replaced; a descendant of the root node and an element of a list member.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: A sequence of nodes to use in the tree in place of the old node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertNodesBefore
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 93
  summary: >+
    Creates a new tree of nodes with new nodes inserted before the specified node.

  syntax:
    content:
      CSharp: 'public static TRoot InsertNodesBefore<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: nodeInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The node to insert before; a descendant of the root node an element of a list member.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: A sequence of nodes to insert into the tree immediately before the specified node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertNodesAfter
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 106
  summary: >+
    Creates a new tree of nodes with new nodes inserted after the specified node.

  syntax:
    content:
      CSharp: 'public static TRoot InsertNodesAfter<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: nodeInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The node to insert after; a descendant of the root node an element of a list member.
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: A sequence of nodes to insert into the tree immediately after the specified node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 119
  summary: >+
    Creates a new tree of nodes with the specified old token replaced with new tokens.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to be replaced; a descendant of the root node and an element of a list member.
    - id: newTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: A sequence of tokens to use in the tree in place of the specified token.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertTokensBefore
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 132
  summary: >+
    Creates a new tree of nodes with new tokens inserted before the specified token.

  syntax:
    content:
      CSharp: 'public static TRoot InsertTokensBefore<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to insert before; a descendant of the root node and an element of a list member.
    - id: newTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: A sequence of tokens to insert into the tree immediately before the specified token.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertTokensAfter
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 145
  summary: >+
    Creates a new tree of nodes with new tokens inserted after the specified token.

  syntax:
    content:
      CSharp: 'public static TRoot InsertTokensAfter<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to insert after; a descendant of the root node and an element of a list member.
    - id: newTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: A sequence of tokens to insert into the tree immediately after the specified token.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 158
  summary: >+
    Creates a new tree of nodes with the specified old trivia replaced with new trivia.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia oldTrivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: oldTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
      description: The trivia to be replaced; a descendant of the root node.
    - id: newTrivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: A sequence of trivia to use in the tree in place of the specified trivia.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertTriviaBefore
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 171
  summary: >+
    Creates a new tree of nodes with new trivia inserted before the specified trivia.

  syntax:
    content:
      CSharp: 'public static TRoot InsertTriviaBefore<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
      description: The trivia to insert before; a descendant of the root node.
    - id: newTrivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: A sequence of trivia to insert into the tree immediately before the specified trivia.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: InsertTriviaAfter
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 184
  summary: >+
    Creates a new tree of nodes with new trivia inserted after the specified trivia.

  syntax:
    content:
      CSharp: 'public static TRoot InsertTriviaAfter<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the tree of nodes.
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
      description: The trivia to insert after; a descendant of the root node.
    - id: newTrivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: A sequence of trivia to insert into the tree immediately after the specified trivia.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceTokens
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 199
  summary: >+
    Creates a new tree of nodes with the specified old node replaced with a new node.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceTokens<TRoot>(this TRoot root, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: tokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: The token to be replaced; descendants of the root node.
    - id: computeReplacementToken
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: >-
        A function that computes a replacement token for

            the argument tokens. The first argument is the original token. The second argument is

            the same token potentially rewritten with replaced trivia.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 213
  summary: >+
    Creates a new tree of nodes with the specified old token replaced with a new token.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken oldToken, SyntaxToken newToken)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: oldToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to be replaced.
    - id: newToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: >-
        The new token to use in the new tree in place of the old

            token.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 228
  summary: >+
    Creates a new tree of nodes with the specified trivia replaced with new trivia.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceTrivia<TRoot>(this TRoot root, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: The trivia to be replaced; descendants of the root node.
    - id: computeReplacementTrivia
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: >-
        A function that computes replacement trivia for

            the specified arguments. The first argument is the original trivia. The second argument is

            the same trivia with potentially rewritten sub structure.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: ReplaceTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 241
  summary: >+
    Creates a new tree of nodes with the specified trivia replaced with new trivia.

  syntax:
    content:
      CSharp: 'public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia trivia, SyntaxTrivia newTrivia)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node of the tree of nodes.
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
      description: The trivia to be replaced.
    - id: newTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
      description: The new trivia to use in the new tree in place of the old trivia.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: RemoveNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 254
  summary: >+
    Creates a new tree of nodes with the specified node removed.

  syntax:
    content:
      CSharp: 'public static TRoot RemoveNode<TRoot>(this TRoot root, SyntaxNode node, SyntaxRemoveOptions options)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node from which to remove a descendant node from.
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The node to remove.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.SyntaxRemoveOptions
        name: SyntaxRemoveOptions
        href: api/Microsoft.CodeAnalysis.SyntaxRemoveOptions
      description: Options that determine how the node's trivia is treated.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: RemoveNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 269
  summary: >+
    Creates a new tree of nodes with the specified nodes removed.

  syntax:
    content:
      CSharp: 'public static TRoot RemoveNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, SyntaxRemoveOptions options)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root node from which to remove a descendant node from.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: The nodes to remove.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.SyntaxRemoveOptions
        name: SyntaxRemoveOptions
        href: api/Microsoft.CodeAnalysis.SyntaxRemoveOptions
      description: Options that determine how the nodes' trivia is treated.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: NormalizeWhitespace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 289
  summary: >+
    Creates a new syntax node with all whitespace and end of line trivia replaced with

    regularly formatted trivia.

  syntax:
    content:
      CSharp: 'public static TNode NormalizeWhitespace<TNode>(this TNode node, string indentation = DefaultIndentation, bool elasticTrivia = false)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node to format.
    - id: indentation
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        An optional sequence of whitespace characters that defines a

            single level of indentation.
    - id: elasticTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: If true the replaced trivia is elastic trivia.
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithTriviaFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 298
  summary: >+
    Creates a new node from this node with both the leading and trailing trivia of the specified node.

  syntax:
    content:
      CSharp: 'public static TSyntax WithTriviaFrom<TSyntax>(this TSyntax syntax, SyntaxNode node)where TSyntax : SyntaxNode'
    parameters:
    - id: syntax
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithoutTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 307
  summary: >+
    Creates a new node from this node without leading or trailing trivia.

  syntax:
    content:
      CSharp: 'public static TSyntax WithoutTrivia<TSyntax>(this TSyntax syntax)where TSyntax : SyntaxNode'
    parameters:
    - id: syntax
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 316
  summary: >+
    Creates a new node from this node with the leading trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 328
  summary: >+
    Creates a new node from this node with the leading trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithoutLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 340
  summary: >+
    Creates a new node from this node with the leading trivia removed.

  syntax:
    content:
      CSharp: 'public static TSyntax WithoutLeadingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 350
  summary: >+
    Creates a new node from this node with the leading trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 360
  summary: >+
    Creates a new node from this node with the trailing trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 372
  summary: >+
    Creates a new node from this node with the trailing trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithoutTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 384
  summary: >+
    Creates a new node from this node with the trailing trivia removed.

  syntax:
    content:
      CSharp: 'public static TSyntax WithoutTrailingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs
    startLine: 394
  summary: >+
    Creates a new node from this node with the trailing trivia replaced.

  syntax:
    content:
      CSharp: 'public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TSyntax
        name: TSyntax
        href: TSyntax
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: TSyntax
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: TrackNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs
    startLine: 29
  summary: >+
    Creates a new tree of nodes with the specified nodes being tracked.



    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,

    to get the current node corresponding to the original tracked node.

  syntax:
    content:
      CSharp: 'public static TRoot TrackNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the subtree containing the nodes to be tracked.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: One or more nodes that are descendants of the root node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: TrackNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs
    startLine: 59
  summary: >+
    Creates a new tree of nodes with the specified nodes being tracked.



    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,

    to get the current node corresponding to the original tracked node.

  syntax:
    content:
      CSharp: 'public static TRoot TrackNodes<TRoot>(this TRoot root, params SyntaxNode[] nodes)where TRoot : SyntaxNode'
    parameters:
    - id: root
      type:
        id: TRoot
        name: TRoot
        href: TRoot
      description: The root of the subtree containing the nodes to be tracked.
    - id: nodes
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: One or more nodes that are descendants of the root node.
    return:
      id: TRoot
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: GetCurrentNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs
    startLine: 71
  summary: >+
    Gets the nodes within the subtree corresponding to the original tracked node.

    Use TrackNodes to start tracking nodes.

  syntax:
    content:
      CSharp: 'public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode'
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The root of the subtree containing the current node corresponding to the original tracked node.
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node instance originally tracked.
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: GetCurrentNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs
    startLine: 88
  summary: >+
    Gets the node within the subtree corresponding to the original tracked node.

    Use TrackNodes to start tracking nodes.

  syntax:
    content:
      CSharp: 'public static TNode GetCurrentNode<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode'
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The root of the subtree containing the current node corresponding to the original tracked node.
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The node instance originally tracked.
    return:
      id: TNode
- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  name:
    CSharp: GetCurrentNodes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions_Tracking.cs
    startLine: 100
  summary: >+
    Gets the nodes within the subtree corresponding to the original tracked nodes.

    Use TrackNodes to start tracking nodes.

  syntax:
    content:
      CSharp: 'public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, IEnumerable<TNode> nodes)where TNode : SyntaxNode'
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The root of the subtree containing the current nodes corresponding to the original tracked nodes.
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: System.Collections.Generic.IEnumerable{``0}
        isExternal: true
      description: One or more node instances originally tracked.
    return:
      id: IEnumerable
