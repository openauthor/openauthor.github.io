id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
name:
  CSharp: SyntaxNodeOrToken
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
  startLine: 17
summary: >+
  A wrapper for either a syntax node ([Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)) or a syntax token ([Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken)).

syntax:
  content:
    CSharp: public struct SyntaxNodeOrToken
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: RawKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 90
  summary: >+
    An integer representing the language specific kind of the underlying node or token.

  syntax:
    content:
      CSharp: public int RawKind
    parameters:
    - id: RawKind
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_RawKind
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_RawKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_RawKind
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 92
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 112
  summary: >+
    The language name that this node or token is syntax of.

  syntax:
    content:
      CSharp: public string Language
    parameters:
    - id: Language
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Language
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Language
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 114
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: IsMissing
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 137
  summary: >+
    Determines whether the underlying node or token represents a language construct that was actually parsed

    from source code. Missing nodes and tokens are typically generated by the parser in error scenarios to

    represent constructs that should have been present in the source code for the source code to compile

    successfully but were actually missing.

  syntax:
    content:
      CSharp: public bool IsMissing
    parameters:
    - id: IsMissing
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsMissing
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_IsMissing
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsMissing
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 139
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: Parent
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 159
  summary: >+
    The node that contains the underlying node or token in its Children collection.

  syntax:
    content:
      CSharp: public SyntaxNode Parent
    parameters:
    - id: Parent
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Parent
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_Parent
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Parent
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 161
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: IsToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 208
  summary: >+
    Determines whether this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a token.

  syntax:
    content:
      CSharp: public bool IsToken
    parameters:
    - id: IsToken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_IsToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 210
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: IsNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 219
  summary: >+
    Determines whether this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a node.

  syntax:
    content:
      CSharp: public bool IsNode
    parameters:
    - id: IsNode
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsNode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_IsNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_IsNode
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 221
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: AsToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 234
  summary: >+
    Returns the underlying token if this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a

    token.

  syntax:
    content:
      CSharp: public SyntaxToken AsToken()
    parameters: []
    return:
      id: SyntaxToken
      description: The underlying token if this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a token.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: AsNode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 251
  summary: >+
    Returns the underlying node if this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a

    node.

  syntax:
    content:
      CSharp: public SyntaxNode AsNode()
    parameters: []
    return:
      id: SyntaxNode
      description: The underlying node if this [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is wrapping a node.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ChildNodesAndTokens
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 264
  summary: >+
    The list of child nodes and tokens of the underlying node or token.

  syntax:
    content:
      CSharp: public ChildSyntaxList ChildNodesAndTokens()
    parameters: []
    return:
      id: ChildSyntaxList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 275
  summary: >+
    The absolute span of the underlying node or token in characters, not including its leading and trailing

    trivia.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 277
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: SpanStart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 299
  summary: >+
    Same as accessing [Microsoft.CodeAnalysis.Text.TextSpan.Start](#/api/Microsoft.CodeAnalysis.Text.TextSpan) on [Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public int SpanStart
    parameters:
    - id: SpanStart
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_SpanStart
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_SpanStart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_SpanStart
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 301
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 321
  summary: >+
    The absolute span of the underlying node or token in characters, including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 323
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 346
  summary: >+
    Returns the string representation of this node or token, not including its leading and trailing

    trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: >-
        The string representation of this node or token, not including its leading and trailing

            trivia.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 367
  summary: >+
    Returns the full string representation of this node or token including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: >-
        The full string representation of this node or token including its leading and trailing

            trivia.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WriteTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 385
  summary: >+
    Writes the full text of this node or token to the specified TextWriter.

  syntax:
    content:
      CSharp: public void WriteTo(System.IO.TextWriter writer)
    parameters:
    - id: writer
      type:
        id: System.IO.TextWriter
        name: System.IO.TextWriter
        isExternal: true
    return:
      id: Void
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: HasLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 400
  summary: >+
    Determines whether the underlying node or token has any leading trivia.

  syntax:
    content:
      CSharp: public bool HasLeadingTrivia
    parameters:
    - id: HasLeadingTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_HasLeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_HasLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_HasLeadingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 402
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 412
  summary: >+
    The list of trivia that appear before the underlying node or token in the source code and are attached to a

    token that is a descendant of the underlying node or token.

  syntax:
    content:
      CSharp: public SyntaxTriviaList GetLeadingTrivia()
    parameters: []
    return:
      id: SyntaxTriviaList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: HasTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 430
  summary: >+
    Determines whether the underlying node or token has any trailing trivia.

  syntax:
    content:
      CSharp: public bool HasTrailingTrivia
    parameters:
    - id: HasTrailingTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_HasTrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_HasTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_HasTrailingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 432
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 442
  summary: >+
    The list of trivia that appear after the underlying node or token in the source code and are attached to a

    token that is a descendant of the underlying node or token.

  syntax:
    content:
      CSharp: public SyntaxTriviaList GetTrailingTrivia()
    parameters: []
    return:
      id: SyntaxTriviaList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 457
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)
    parameters:
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 472
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithLeadingTrivia(params SyntaxTrivia[] trivia)
    parameters:
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 477
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)
    parameters:
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 492
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithTrailingTrivia(params SyntaxTrivia[] trivia)
    parameters:
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ContainsDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 501
  summary: >+
    Determines whether the underlying node or token or any of its descendant nodes, tokens or trivia have any

    diagnostics on them.

  syntax:
    content:
      CSharp: public bool ContainsDiagnostics
    parameters:
    - id: ContainsDiagnostics
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_ContainsDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsDiagnostics
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 503
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 525
  summary: >+
    Gets a list of all the diagnostics in either the sub tree that has this node as its root or

    associated with this token and its related trivia.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public IEnumerable<Diagnostic> GetDiagnostics()
    parameters: []
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ContainsDirectives
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 544
  summary: >+
    Determines whether the underlying node or token has any descendant preprocessor directives.

  syntax:
    content:
      CSharp: public bool ContainsDirectives
    parameters:
    - id: ContainsDirectives
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsDirectives
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_ContainsDirectives
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsDirectives
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 546
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: ContainsAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 566
  summary: >+
    Determines whether this node or token (or any sub node, token or trivia) as annotations.

  syntax:
    content:
      CSharp: public bool ContainsAnnotations
    parameters:
    - id: ContainsAnnotations
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsAnnotations
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_ContainsAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_ContainsAnnotations
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 568
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: HasAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 587
  summary: >+
    Determines whether this node or token has annotations of the specified kind.

  syntax:
    content:
      CSharp: public bool HasAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: HasAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 605
  summary: >+
    Determines whether this node or token has annotations of the specified kind.

  syntax:
    content:
      CSharp: public bool HasAnnotations(IEnumerable<string> annotationKinds)
    parameters:
    - id: annotationKinds
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: HasAnnotation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 623
  summary: >+
    Determines if this node or token has the specific annotation.

  syntax:
    content:
      CSharp: public bool HasAnnotation(SyntaxAnnotation annotation)
    parameters:
    - id: annotation
      type:
        id: Microsoft.CodeAnalysis.SyntaxAnnotation
        name: SyntaxAnnotation
        href: api/Microsoft.CodeAnalysis.SyntaxAnnotation
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 641
  summary: >+
    Gets all annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 659
  summary: >+
    Gets all annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)
    parameters:
    - id: annotationKinds
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithAdditionalAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 677
  summary: >+
    Creates a new node or token identical to this one with the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)
    parameters:
    - id: annotations
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithAdditionalAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 685
  summary: >+
    Creates a new node or token identical to this one with the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)
    parameters:
    - id: annotations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 708
  summary: >+
    Creates a new node or token identical to this one without the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithoutAnnotations(params SyntaxAnnotation[] annotations)
    parameters:
    - id: annotations
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 716
  summary: >+
    Creates a new node or token identical to this one without the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)
    parameters:
    - id: annotations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 739
  summary: >+
    Creates a new node or token identical to this one without annotations of the specified kind.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken WithoutAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 761
  summary: >+
    Determines whether the supplied [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is equal to this

    [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public bool Equals(SyntaxNodeOrToken other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Equality(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Equality(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 776
  summary: >+
    Determines whether two [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken)s are equal.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Inequality(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Inequality(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 784
  summary: >+
    Determines whether two [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken)s are unequal.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 793
  summary: >+
    Determines whether the supplied [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) is equal to this

    [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 801
  summary: >+
    Serves as hash function for [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: IsEquivalentTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 809
  summary: >+
    Determines if the two nodes or tokens are equivalent.

  syntax:
    content:
      CSharp: public bool IsEquivalentTo(SyntaxNodeOrToken other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Implicit(Microsoft.CodeAnalysis.SyntaxToken)~Microsoft.CodeAnalysis.SyntaxNodeOrToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Implicit(Microsoft.CodeAnalysis.SyntaxToken)~Microsoft.CodeAnalysis.SyntaxNodeOrToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 829
  summary: >+
    Returns a new [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) that wraps the supplied token.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Explicit(Microsoft.CodeAnalysis.SyntaxNodeOrToken)~Microsoft.CodeAnalysis.SyntaxToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Explicit(Microsoft.CodeAnalysis.SyntaxNodeOrToken)~Microsoft.CodeAnalysis.SyntaxToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 843
  summary: >+
    Returns the underlying token wrapped by the supplied [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Implicit(Microsoft.CodeAnalysis.SyntaxNode)~Microsoft.CodeAnalysis.SyntaxNodeOrToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Implicit(Microsoft.CodeAnalysis.SyntaxNode)~Microsoft.CodeAnalysis.SyntaxNodeOrToken
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 855
  summary: >+
    Returns a new [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) that wraps the supplied node.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Explicit(Microsoft.CodeAnalysis.SyntaxNodeOrToken)~Microsoft.CodeAnalysis.SyntaxNode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.op_Explicit(Microsoft.CodeAnalysis.SyntaxNodeOrToken)~Microsoft.CodeAnalysis.SyntaxNode
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 869
  summary: >+
    Returns the underlying node wrapped by the supplied [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 877
  summary: >+
    SyntaxTree which contains current SyntaxNodeOrToken.

  syntax:
    content:
      CSharp: public SyntaxTree SyntaxTree
    parameters:
    - id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: get_SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.get_SyntaxTree
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 879
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetLocation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 893
  summary: >+
    Get the location of this node or token.

  syntax:
    content:
      CSharp: public Location GetLocation()
    parameters: []
    return:
      id: Location
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetFirstChildIndexSpanningPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetFirstChildIndexSpanningPosition
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetFirstChildIndexSpanningPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 1025
  syntax:
    content:
      CSharp: public static int GetFirstChildIndexSpanningPosition(SyntaxNode node, int position)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetNextSibling
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetNextSibling
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetNextSibling
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 1074
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken GetNextSibling()
    parameters: []
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetPreviousSibling
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  name:
    CSharp: GetPreviousSibling
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetPreviousSibling
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrToken.cs
    startLine: 1089
  syntax:
    content:
      CSharp: public SyntaxNodeOrToken GetPreviousSibling()
    parameters: []
    return:
      id: SyntaxNodeOrToken
