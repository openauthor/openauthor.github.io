id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
name:
  CSharp: SyntaxNodeOrTokenList
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
  startLine: 16
summary: >+
  A list of [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) structures.

syntax:
  content:
    CSharp: public struct SyntaxNodeOrTokenList
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 71
  summary: >+
    Gets the count of nodes in this list

  syntax:
    content:
      CSharp: public int Count
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: get_Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Count
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 73
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Item(System.Int32)
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 81
  summary: >+
    Gets the [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) at the specified index.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: get_Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Item(System.Int32)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 83
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 118
  summary: >+
    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 120
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 136
  summary: >+
    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 138
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 159
  summary: >+
    Returns the string representation of the nodes and tokens in this list, not including the first node or token's leading trivia

    and the last node or token's trailing trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: "The string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 172
  summary: >+
    Returns the full string representation of the nodes and tokens in this list including the first node or token's leading trivia

    and the last node or token's trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: "The full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: First
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 180
  summary: >+
    Gets the first SyntaxNodeOrToken structure from this list.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken First()
    parameters: []
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: FirstOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 188
  summary: >+
    Gets the first SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken FirstOrDefault()
    parameters: []
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Last
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 203
  summary: >+
    Gets the last SyntaxNodeOrToken structure from this list.

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken Last()
    parameters: []
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: LastOrDefault
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 211
  summary: >+
    Gets the last SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public SyntaxNodeOrToken LastOrDefault()
    parameters: []
    return:
      id: SyntaxNodeOrToken
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 228
  summary: >+
    Returns the index from the list for the given [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken).

  syntax:
    content:
      CSharp: public int IndexOf(SyntaxNodeOrToken nodeOrToken)
    parameters:
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The node or token to search for in the list.
    return:
      id: Int32
      description: The index of the found nodeOrToken, or -1 if it wasn't found
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Any
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 248
  summary: >+
    Indicates whether there is any element in the list.

  syntax:
    content:
      CSharp: public bool Any()
    parameters: []
    return:
      id: Boolean
      description: true if there are any elements in the list, else false.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Add
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 272
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified node or token added to the end.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList Add(SyntaxNodeOrToken nodeOrToken)
    parameters:
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The node or token to add.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 281
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified nodes or tokens added to the end.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList AddRange(IEnumerable<SyntaxNodeOrToken> nodesOrTokens)
    parameters:
    - id: nodesOrTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        isExternal: true
      description: The nodes or tokens to add.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 291
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified node or token inserted at the index.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList Insert(int index, SyntaxNodeOrToken nodeOrToken)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The node or token to insert.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 306
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified nodes or tokens inserted at the index.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList InsertRange(int index, IEnumerable<SyntaxNodeOrToken> nodesAndTokens)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert at.
    - id: nodesAndTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        isExternal: true
      description: The nodes or tokens to insert.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 348
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the element at the specified index removed.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the element to remove.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 365
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified element removed.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList Remove(SyntaxNodeOrToken nodeOrTokenInList)
    parameters:
    - id: nodeOrTokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The element to remove.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 383
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified element replaced with a new node or token.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList Replace(SyntaxNodeOrToken nodeOrTokenInList, SyntaxNodeOrToken newNodeOrToken)
    parameters:
    - id: nodeOrTokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The element to replace.
    - id: newNodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The new node or token.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: ReplaceRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 398
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList) with the specified element replaced with a new nodes and tokens.

  syntax:
    content:
      CSharp: public SyntaxNodeOrTokenList ReplaceRange(SyntaxNodeOrToken nodeOrTokenInList, IEnumerable<SyntaxNodeOrToken> newNodesAndTokens)
    parameters:
    - id: nodeOrTokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
      description: The element to replace.
    - id: newNodesAndTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        isExternal: true
      description: The new nodes and tokens.
    return:
      id: SyntaxNodeOrTokenList
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 423
  summary: >+
    Gets the enumerator.

  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.op_Equality(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList,Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.op_Equality(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList,Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 458
  summary: >+
    Implements the operator ==.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.op_Inequality(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList,Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.op_Inequality(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList,Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 471
  summary: >+
    Implements the operator !=.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 484
  summary: >+
    Indicates whether the current object is equal to another object of the same type.

  syntax:
    content:
      CSharp: public bool Equals(SyntaxNodeOrTokenList other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
      description: An object to compare with this object.
    return:
      id: Boolean
      description: >-
        true if the current object is equal to the  parameter; otherwise,

            false.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 496
  summary: >+
    Determines whether the specified [System.Object](#) is equal to this instance.

  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
      description: The [System.Object](#) to compare with this instance.
    return:
      id: Boolean
      description: true if the specified [System.Object](#) is equal to this instance; otherwise, false.
- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxNodeOrTokenList.cs
    startLine: 507
  summary: >+
    Returns a hash code for this instance.

  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
      description: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
