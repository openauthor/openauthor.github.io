id: Microsoft.CodeAnalysis.SyntaxReference
yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
href: api/Microsoft.CodeAnalysis.SyntaxReference
name:
  CSharp: SyntaxReference
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxReference
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
  startLine: 11
summary: >+
  A reference to a syntax node.

syntax:
  content:
    CSharp: public abstract class SyntaxReference
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 16
  summary: >+
    The syntax tree that this references a node within.

  syntax:
    content:
      CSharp: public abstract SyntaxTree SyntaxTree
    parameters:
    - id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
- id: Microsoft.CodeAnalysis.SyntaxReference.get_SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: get_SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.get_SyntaxTree
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 16
- id: Microsoft.CodeAnalysis.SyntaxReference.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 21
  summary: >+
    The span of the node referenced.

  syntax:
    content:
      CSharp: public abstract TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxReference.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 21
- id: Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: GetSyntax
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 28
  summary: >+
    Retrieves the original referenced syntax node.

    This action may cause a parse to happen to recover the syntax node.

  syntax:
    content:
      CSharp: public abstract SyntaxNode GetSyntax(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxNode
      description: The original referenced syntax node.
- id: Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  name:
    CSharp: GetSyntaxAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxReference.cs
    startLine: 35
  summary: >+
    Retrieves the original referenced syntax node.

    This action may cause a parse to happen to recover the syntax node.

  syntax:
    content:
      CSharp: public virtual Task<SyntaxNode> GetSyntaxAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
      description: The original referenced syntax node.
