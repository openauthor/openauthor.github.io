id: Microsoft.CodeAnalysis.SyntaxToken
yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
href: api/Microsoft.CodeAnalysis.SyntaxToken
name:
  CSharp: SyntaxToken
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxToken
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
  startLine: 17
summary: >+
  Represents a token in the syntax tree. This is the language agnostic equivalent of [Microsoft.CodeAnalysis.CSharp.SyntaxToken](#) and [Microsoft.CodeAnalysis.VisualBasic.SyntaxToken](#).

syntax:
  content:
    CSharp: public struct SyntaxToken
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxToken.RawKind
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: RawKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.RawKind
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 53
  summary: >+
    An integer representing the language specific kind of this token.

  syntax:
    content:
      CSharp: public int RawKind
    parameters:
    - id: RawKind
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_RawKind
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_RawKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_RawKind
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 55
- id: Microsoft.CodeAnalysis.SyntaxToken.Language
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Language
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 61
  summary: >+
    The language name that this token is syntax of.

  syntax:
    content:
      CSharp: public string Language
    parameters:
    - id: Language
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_Language
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_Language
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 63
- id: Microsoft.CodeAnalysis.SyntaxToken.Parent
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Parent
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Parent
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 90
  summary: >+
    The node that contains this token in its Children collection.

  syntax:
    content:
      CSharp: public SyntaxNode Parent
    parameters:
    - id: Parent
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
- id: Microsoft.CodeAnalysis.SyntaxToken.get_Parent
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_Parent
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_Parent
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 92
- id: Microsoft.CodeAnalysis.SyntaxToken.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 135
  summary: >+
    The absolute span of this token in characters, not including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxToken.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 137
- id: Microsoft.CodeAnalysis.SyntaxToken.SpanStart
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: SpanStart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.SpanStart
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 151
  summary: >+
    Same as accessing [Microsoft.CodeAnalysis.Text.TextSpan.Start](#/api/Microsoft.CodeAnalysis.Text.TextSpan) on [Microsoft.CodeAnalysis.SyntaxToken.Span](#/api/Microsoft.CodeAnalysis.SyntaxToken).

  syntax:
    content:
      CSharp: public int SpanStart
    parameters:
    - id: SpanStart
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_SpanStart
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_SpanStart
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_SpanStart
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 153
- id: Microsoft.CodeAnalysis.SyntaxToken.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 159
  summary: >+
    The absolute span of this token in characters, including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxToken.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 161
- id: Microsoft.CodeAnalysis.SyntaxToken.IsMissing
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: IsMissing
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.IsMissing
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 169
  summary: >+
    Determines whether this token represents a language construct that was actually parsed from source code.

    Missing tokens are typically generated by the parser in error scenarios to represent constructs that should

    have been present in the source code for the source code to compile successfully but were actually missing.

  syntax:
    content:
      CSharp: public bool IsMissing
    parameters:
    - id: IsMissing
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_IsMissing
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_IsMissing
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_IsMissing
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 171
- id: Microsoft.CodeAnalysis.SyntaxToken.Value
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Value
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Value
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 178
  summary: >+
    Returns the value of the token. For example, if the token represents an integer literal, then this property

    would return the actual integer.

  syntax:
    content:
      CSharp: public object Value
    parameters:
    - id: Value
      type:
        id: System.Object
        name: System.Object
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_Value
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_Value
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_Value
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 180
- id: Microsoft.CodeAnalysis.SyntaxToken.ValueText
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ValueText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ValueText
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 187
  summary: >+
    Returns the text representation of the value of the token. For example, if the token represents an integer

    literal, then this property would return a string representing the integer.

  syntax:
    content:
      CSharp: public string ValueText
    parameters:
    - id: ValueText
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_ValueText
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_ValueText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_ValueText
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 189
- id: Microsoft.CodeAnalysis.SyntaxToken.Text
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Text
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Text
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 192
  syntax:
    content:
      CSharp: public string Text
    parameters:
    - id: Text
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_Text
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_Text
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_Text
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 194
- id: Microsoft.CodeAnalysis.SyntaxToken.ToString
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 202
  summary: >+
    Returns the string representation of this token, not including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: The string representation of this token, not including its leading and trailing trivia.
- id: Microsoft.CodeAnalysis.SyntaxToken.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 212
  summary: >+
    Returns the full string representation of this token including its leading and trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: The full string representation of this token including its leading and trailing trivia.
- id: Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WriteTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 221
  summary: >+
    Writes the full text of this token to the specified TextWriter

  syntax:
    content:
      CSharp: public void WriteTo(System.IO.TextWriter writer)
    parameters:
    - id: writer
      type:
        id: System.IO.TextWriter
        name: System.IO.TextWriter
        isExternal: true
    return:
      id: Void
- id: Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 243
  summary: >+
    Determines whether this token has any leading trivia.

  syntax:
    content:
      CSharp: public bool HasLeadingTrivia
    parameters:
    - id: HasLeadingTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_HasLeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_HasLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_HasLeadingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 245
- id: Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 251
  summary: >+
    Determines whether this token has any trailing trivia.

  syntax:
    content:
      CSharp: public bool HasTrailingTrivia
    parameters:
    - id: HasTrailingTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_HasTrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_HasTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_HasTrailingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 253
- id: Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ContainsDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 275
  summary: >+
    Determines whether this token or any of its descendant trivia have any diagnostics on them.

  syntax:
    content:
      CSharp: public bool ContainsDiagnostics
    parameters:
    - id: ContainsDiagnostics
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_ContainsDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsDiagnostics
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 277
- id: Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ContainsDirectives
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 283
  summary: >+
    Determines whether this token has any descendant preprocessor directives.

  syntax:
    content:
      CSharp: public bool ContainsDirectives
    parameters:
    - id: ContainsDirectives
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsDirectives
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_ContainsDirectives
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsDirectives
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 285
- id: Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: IsPartOfStructuredTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 291
  summary: >+
    Determines whether this token is a descendant of a structured trivia.

  syntax:
    content:
      CSharp: public bool IsPartOfStructuredTrivia()
    parameters: []
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasStructuredTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 299
  summary: >+
    Determines whether any of this token's trivia is structured.

  syntax:
    content:
      CSharp: public bool HasStructuredTrivia
    parameters:
    - id: HasStructuredTrivia
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_HasStructuredTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_HasStructuredTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_HasStructuredTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 301
- id: Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: ContainsAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 308
  summary: >+
    True if this token or its trivia has any annotations.

  syntax:
    content:
      CSharp: public bool ContainsAnnotations
    parameters:
    - id: ContainsAnnotations
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsAnnotations
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_ContainsAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_ContainsAnnotations
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 310
- id: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 316
  summary: >+
    True if this token has annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public bool HasAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 324
  summary: >+
    True if this token has annotations of the specified annotation kinds.

  syntax:
    content:
      CSharp: public bool HasAnnotations(params string[] annotationKinds)
    parameters:
    - id: annotationKinds
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: HasAnnotation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 332
  summary: >+
    True if this token has the specified annotation.

  syntax:
    content:
      CSharp: public bool HasAnnotation(SyntaxAnnotation annotation)
    parameters:
    - id: annotation
      type:
        id: Microsoft.CodeAnalysis.SyntaxAnnotation
        name: SyntaxAnnotation
        href: api/Microsoft.CodeAnalysis.SyntaxAnnotation
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 340
  summary: >+
    Gets all the annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 350
  summary: >+
    Gets all the annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds)
    parameters:
    - id: annotationKinds
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 358
  summary: >+
    Gets all the annotations of the specified annotation kind.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)
    parameters:
    - id: annotationKinds
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithAdditionalAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 369
  summary: >+
    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the

    annotation on it.

  syntax:
    content:
      CSharp: public SyntaxToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)
    parameters:
    - id: annotations
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithAdditionalAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 378
  summary: >+
    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the

    annotation on it.

  syntax:
    content:
      CSharp: public SyntaxToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)
    parameters:
    - id: annotations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 399
  summary: >+
    Creates a new syntax token identical to this one without the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxToken WithoutAnnotations(params SyntaxAnnotation[] annotations)
    parameters:
    - id: annotations
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 407
  summary: >+
    Creates a new syntax token identical to this one without the specified annotations.

  syntax:
    content:
      CSharp: public SyntaxToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)
    parameters:
    - id: annotations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithoutAnnotations
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 429
  summary: >+
    Creates a new syntax token identical to this one without annotations of the specified kind.

  syntax:
    content:
      CSharp: public SyntaxToken WithoutAnnotations(string annotationKind)
    parameters:
    - id: annotationKind
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: CopyAnnotationsTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 452
  summary: >+
    Copies all SyntaxAnnotations, if any, from this SyntaxToken instance and attaches them to a new instance based on .

  syntax:
    content:
      CSharp: public SyntaxToken CopyAnnotationsTo(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: LeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 481
  summary: >+
    The list of trivia that appear before this token in the source code.

  syntax:
    content:
      CSharp: public SyntaxTriviaList LeadingTrivia
    parameters:
    - id: LeadingTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
- id: Microsoft.CodeAnalysis.SyntaxToken.get_LeadingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_LeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_LeadingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 483
- id: Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: TrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 495
  summary: >+
    The list of trivia that appear after this token in the source code and are attached to this token or any of

    its descendants.

  syntax:
    content:
      CSharp: public SyntaxTriviaList TrailingTrivia
    parameters:
    - id: TrailingTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
- id: Microsoft.CodeAnalysis.SyntaxToken.get_TrailingTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_TrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_TrailingTrivia
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 497
- id: Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithTriviaFrom
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 528
  summary: >+
    Creates a new tokne from this token with the leading and trailing trivia from the specified token.

  syntax:
    content:
      CSharp: public SyntaxToken WithTriviaFrom(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 536
  summary: >+
    Creates a new token from this token with the leading trivia specified.

  syntax:
    content:
      CSharp: public SyntaxToken WithLeadingTrivia(SyntaxTriviaList trivia)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 544
  summary: >+
    Creates a new token from this token with the leading trivia specified..

  syntax:
    content:
      CSharp: public SyntaxToken WithLeadingTrivia(params SyntaxTrivia[] trivia)
    parameters:
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithLeadingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 552
  summary: >+
    Creates a new token from this token with the leading trivia specified..

  syntax:
    content:
      CSharp: public SyntaxToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)
    parameters:
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 564
  summary: >+
    Creates a new token from this token with the trailing trivia specified.

  syntax:
    content:
      CSharp: public SyntaxToken WithTrailingTrivia(SyntaxTriviaList trivia)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 572
  summary: >+
    Creates a new token from this token with the trailing trivia specified.

  syntax:
    content:
      CSharp: public SyntaxToken WithTrailingTrivia(params SyntaxTrivia[] trivia)
    parameters:
    - id: trivia
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: WithTrailingTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 580
  summary: >+
    Creates a new token from this token with the trailing trivia specified.

  syntax:
    content:
      CSharp: public SyntaxToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)
    parameters:
    - id: trivia
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
    return:
      id: SyntaxToken
- id: Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetAllTrivia
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 592
  summary: >+
    Gets a list of all the trivia (both leading and trailing) for this token.

  syntax:
    content:
      CSharp: public IEnumerable<SyntaxTrivia> GetAllTrivia()
    parameters: []
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxToken.op_Equality(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.op_Equality(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 616
  summary: >+
    Determines whether two [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken)s are equal.

- id: Microsoft.CodeAnalysis.SyntaxToken.op_Inequality(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.op_Inequality(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 624
  summary: >+
    Determines whether two [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken)s are unequal.

- id: Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 633
  summary: >+
    Determines whether the supplied [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken) is equal to this

    [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken).

  syntax:
    content:
      CSharp: public bool Equals(SyntaxToken other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 645
  summary: >+
    Determines whether the supplied [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken) is equal to this

    [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken).

  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxToken.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 653
  summary: >+
    Serves as hash function for [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken).

  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetNextToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 662
  summary: >+
    Gets the token that follows this token in the syntax tree.

  syntax:
    content:
      CSharp: public SyntaxToken GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)
    parameters:
    - id: includeZeroWidth
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeSkipped
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeDirectives
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeDocumentationComments
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: SyntaxToken
      description: The token that follows this token in the syntax tree.
- id: Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetPreviousToken
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 693
  summary: >+
    Gets the token that precedes this token in the syntax tree.

  syntax:
    content:
      CSharp: public SyntaxToken GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)
    parameters:
    - id: includeZeroWidth
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeSkipped
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeDirectives
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: includeDocumentationComments
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: SyntaxToken
      description: The next token that follows this token in the syntax tree.
- id: Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 718
  summary: >+
    The SyntaxTree that contains this token.

  syntax:
    content:
      CSharp: public SyntaxTree SyntaxTree
    parameters:
    - id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
- id: Microsoft.CodeAnalysis.SyntaxToken.get_SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: get_SyntaxTree
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.get_SyntaxTree
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 720
- id: Microsoft.CodeAnalysis.SyntaxToken.GetLocation
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetLocation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetLocation
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 730
  summary: >+
    Gets the location for this token.

  syntax:
    content:
      CSharp: public Location GetLocation()
    parameters: []
    return:
      id: Location
- id: Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 742
  summary: >+
    Gets a list of all the diagnostics associated with this token and any related trivia.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public IEnumerable<Diagnostic> GetDiagnostics()
    parameters: []
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  name:
    CSharp: IsEquivalentTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxToken.cs
    startLine: 752
  summary: >+
    Determines if this token is equivalent to the specified token.

  syntax:
    content:
      CSharp: public bool IsEquivalentTo(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: Boolean
