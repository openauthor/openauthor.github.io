id: Microsoft.CodeAnalysis.SyntaxTokenList
yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
href: api/Microsoft.CodeAnalysis.SyntaxTokenList
name:
  CSharp: SyntaxTokenList
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxTokenList
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/pengbian/roslyn.git
    local: C:/Users/peterbi/Documents/GitHub/roslyn/
    sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
  path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
  startLine: 15
summary: >+
  Represents a read-only list of [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken).

syntax:
  content:
    CSharp: public partial struct SyntaxTokenList
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Count
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 60
  summary: >+
    Returns the number of tokens in the list.

  syntax:
    content:
      CSharp: public int Count
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxTokenList.get_Count
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: get_Count
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.get_Count
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 62
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Item(System.Int32)
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 75
  summary: >+
    Gets the token at the specified index.

- id: Microsoft.CodeAnalysis.SyntaxTokenList.get_Item(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: get_Item
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.get_Item(System.Int32)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 77
- id: Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 101
  summary: >+
    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan FullSpan
    parameters:
    - id: FullSpan
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxTokenList.get_FullSpan
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: get_FullSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.get_FullSpan
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 103
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Span
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 119
  summary: >+
    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.

  syntax:
    content:
      CSharp: public TextSpan Span
    parameters:
    - id: Span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
- id: Microsoft.CodeAnalysis.SyntaxTokenList.get_Span
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: get_Span
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.get_Span
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 121
- id: Microsoft.CodeAnalysis.SyntaxTokenList.ToString
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.ToString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 143
  summary: >+
    Returns the string representation of the tokens in this list, not including

    the first token's leading trivia and the last token's trailing trivia.

  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      description: "The string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: ToFullString
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 156
  summary: >+
    Returns the full string representation of the tokens in this list including

    the first token's leading trivia and the last token's trailing trivia.

  syntax:
    content:
      CSharp: public string ToFullString()
    parameters: []
    return:
      id: String
      description: "The full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia."
- id: Microsoft.CodeAnalysis.SyntaxTokenList.First
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: First
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.First
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 166
  summary: >+
    Returns the first token in the list.

  syntax:
    content:
      CSharp: public SyntaxToken First()
    parameters: []
    return:
      id: SyntaxToken
      description: The first token in the list.
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Last
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Last
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Last
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 181
  summary: >+
    Returns the last token in the list.

  syntax:
    content:
      CSharp: public SyntaxToken Last()
    parameters: []
    return:
      id: SyntaxToken
      description: The last token in the list.
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Any
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Any
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Any
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 195
  summary: >+
    Tests whether the list is non-empty.

  syntax:
    content:
      CSharp: public bool Any()
    parameters: []
    return:
      id: Boolean
      description: True if the list contains any tokens.
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Reverse
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Reverse
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 204
  summary: >+
    Returns a list which contains all elements of [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) in reversed order.

  syntax:
    content:
      CSharp: public Reversed Reverse()
    parameters: []
    return:
      id: Reversed
      description: '[Microsoft.CodeAnalysis.SyntaxTokenList.Reversed](#/api/Microsoft.CodeAnalysis.SyntaxTokenList.Reversed) which contains all elements of [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) in reversed order'
- id: Microsoft.CodeAnalysis.SyntaxTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 236
  syntax:
    content:
      CSharp: public int IndexOf(SyntaxToken tokenInList)
    parameters:
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Add
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 267
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified token added to the end.

  syntax:
    content:
      CSharp: public SyntaxTokenList Add(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to add.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 276
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified tokens added to the end.

  syntax:
    content:
      CSharp: public SyntaxTokenList AddRange(IEnumerable<SyntaxToken> tokens)
    parameters:
    - id: tokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: The tokens to add.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 286
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified token insert at the index.

  syntax:
    content:
      CSharp: public SyntaxTokenList Insert(int index, SyntaxToken token)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert the new token.
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to insert.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 301
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified tokens insert at the index.

  syntax:
    content:
      CSharp: public SyntaxTokenList InsertRange(int index, IEnumerable<SyntaxToken> tokens)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index to insert the new tokens.
    - id: tokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: The tokens to insert.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 336
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the token at the specified index removed.

  syntax:
    content:
      CSharp: public SyntaxTokenList RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the token to remove.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 352
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified token removed.

  syntax:
    content:
      CSharp: public SyntaxTokenList Remove(SyntaxToken tokenInList)
    parameters:
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to remove.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 370
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified token replaced with a new token.

  syntax:
    content:
      CSharp: public SyntaxTokenList Replace(SyntaxToken tokenInList, SyntaxToken newToken)
    parameters:
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to replace.
    - id: newToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The new token.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: ReplaceRange
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 385
  summary: >+
    Creates a new [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the specified token replaced with new tokens.

  syntax:
    content:
      CSharp: public SyntaxTokenList ReplaceRange(SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)
    parameters:
    - id: tokenInList
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: The token to replace.
    - id: newTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: The new tokens.
    return:
      id: SyntaxTokenList
- id: Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 410
  summary: >+
    Returns an enumerator for the tokens in the [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList)

  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
- id: Microsoft.CodeAnalysis.SyntaxTokenList.op_Equality(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.op_Equality(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 441
  summary: >+
    Compares  and  for equality.

- id: Microsoft.CodeAnalysis.SyntaxTokenList.op_Inequality(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.op_Inequality(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 452
  summary: >+
    Compares  and  for inequality.

- id: Microsoft.CodeAnalysis.SyntaxTokenList.Equals(Microsoft.CodeAnalysis.SyntaxTokenList)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Equals(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 457
  syntax:
    content:
      CSharp: public bool Equals(SyntaxTokenList other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: api/Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 466
  summary: >+
    Compares this [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList) with the  for equality.

  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
      description: True if the two objects are equal.
- id: Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 474
  summary: >+
    Serves as a hash function for the [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList)

  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      local: C:/Users/peterbi/Documents/GitHub/roslyn/
      sha1: 2b5d9bbb0a0cd1ec596f1459763458c4c95c8e52
    path: src/Compilers/Core/Portable/Syntax/SyntaxTokenList.cs
    startLine: 485
  summary: >+
    Create a new Token List

  syntax:
    content:
      CSharp: public static SyntaxTokenList Create(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
      description: Element of the return Token List
    return:
      id: SyntaxTokenList
