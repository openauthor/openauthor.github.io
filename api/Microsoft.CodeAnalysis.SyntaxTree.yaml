id: Microsoft.CodeAnalysis.SyntaxTree
yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
href: api/Microsoft.CodeAnalysis.SyntaxTree
name:
  CSharp: SyntaxTree
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxTree
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
  startLine: 18
summary: >+
  The parsed representation of a source document.

syntax:
  content:
    CSharp: public abstract class SyntaxTree
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxTree.FilePath
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: FilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.FilePath
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 43
  summary: >+
    The path of the source document file.

  syntax:
    content:
      CSharp: public abstract string FilePath
    parameters:
    - id: FilePath
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxTree.get_FilePath
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: get_FilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.get_FilePath
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 43
- id: Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: HasCompilationUnitRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 48
  summary: >+
    Returns true if this syntax tree has a root with SyntaxKind "CompilationUnit".

  syntax:
    content:
      CSharp: public abstract bool HasCompilationUnitRoot
    parameters:
    - id: HasCompilationUnitRoot
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxTree.get_HasCompilationUnitRoot
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: get_HasCompilationUnitRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.get_HasCompilationUnitRoot
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 48
- id: Microsoft.CodeAnalysis.SyntaxTree.Options
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.Options
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 53
  summary: >+
    The options used by the parser to produce the syntax tree.

  syntax:
    content:
      CSharp: public ParseOptions Options
    parameters:
    - id: Options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: api/Microsoft.CodeAnalysis.ParseOptions
- id: Microsoft.CodeAnalysis.SyntaxTree.get_Options
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: get_Options
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.get_Options
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 55
- id: Microsoft.CodeAnalysis.SyntaxTree.Length
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: Length
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.Length
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 69
  summary: >+
    The length of the text of the syntax tree.

  syntax:
    content:
      CSharp: public abstract int Length
    parameters:
    - id: Length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: Microsoft.CodeAnalysis.SyntaxTree.get_Length
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: get_Length
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.get_Length
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 69
- id: Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: TryGetText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 74
  summary: >+
    Gets the syntax tree's text if it is available.

  syntax:
    content:
      CSharp: public abstract bool TryGetText(out SourceText text);
    parameters:
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: api/Microsoft.CodeAnalysis.Text.SourceText
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 79
  summary: >+
    Gets the text of the source document.

  syntax:
    content:
      CSharp: public abstract SourceText GetText(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SourceText
- id: Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetTextAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 88
  summary: >+
    Gets the text of the source document asynchronously.

  syntax:
    content:
      CSharp: public virtual Task<SourceText> GetTextAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: TryGetRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 97
  summary: >+
    Gets the root of the syntax tree if it is available.

  syntax:
    content:
      CSharp: public bool TryGetRoot(out SyntaxNode root)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 110
  summary: >+
    Gets the root node of the syntax tree, causing computation if necessary.

  syntax:
    content:
      CSharp: public SyntaxNode GetRoot(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxNode
- id: Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetRootAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 123
  summary: >+
    Gets the root node of the syntax tree asynchronously.

  syntax:
    content:
      CSharp: public Task<SyntaxNode> GetRootAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: WithChangedText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 140
  summary: >+
    Create a new syntax tree based off this tree using a new source text.



    If the new source text is a minor change from the current source text an incremental

    parse will occur reusing most of the current syntax tree internal data.  Otherwise, a

    full parse will occur using the new source text.

  syntax:
    content:
      CSharp: public abstract SyntaxTree WithChangedText(SourceText newText);
    parameters:
    - id: newText
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: api/Microsoft.CodeAnalysis.Text.SourceText
    return:
      id: SyntaxTree
- id: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 147
  summary: >+
    Gets a list of all the diagnostics in the syntax tree.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public abstract IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 154
  summary: >+
    Gets a list of all the diagnostics in the sub tree that has the specified node as its root.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node);
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 161
  summary: >+
    Gets a list of all the diagnostics associated with the token and any related trivia.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token);
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: api/Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 168
  summary: >+
    Gets a list of all the diagnostics associated with the trivia.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia);
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: api/Microsoft.CodeAnalysis.SyntaxTrivia
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetDiagnostics
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 176
  summary: >+
    Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or

    associated with the token and its related trivia.

    This method does not filter diagnostics based on #pragmas and compiler options

    like nowarn, warnaserror etc.

  syntax:
    content:
      CSharp: public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken);
    parameters:
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetLineSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 187
  summary: >+
    Gets the location in terms of path, line and column for a given span.

  syntax:
    content:
      CSharp: public abstract FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
      description: Span within the tree.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: Cancallation token.
    return:
      id: FileLinePositionSpan
      description: >-
        A valid [Microsoft.CodeAnalysis.FileLinePositionSpan](#/api/Microsoft.CodeAnalysis.FileLinePositionSpan) that contains path, line and column information.

            The values are not affected by line mapping directives (#line).
- id: Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetMappedLineSpan
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 204
  summary: >+
    Gets the location in terms of path, line and column after applying source line mapping directives

    (#line in C# or #ExternalSource in VB).

  syntax:
    content:
      CSharp: public abstract FileLinePositionSpan GetMappedLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
      description: Span within the tree.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: Cancallation token.
    return:
      id: FileLinePositionSpan
      description: "A valid [Microsoft.CodeAnalysis.FileLinePositionSpan](#/api/Microsoft.CodeAnalysis.FileLinePositionSpan) that contains path, line and column information.\r\n    \r\n    If the location path is mapped the resulting path is the path specified in the corresponding #line,\r\n    otherwise it's [Microsoft.CodeAnalysis.SyntaxTree.FilePath](#/api/Microsoft.CodeAnalysis.SyntaxTree).\r\n    \r\n    A location path is considered mapped if the first #line directive that preceeds it and that \r\n    either specifies an explicit file path or is #line default exists and specifies an explicit path."
- id: Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetLineVisibility
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 211
  summary: >+
    Returns the visibility for the line at the given position.

  syntax:
    content:
      CSharp: public virtual LineVisibility GetLineVisibility(int position, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The position to check.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The cancellation token.
    return:
      id: LineVisibility
- id: Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: HasHiddenRegions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 272
  summary: >+
    Are there any hidden regions in the tree?

  syntax:
    content:
      CSharp: public abstract bool HasHiddenRegions();
    parameters: []
    return:
      id: Boolean
      description: True if there is at least one hidden region.
- id: Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetChangedSpans
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 278
  summary: >+
    Returns a list of the changed regions between this tree and the specified tree. The list is conservative for

    performance reasons. It may return larger regions than what has actually changed.

  syntax:
    content:
      CSharp: public abstract IList<TextSpan> GetChangedSpans(SyntaxTree syntaxTree);
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: IList
- id: Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetLocation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 283
  summary: >+
    Gets a location for the specified text span.

  syntax:
    content:
      CSharp: public abstract Location GetLocation(TextSpan span);
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: api/Microsoft.CodeAnalysis.Text.TextSpan
    return:
      id: Location
- id: Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: IsEquivalentTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 293
  summary: >+
    Determines if two trees are the same, disregarding trivia differences.

  syntax:
    content:
      CSharp: public abstract bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false);
    parameters:
    - id: tree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
      description: The tree to compare against.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the trees are equivalent if the contained nodes and tokens declaring

            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

            or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 300
  summary: >+
    Gets a SyntaxReference for a specified syntax node. SyntaxReferences can be used to

    regain access to a syntax node without keeping the entire tree and source text in

    memory.

  syntax:
    content:
      CSharp: public abstract SyntaxReference GetReference(SyntaxNode node);
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxReference
- id: Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: GetChanges
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 308
  summary: >+
    Gets a list of text changes that when applied to the old tree produce this tree.

  syntax:
    content:
      CSharp: public abstract IList<TextChange> GetChanges(SyntaxTree oldTree);
    parameters:
    - id: oldTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: api/Microsoft.CodeAnalysis.SyntaxTree
      description: The old tree.
    return:
      id: IList
- id: Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: WithRootAndOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 332
  summary: >+
    Returns a new tree whose root and options are as specified and other properties are copied from the current tree.

  syntax:
    content:
      CSharp: public abstract SyntaxTree WithRootAndOptions(SyntaxNode root, ParseOptions options);
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: api/Microsoft.CodeAnalysis.ParseOptions
    return:
      id: SyntaxTree
- id: Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  name:
    CSharp: WithFilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxTree.cs
    startLine: 337
  summary: >+
    Returns a new tree whose [Microsoft.CodeAnalysis.SyntaxTree.FilePath](#/api/Microsoft.CodeAnalysis.SyntaxTree) is the specified node and other properties are copied from the current tree.

  syntax:
    content:
      CSharp: public abstract SyntaxTree WithFilePath(string path);
    parameters:
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxTree
