id: Microsoft.CodeAnalysis.SyntaxWalker
yaml: api/Microsoft.CodeAnalysis.SyntaxWalker.yaml
href: api/Microsoft.CodeAnalysis.SyntaxWalker
name:
  CSharp: SyntaxWalker
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SyntaxWalker
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Syntax/SyntaxWalker.cs
  startLine: 10
summary: >+
  Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia.  The

  walker will perform a depth first walk of the tree.

syntax:
  content:
    CSharp: public abstract class SyntaxWalker
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)
  yaml: api/Microsoft.CodeAnalysis.SyntaxWalker.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxWalker
  name:
    CSharp: Visit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Syntax/SyntaxWalker.cs
    startLine: 33
  summary: >+
    Called when the walker visits a node.  This method may be overridden if subclasses want

    to handle the node.  Overrides should call back into this base method if they want the

    children of this node to be visited.

  syntax:
    content:
      CSharp: public virtual void Visit(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: api/Microsoft.CodeAnalysis.SyntaxNode
      description: The current node that the walker is visiting.
    return:
      id: Void
