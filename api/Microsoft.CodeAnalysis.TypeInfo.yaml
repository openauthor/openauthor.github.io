id: Microsoft.CodeAnalysis.TypeInfo
yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
href: api/Microsoft.CodeAnalysis.TypeInfo
name:
  CSharp: TypeInfo
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.TypeInfo
type: Struct
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
  startLine: 8
syntax:
  content:
    CSharp: public struct TypeInfo
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.TypeInfo.Type
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: Type
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.Type
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 17
  summary: >+
    The type of the expression represented by the syntax node. For expressions that do not

    have a type, null is returned. If the type could not be determined due to an error, than

    an IErrorTypeSymbol is returned.

  syntax:
    content:
      CSharp: public ITypeSymbol Type
    parameters:
    - id: Type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
- id: Microsoft.CodeAnalysis.TypeInfo.get_Type
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: get_Type
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.get_Type
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 17
- id: Microsoft.CodeAnalysis.TypeInfo.ConvertedType
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: ConvertedType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.ConvertedType
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 23
  summary: >+
    The type of the expression after it has undergone an implicit conversion. If the type

    did not undergo an implicit conversion, returns the same as Type.

  syntax:
    content:
      CSharp: public ITypeSymbol ConvertedType
    parameters:
    - id: ConvertedType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: api/Microsoft.CodeAnalysis.ITypeSymbol
- id: Microsoft.CodeAnalysis.TypeInfo.get_ConvertedType
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: get_ConvertedType
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.get_ConvertedType
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 23
- id: Microsoft.CodeAnalysis.TypeInfo.Equals(Microsoft.CodeAnalysis.TypeInfo)
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.Equals(Microsoft.CodeAnalysis.TypeInfo)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 32
  syntax:
    content:
      CSharp: public bool Equals(TypeInfo other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.TypeInfo
        name: TypeInfo
        href: api/Microsoft.CodeAnalysis.TypeInfo
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.TypeInfo.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 38
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.TypeInfo.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.TypeInfo.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:/Repo/RoslynGit/
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src/Compilers/Core/Portable/Compilation/TypeInfo.cs
    startLine: 43
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
