id: Microsoft.CodeAnalysis
yaml: api/Microsoft.CodeAnalysis.yaml
href: api/Microsoft.CodeAnalysis
name:
  CSharp: CodeAnalysis
qualifiedName:
  CSharp: Microsoft.CodeAnalysis
type: Namespace
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:/Repo/RoslynGit/
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src/Compilers/Core/Portable/Binding/AbstractLookupSymbolsInfo.cs
  startLine: 8
items:
- id: Microsoft.CodeAnalysis.CaseInsensitiveComparison
  yaml: api/Microsoft.CodeAnalysis.CaseInsensitiveComparison.yaml
  href: api/Microsoft.CodeAnalysis.CaseInsensitiveComparison
  type: Class
  summary: >+
    Case-insensitive operations (mostly comparison) on unicode strings.

- id: Microsoft.CodeAnalysis.SymbolFilter
  yaml: api/Microsoft.CodeAnalysis.SymbolFilter.yaml
  href: api/Microsoft.CodeAnalysis.SymbolFilter
  type: Enum
  summary: >+
    Indicate what kinds of declaration symbols will be included

- id: Microsoft.CodeAnalysis.LocalizableResourceString
  yaml: api/Microsoft.CodeAnalysis.LocalizableResourceString.yaml
  href: api/Microsoft.CodeAnalysis.LocalizableResourceString
  type: Class
  summary: >+
    A localizable resource string that may possibly be formatted differently depending on culture.

- id: Microsoft.CodeAnalysis.LocalizableString
  yaml: api/Microsoft.CodeAnalysis.LocalizableString.yaml
  href: api/Microsoft.CodeAnalysis.LocalizableString
  type: Class
  summary: >+
    A string that may possibly be formatted differently depending on culture.

    NOTE: Types implementing [Microsoft.CodeAnalysis.LocalizableString](#/api/Microsoft.CodeAnalysis.LocalizableString) must be serializable.

- id: Microsoft.CodeAnalysis.CandidateReason
  yaml: api/Microsoft.CodeAnalysis.CandidateReason.yaml
  href: api/Microsoft.CodeAnalysis.CandidateReason
  type: Enum
  summary: >+
    Indicates the reasons why a candidate (or set of candidate) symbols were not considered

    correct in SemanticInfo. Higher values take precedence over lower values, so if, for

    example, there a symbol with a given name that was inaccessible, and other with the wrong

    arity, only the inaccessible one would be reported in the SemanticInfo.

- id: Microsoft.CodeAnalysis.Compilation
  yaml: api/Microsoft.CodeAnalysis.Compilation.yaml
  href: api/Microsoft.CodeAnalysis.Compilation
  type: Class
  summary: >+
    The compilation object is an immutable representation of a single invocation of the

    compiler. Although immutable, a compilation is also on-demand, and will realize and cache

    data as necessary. A compilation can produce a new compilation from existing compilation

    with the application of small deltas. In many cases, it is more efficient than creating a

    new compilation from scratch, as the new compilation can reuse information from the old

    compilation.

- id: Microsoft.CodeAnalysis.CompilationOptions
  yaml: api/Microsoft.CodeAnalysis.CompilationOptions.yaml
  href: api/Microsoft.CodeAnalysis.CompilationOptions
  type: Class
  summary: >+
    Represents compilation options common to C# and VB.

- id: Microsoft.CodeAnalysis.ControlFlowAnalysis
  yaml: api/Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api/Microsoft.CodeAnalysis.ControlFlowAnalysis
  type: Class
  summary: >+
    Provides information about statements which transfer control in and out of a region. This

    information is returned from a call to [Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlow(Microsoft.CodeAnalysis.SyntaxNode)](#).

- id: Microsoft.CodeAnalysis.DataFlowAnalysis
  yaml: api/Microsoft.CodeAnalysis.DataFlowAnalysis.yaml
  href: api/Microsoft.CodeAnalysis.DataFlowAnalysis
  type: Class
  summary: >+
    Provides information about how data flows into and out of a region. This information is

    returned from a call to

    [Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlow(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)](#), or one of its language-specific overloads,

    where you pass the first and last statements of the region as parameters.

    "Inside" means those statements or ones between them. "Outside" are any other statements of the same method.

- id: Microsoft.CodeAnalysis.ModelExtensions
  yaml: api/Microsoft.CodeAnalysis.ModelExtensions.yaml
  href: api/Microsoft.CodeAnalysis.ModelExtensions
  type: Class
- id: Microsoft.CodeAnalysis.OptimizationLevel
  yaml: api/Microsoft.CodeAnalysis.OptimizationLevel.yaml
  href: api/Microsoft.CodeAnalysis.OptimizationLevel
  type: Enum
  summary: >+
    Determines the level of optimization of the generated code.

- id: Microsoft.CodeAnalysis.ParseOptions
  yaml: api/Microsoft.CodeAnalysis.ParseOptions.yaml
  href: api/Microsoft.CodeAnalysis.ParseOptions
  type: Class
  summary: >+
    Represents parse options common to C# and VB.

- id: Microsoft.CodeAnalysis.Platform
  yaml: api/Microsoft.CodeAnalysis.Platform.yaml
  href: api/Microsoft.CodeAnalysis.Platform
  type: Enum
- id: Microsoft.CodeAnalysis.PreprocessingSymbolInfo
  yaml: api/Microsoft.CodeAnalysis.PreprocessingSymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.PreprocessingSymbolInfo
  type: Struct
- id: Microsoft.CodeAnalysis.SemanticModel
  yaml: api/Microsoft.CodeAnalysis.SemanticModel.yaml
  href: api/Microsoft.CodeAnalysis.SemanticModel
  type: Class
  summary: >+
    Allows asking semantic questions about a tree of syntax nodes in a Compilation. Typically,

    an instance is obtained by a call to GetBinding on a Compilation or Compilation.

- id: Microsoft.CodeAnalysis.SourceReferenceResolver
  yaml: api/Microsoft.CodeAnalysis.SourceReferenceResolver.yaml
  href: api/Microsoft.CodeAnalysis.SourceReferenceResolver
  type: Class
  summary: >+
    Resolves references to source documents specified in the source.

- id: Microsoft.CodeAnalysis.SpeculativeBindingOption
  yaml: api/Microsoft.CodeAnalysis.SpeculativeBindingOption.yaml
  href: api/Microsoft.CodeAnalysis.SpeculativeBindingOption
  type: Enum
  summary: >+
    Describes the kind of binding to be performed in one of the SemanticModel

    speculative binding methods.

- id: Microsoft.CodeAnalysis.SubsystemVersion
  yaml: api/Microsoft.CodeAnalysis.SubsystemVersion.yaml
  href: api/Microsoft.CodeAnalysis.SubsystemVersion
  type: Struct
  summary: >+
    Represents subsystem version, see /subsystemversion command line

    option for details and valid values.



    The following table lists common subsystem versions of Windows.



    Windows version             Subsystem version

    - Windows 2000                5.00

    - Windows XP                  5.01

    - Windows Vista               6.00

    - Windows 7                   6.01

    - Windows 8 Release Preview   6.02

- id: Microsoft.CodeAnalysis.SymbolInfo
  yaml: api/Microsoft.CodeAnalysis.SymbolInfo.yaml
  href: api/Microsoft.CodeAnalysis.SymbolInfo
  type: Struct
- id: Microsoft.CodeAnalysis.TypeInfo
  yaml: api/Microsoft.CodeAnalysis.TypeInfo.yaml
  href: api/Microsoft.CodeAnalysis.TypeInfo
  type: Struct
- id: Microsoft.CodeAnalysis.XmlReferenceResolver
  yaml: api/Microsoft.CodeAnalysis.XmlReferenceResolver.yaml
  href: api/Microsoft.CodeAnalysis.XmlReferenceResolver
  type: Class
  summary: >+
    Resolves references to XML documents specified in source code.

- id: Microsoft.CodeAnalysis.AdditionalText
  yaml: api/Microsoft.CodeAnalysis.AdditionalText.yaml
  href: api/Microsoft.CodeAnalysis.AdditionalText
  type: Class
  summary: >+
    Represents a non source code file.

- id: Microsoft.CodeAnalysis.Diagnostic
  yaml: api/Microsoft.CodeAnalysis.Diagnostic.yaml
  href: api/Microsoft.CodeAnalysis.Diagnostic
  type: Class
  summary: >+
    Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred.

- id: Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor
  yaml: api/Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor.yaml
  href: api/Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor
  type: Class
  summary: >+
    Provides a description about a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) that is a trigger for some custom behavior for code analyis clients.

- id: Microsoft.CodeAnalysis.WellKnownDiagnosticTags
  yaml: api/Microsoft.CodeAnalysis.WellKnownDiagnosticTags.yaml
  href: api/Microsoft.CodeAnalysis.WellKnownDiagnosticTags
  type: Class
- id: Microsoft.CodeAnalysis.DiagnosticDescriptor
  yaml: api/Microsoft.CodeAnalysis.DiagnosticDescriptor.yaml
  href: api/Microsoft.CodeAnalysis.DiagnosticDescriptor
  type: Class
  summary: >+
    Provides a description about a [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic)

- id: Microsoft.CodeAnalysis.DiagnosticFormatter
  yaml: api/Microsoft.CodeAnalysis.DiagnosticFormatter.yaml
  href: api/Microsoft.CodeAnalysis.DiagnosticFormatter
  type: Class
  summary: >+
    Formats [Microsoft.CodeAnalysis.Diagnostic](#/api/Microsoft.CodeAnalysis.Diagnostic) messages.

- id: Microsoft.CodeAnalysis.DiagnosticSeverity
  yaml: api/Microsoft.CodeAnalysis.DiagnosticSeverity.yaml
  href: api/Microsoft.CodeAnalysis.DiagnosticSeverity
  type: Enum
  summary: >+
    Describes how severe a diagnostic is.

- id: Microsoft.CodeAnalysis.FileLinePositionSpan
  yaml: api/Microsoft.CodeAnalysis.FileLinePositionSpan.yaml
  href: api/Microsoft.CodeAnalysis.FileLinePositionSpan
  type: Struct
  summary: >+
    Represents a span of text in a source code file in terms of file name, line number, and offset within line.

    However, the file is actually whatever was passed in when asked to parse; there may not really be a file.

- id: Microsoft.CodeAnalysis.Location
  yaml: api/Microsoft.CodeAnalysis.Location.yaml
  href: api/Microsoft.CodeAnalysis.Location
  type: Class
  summary: >+
    A program location in source code.

- id: Microsoft.CodeAnalysis.LocationKind
  yaml: api/Microsoft.CodeAnalysis.LocationKind.yaml
  href: api/Microsoft.CodeAnalysis.LocationKind
  type: Enum
  summary: >+
    Specifies the kind of location (source vs. metadata).

- id: Microsoft.CodeAnalysis.ReportDiagnostic
  yaml: api/Microsoft.CodeAnalysis.ReportDiagnostic.yaml
  href: api/Microsoft.CodeAnalysis.ReportDiagnostic
  type: Enum
  summary: >+
    Describes how to report a warning diagnostic.

- id: Microsoft.CodeAnalysis.DocumentationProvider
  yaml: api/Microsoft.CodeAnalysis.DocumentationProvider.yaml
  href: api/Microsoft.CodeAnalysis.DocumentationProvider
  type: Class
  summary: >+
    A class used to provide XML documentation to the compiler for members from metadata. A

    custom implementation of this class should be returned from a DocumentationResolver to provide XML

    documentation comments from custom caches or locations.

- id: Microsoft.CodeAnalysis.DocumentationMode
  yaml: api/Microsoft.CodeAnalysis.DocumentationMode.yaml
  href: api/Microsoft.CodeAnalysis.DocumentationMode
  type: Enum
  summary: >+
    Specifies the different documentation comment processing modes.

- id: Microsoft.CodeAnalysis.AssemblyIdentity
  yaml: api/Microsoft.CodeAnalysis.AssemblyIdentity.yaml
  href: api/Microsoft.CodeAnalysis.AssemblyIdentity
  type: Class
  summary: >+
    Represents an identity of an assembly as defined by CLI metadata specification.

- id: Microsoft.CodeAnalysis.AssemblyIdentityComparer
  yaml: api/Microsoft.CodeAnalysis.AssemblyIdentityComparer.yaml
  href: api/Microsoft.CodeAnalysis.AssemblyIdentityComparer
  type: Class
  summary: >+
    Compares assembly identities.

    Derived types may implement platform specific unification and portability policies.

- id: Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
  yaml: api/Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult.yaml
  href: api/Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult
  type: Enum
  summary: >+
    A set of possible outcomes of [Microsoft.CodeAnalysis.AssemblyIdentity](#/api/Microsoft.CodeAnalysis.AssemblyIdentity) comparison.

- id: Microsoft.CodeAnalysis.AssemblyIdentityParts
  yaml: api/Microsoft.CodeAnalysis.AssemblyIdentityParts.yaml
  href: api/Microsoft.CodeAnalysis.AssemblyIdentityParts
  type: Enum
- id: Microsoft.CodeAnalysis.AssemblyMetadata
  yaml: api/Microsoft.CodeAnalysis.AssemblyMetadata.yaml
  href: api/Microsoft.CodeAnalysis.AssemblyMetadata
  type: Class
  summary: >+
    Represents an immutable snapshot of assembly CLI metadata.

- id: Microsoft.CodeAnalysis.CompilationReference
  yaml: api/Microsoft.CodeAnalysis.CompilationReference.yaml
  href: api/Microsoft.CodeAnalysis.CompilationReference
  type: Class
  summary: >+
    Reference to another C# or VB compilation.

- id: Microsoft.CodeAnalysis.Metadata
  yaml: api/Microsoft.CodeAnalysis.Metadata.yaml
  href: api/Microsoft.CodeAnalysis.Metadata
  type: Class
  summary: >+
    Represents immutable assembly or module CLI metadata.

- id: Microsoft.CodeAnalysis.MetadataImageKind
  yaml: api/Microsoft.CodeAnalysis.MetadataImageKind.yaml
  href: api/Microsoft.CodeAnalysis.MetadataImageKind
  type: Enum
  summary: >+
    The kind of metadata a PE file image contains.

- id: Microsoft.CodeAnalysis.MetadataReference
  yaml: api/Microsoft.CodeAnalysis.MetadataReference.yaml
  href: api/Microsoft.CodeAnalysis.MetadataReference
  type: Class
  summary: >+
    Represents metadata image reference.

- id: Microsoft.CodeAnalysis.MetadataReferenceProperties
  yaml: api/Microsoft.CodeAnalysis.MetadataReferenceProperties.yaml
  href: api/Microsoft.CodeAnalysis.MetadataReferenceProperties
  type: Struct
  summary: >+
    Information about a metadata reference.

- id: Microsoft.CodeAnalysis.MetadataReferenceResolver
  yaml: api/Microsoft.CodeAnalysis.MetadataReferenceResolver.yaml
  href: api/Microsoft.CodeAnalysis.MetadataReferenceResolver
  type: Class
  summary: >+
    Resolves references to metadata specified in the source (#r directives).

- id: Microsoft.CodeAnalysis.ModuleMetadata
  yaml: api/Microsoft.CodeAnalysis.ModuleMetadata.yaml
  href: api/Microsoft.CodeAnalysis.ModuleMetadata
  type: Class
  summary: >+
    Represents an immutable snapshot of module CLI metadata.

- id: Microsoft.CodeAnalysis.PortableExecutableReference
  yaml: api/Microsoft.CodeAnalysis.PortableExecutableReference.yaml
  href: api/Microsoft.CodeAnalysis.PortableExecutableReference
  type: Class
  summary: >+
    Reference to metadata stored in the standard ECMA-335 metadata format.

- id: Microsoft.CodeAnalysis.UnresolvedMetadataReference
  yaml: api/Microsoft.CodeAnalysis.UnresolvedMetadataReference.yaml
  href: api/Microsoft.CodeAnalysis.UnresolvedMetadataReference
  type: Class
  summary: >+
    Represents a metadata reference that can't be resolved.

- id: Microsoft.CodeAnalysis.Optional`1
  yaml: api/Microsoft.CodeAnalysis.Optional`1.yaml
  href: api/Microsoft.CodeAnalysis.Optional`1
  type: Struct
  summary: >+
    Represents a value type that can be assigned null.

- id: Microsoft.CodeAnalysis.OutputKind
  yaml: api/Microsoft.CodeAnalysis.OutputKind.yaml
  href: api/Microsoft.CodeAnalysis.OutputKind
  type: Enum
  summary: >+
    Specifies output assembly knids generated by compiler.

- id: Microsoft.CodeAnalysis.ResourceDescription
  yaml: api/Microsoft.CodeAnalysis.ResourceDescription.yaml
  href: api/Microsoft.CodeAnalysis.ResourceDescription
  type: Class
  summary: >+
    Representation of a resource whose contents are to be embedded in the output assembly.

- id: Microsoft.CodeAnalysis.SourceCodeKind
  yaml: api/Microsoft.CodeAnalysis.SourceCodeKind.yaml
  href: api/Microsoft.CodeAnalysis.SourceCodeKind
  type: Enum
  summary: >+
    Specifies the C# or VB source code kind.

- id: Microsoft.CodeAnalysis.SpecialType
  yaml: api/Microsoft.CodeAnalysis.SpecialType.yaml
  href: api/Microsoft.CodeAnalysis.SpecialType
  type: Enum
  summary: >+
    Specifies the Ids of special runtime types.

- id: Microsoft.CodeAnalysis.StrongNameProvider
  yaml: api/Microsoft.CodeAnalysis.StrongNameProvider.yaml
  href: api/Microsoft.CodeAnalysis.StrongNameProvider
  type: Class
  summary: >+
    Provides strong name and signs source assemblies.

- id: Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle
  type: Enum
  summary: >+
    Specifies how to display delegates (just the name or the name with the signature).

- id: Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle
  type: Enum
  summary: >+
    Specifies how how to display extension methods.

- id: Microsoft.CodeAnalysis.SymbolDisplayExtensions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayExtensions
  type: Class
  summary: >+
    Exposes extension methods for displaying symbol descriptions.

- id: Microsoft.CodeAnalysis.SymbolDisplayFormat
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayFormat.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayFormat
  type: Class
  summary: >+
    Describes the formatting rules that should be used when displaying symbols.

- id: Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions
  type: Enum
  summary: >+
    Specifies the options for how generics are displayed in the description of a symbol.

- id: Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle
  type: Enum
  summary: >+
    Specifies the options for how to display the global namespace in the description of a symbol.

- id: Microsoft.CodeAnalysis.SymbolDisplayKindOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayKindOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayKindOptions
  type: Enum
  summary: >+
    Specifies which kind keywords should be included when displaying symbols.

- id: Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayLocalOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayLocalOptions
  type: Enum
  summary: >+
    Specifies the options for how locals are displayed in the description of a symbol.

- id: Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayMemberOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayMemberOptions
  type: Enum
  summary: >+
    Specifies the options for how members are displayed in the description of a symbol.

- id: Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions
  type: Enum
  summary: >+
    Specifies miscellaneous options about the format of symbol descriptions.

- id: Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayParameterOptions.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayParameterOptions
  type: Enum
  summary: >+
    Specifies how parameters are displayed in the description of a (member, property/indexer, or delegate) symbol.

- id: Microsoft.CodeAnalysis.SymbolDisplayPart
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayPart.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayPart
  type: Struct
  summary: >+
    A single element of a symbol description.  For example, a keyword, a punctuation character or

    a class name.

- id: Microsoft.CodeAnalysis.SymbolDisplayPartKind
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayPartKind.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayPartKind
  type: Enum
  summary: >+
    Specifies the kinds of a piece of classified text (SymbolDisplayPart).

- id: Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle
  type: Enum
  summary: >+
    Specifies the options for how properties are displayed in symbol descriptions.

- id: Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
  yaml: api/Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle.yaml
  href: api/Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle
  type: Enum
  summary: >+
    Specifies how much qualification is used in symbol descriptions.

- id: Microsoft.CodeAnalysis.Accessibility
  yaml: api/Microsoft.CodeAnalysis.Accessibility.yaml
  href: api/Microsoft.CodeAnalysis.Accessibility
  type: Enum
  summary: >+
    Enumeration for common accessibility combinations.

- id: Microsoft.CodeAnalysis.AttributeData
  yaml: api/Microsoft.CodeAnalysis.AttributeData.yaml
  href: api/Microsoft.CodeAnalysis.AttributeData
  type: Class
- id: Microsoft.CodeAnalysis.CustomModifier
  yaml: api/Microsoft.CodeAnalysis.CustomModifier.yaml
  href: api/Microsoft.CodeAnalysis.CustomModifier
  type: Class
- id: Microsoft.CodeAnalysis.IAliasSymbol
  yaml: api/Microsoft.CodeAnalysis.IAliasSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAliasSymbol
  type: Interface
  summary: >+
    Represents a using alias (Imports alias in Visual Basic).

- id: Microsoft.CodeAnalysis.IArrayTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.IArrayTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IArrayTypeSymbol
  type: Interface
  summary: >+
    Represents an array.

- id: Microsoft.CodeAnalysis.IAssemblySymbol
  yaml: api/Microsoft.CodeAnalysis.IAssemblySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IAssemblySymbol
  type: Interface
  summary: >+
    Represents a .NET assembly, consisting of one or more modules.

- id: Microsoft.CodeAnalysis.IDynamicTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.IDynamicTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IDynamicTypeSymbol
  type: Interface
  summary: >+
    Represents the 'dynamic' type in C#.

- id: Microsoft.CodeAnalysis.IErrorTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.IErrorTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IErrorTypeSymbol
  type: Interface
  summary: >+
    An IErrorTypeSymbol is used when the compiler cannot determine a symbol object to return because

    of an error. For example, if a field is declared "Foo x;", and the type "Foo" cannot be

    found, an IErrorTypeSymbol is returned when asking the field "x" what it's type is.

- id: Microsoft.CodeAnalysis.IEventSymbol
  yaml: api/Microsoft.CodeAnalysis.IEventSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IEventSymbol
  type: Interface
  summary: >+
    Represents an event.

- id: Microsoft.CodeAnalysis.IFieldSymbol
  yaml: api/Microsoft.CodeAnalysis.IFieldSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IFieldSymbol
  type: Interface
  summary: >+
    Represents a field in a class, struct or enum.

- id: Microsoft.CodeAnalysis.ILabelSymbol
  yaml: api/Microsoft.CodeAnalysis.ILabelSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ILabelSymbol
  type: Interface
  summary: >+
    Represents a label in method body

- id: Microsoft.CodeAnalysis.ILocalSymbol
  yaml: api/Microsoft.CodeAnalysis.ILocalSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ILocalSymbol
  type: Interface
  summary: >+
    Represents a local variable in method body.

- id: Microsoft.CodeAnalysis.IMethodSymbol
  yaml: api/Microsoft.CodeAnalysis.IMethodSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IMethodSymbol
  type: Interface
  summary: >+
    Represents a method or method-like symbol (including constructor,

    destructor, operator, or property/event accessor).

- id: Microsoft.CodeAnalysis.IModuleSymbol
  yaml: api/Microsoft.CodeAnalysis.IModuleSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IModuleSymbol
  type: Interface
  summary: >+
    Represents a module within an assembly. Every assembly contains one or more modules.

- id: Microsoft.CodeAnalysis.INamedTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.INamedTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamedTypeSymbol
  type: Interface
  summary: >+
    Represents a type other than an array, a pointer, a type parameter.

- id: Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
  type: Interface
  summary: >+
    Represents either a namespace or a type.

- id: Microsoft.CodeAnalysis.INamespaceSymbol
  yaml: api/Microsoft.CodeAnalysis.INamespaceSymbol.yaml
  href: api/Microsoft.CodeAnalysis.INamespaceSymbol
  type: Interface
  summary: >+
    Represents a namespace.

- id: Microsoft.CodeAnalysis.IParameterSymbol
  yaml: api/Microsoft.CodeAnalysis.IParameterSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IParameterSymbol
  type: Interface
  summary: >+
    Represents a parameter of a method or property.

- id: Microsoft.CodeAnalysis.IPointerTypeSymbol
  yaml: api/Microsoft.CodeAnalysis.IPointerTypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IPointerTypeSymbol
  type: Interface
  summary: >+
    Represents a pointer type such as "int *". Pointer types

    are used only in unsafe code.

- id: Microsoft.CodeAnalysis.IPreprocessingSymbol
  yaml: api/Microsoft.CodeAnalysis.IPreprocessingSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IPreprocessingSymbol
  type: Interface
  summary: >+
    Represents a preprocessing conditional compilation symbol.

- id: Microsoft.CodeAnalysis.IPropertySymbol
  yaml: api/Microsoft.CodeAnalysis.IPropertySymbol.yaml
  href: api/Microsoft.CodeAnalysis.IPropertySymbol
  type: Interface
  summary: >+
    Represents a property or indexer.

- id: Microsoft.CodeAnalysis.IRangeVariableSymbol
  yaml: api/Microsoft.CodeAnalysis.IRangeVariableSymbol.yaml
  href: api/Microsoft.CodeAnalysis.IRangeVariableSymbol
  type: Interface
  summary: >+
    Represents a range variable in a query expression.

- id: Microsoft.CodeAnalysis.ISymbol
  yaml: api/Microsoft.CodeAnalysis.ISymbol.yaml
  href: api/Microsoft.CodeAnalysis.ISymbol
  type: Interface
  summary: >+
    Represents a symbol (namespace, class, method, parameter, etc.)

    exposed by the compiler.

- id: Microsoft.CodeAnalysis.ISymbolExtensions
  yaml: api/Microsoft.CodeAnalysis.ISymbolExtensions.yaml
  href: api/Microsoft.CodeAnalysis.ISymbolExtensions
  type: Class
- id: Microsoft.CodeAnalysis.ITypeParameterSymbol
  yaml: api/Microsoft.CodeAnalysis.ITypeParameterSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeParameterSymbol
  type: Interface
  summary: >+
    Represents a type parameter in a generic type or generic method.

- id: Microsoft.CodeAnalysis.ITypeSymbol
  yaml: api/Microsoft.CodeAnalysis.ITypeSymbol.yaml
  href: api/Microsoft.CodeAnalysis.ITypeSymbol
  type: Interface
- id: Microsoft.CodeAnalysis.LanguageNames
  yaml: api/Microsoft.CodeAnalysis.LanguageNames.yaml
  href: api/Microsoft.CodeAnalysis.LanguageNames
  type: Class
  summary: >+
    A class that provides constants for common language names.

- id: Microsoft.CodeAnalysis.MethodKind
  yaml: api/Microsoft.CodeAnalysis.MethodKind.yaml
  href: api/Microsoft.CodeAnalysis.MethodKind
  type: Enum
  summary: >+
    Enumeration for possible kinds of method symbols.

- id: Microsoft.CodeAnalysis.NamespaceKind
  yaml: api/Microsoft.CodeAnalysis.NamespaceKind.yaml
  href: api/Microsoft.CodeAnalysis.NamespaceKind
  type: Enum
  summary: >+
    Describes the kind of the namespace extent.

- id: Microsoft.CodeAnalysis.DllImportData
  yaml: api/Microsoft.CodeAnalysis.DllImportData.yaml
  href: api/Microsoft.CodeAnalysis.DllImportData
  type: Class
  summary: >+
    Information that describes how a method from the underlying Platform is to be invoked.

- id: Microsoft.CodeAnalysis.RefKind
  yaml: api/Microsoft.CodeAnalysis.RefKind.yaml
  href: api/Microsoft.CodeAnalysis.RefKind
  type: Enum
  summary: >+
    Denotes the kind of reference parameter.

- id: Microsoft.CodeAnalysis.SymbolKind
  yaml: api/Microsoft.CodeAnalysis.SymbolKind.yaml
  href: api/Microsoft.CodeAnalysis.SymbolKind
  type: Enum
  summary: >+
    Specifies the possible kinds of symbols.

- id: Microsoft.CodeAnalysis.SymbolVisitor
  yaml: api/Microsoft.CodeAnalysis.SymbolVisitor.yaml
  href: api/Microsoft.CodeAnalysis.SymbolVisitor
  type: Class
- id: Microsoft.CodeAnalysis.SymbolVisitor`1
  yaml: api/Microsoft.CodeAnalysis.SymbolVisitor`1.yaml
  href: api/Microsoft.CodeAnalysis.SymbolVisitor`1
  type: Class
- id: Microsoft.CodeAnalysis.TypedConstant
  yaml: api/Microsoft.CodeAnalysis.TypedConstant.yaml
  href: api/Microsoft.CodeAnalysis.TypedConstant
  type: Struct
  summary: >+
    Represents a constant value used as an argument to a custom attribute.

- id: Microsoft.CodeAnalysis.TypedConstantKind
  yaml: api/Microsoft.CodeAnalysis.TypedConstantKind.yaml
  href: api/Microsoft.CodeAnalysis.TypedConstantKind
  type: Enum
  summary: >+
    Represents the kind of a TypedConstant.

- id: Microsoft.CodeAnalysis.TypeKind
  yaml: api/Microsoft.CodeAnalysis.TypeKind.yaml
  href: api/Microsoft.CodeAnalysis.TypeKind
  type: Enum
  summary: >+
    Enumeration for possible kinds of type symbols.

- id: Microsoft.CodeAnalysis.TypeParameterKind
  yaml: api/Microsoft.CodeAnalysis.TypeParameterKind.yaml
  href: api/Microsoft.CodeAnalysis.TypeParameterKind
  type: Enum
  summary: >+
    Represents the different kinds of type parameters.

- id: Microsoft.CodeAnalysis.VarianceKind
  yaml: api/Microsoft.CodeAnalysis.VarianceKind.yaml
  href: api/Microsoft.CodeAnalysis.VarianceKind
  type: Enum
  summary: >+
    An enumeration declaring the kinds of variance supported for generic type parameters.

- id: Microsoft.CodeAnalysis.WellKnownMemberNames
  yaml: api/Microsoft.CodeAnalysis.WellKnownMemberNames.yaml
  href: api/Microsoft.CodeAnalysis.WellKnownMemberNames
  type: Class
  summary: >+
    Specifies the member names known to the compiler (such as .ctor or op_Explicit).

- id: Microsoft.CodeAnalysis.AnnotationExtensions
  yaml: api/Microsoft.CodeAnalysis.AnnotationExtensions.yaml
  href: api/Microsoft.CodeAnalysis.AnnotationExtensions
  type: Class
- id: Microsoft.CodeAnalysis.ChildSyntaxList
  yaml: api/Microsoft.CodeAnalysis.ChildSyntaxList.yaml
  href: api/Microsoft.CodeAnalysis.ChildSyntaxList
  type: Struct
- id: Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator
  yaml: api/Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator
  type: Struct
  summary: >+
    Enumerates the elements of a [Microsoft.CodeAnalysis.ChildSyntaxList](#/api/Microsoft.CodeAnalysis.ChildSyntaxList).

- id: Microsoft.CodeAnalysis.ChildSyntaxList.Reversed
  yaml: api/Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.yaml
  href: api/Microsoft.CodeAnalysis.ChildSyntaxList.Reversed
  type: Struct
- id: Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator
  yaml: api/Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.IStructuredTriviaSyntax
  yaml: api/Microsoft.CodeAnalysis.IStructuredTriviaSyntax.yaml
  href: api/Microsoft.CodeAnalysis.IStructuredTriviaSyntax
  type: Interface
  summary: >+
    Represents the root node of a structured trivia tree (for example, a preprocessor directive

    or a documentation comment). From this root node you can traverse back up to the containing

    trivia in the outer tree that contains it.

- id: Microsoft.CodeAnalysis.LineVisibility
  yaml: api/Microsoft.CodeAnalysis.LineVisibility.yaml
  href: api/Microsoft.CodeAnalysis.LineVisibility
  type: Enum
  summary: >+
    The state of the visibility of a line.

- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1
  type: Struct
- id: Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.SyntaxAnnotation
  yaml: api/Microsoft.CodeAnalysis.SyntaxAnnotation.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxAnnotation
  type: Class
  summary: >+
    A SynatxAnnotation is used to annotate syntax elements with additional information.



    Since syntax elements are immutable, annotating them requires creating new instances of them

    with the annotations attached.

- id: Microsoft.CodeAnalysis.SyntaxList`1
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1
  type: Struct
  summary: >+
    A list of [Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode).

- id: Microsoft.CodeAnalysis.SyntaxList`1.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxList`1.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxList`1.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.SyntaxNode
  yaml: api/Microsoft.CodeAnalysis.SyntaxNode.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNode
  type: Class
  summary: >+
    Represents a non-terminal node in the syntax tree. This is the language agnostic equivalent of [Microsoft.CodeAnalysis.CSharp.SyntaxNode](#) and [Microsoft.CodeAnalysis.VisualBasic.SyntaxNode](#).

- id: Microsoft.CodeAnalysis.SyntaxNodeExtensions
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeExtensions
  type: Class
- id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrToken
  type: Struct
  summary: >+
    A wrapper for either a syntax node ([Microsoft.CodeAnalysis.SyntaxNode](#/api/Microsoft.CodeAnalysis.SyntaxNode)) or a syntax token ([Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken)).

- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  type: Struct
  summary: >+
    A list of [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#/api/Microsoft.CodeAnalysis.SyntaxNodeOrToken) structures.

- id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator
  type: Struct
  summary: >+
    Enumerator for lists of SyntaxNodeOrToken structs.

- id: Microsoft.CodeAnalysis.SyntaxReference
  yaml: api/Microsoft.CodeAnalysis.SyntaxReference.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxReference
  type: Class
  summary: >+
    A reference to a syntax node.

- id: Microsoft.CodeAnalysis.SyntaxRemoveOptions
  yaml: api/Microsoft.CodeAnalysis.SyntaxRemoveOptions.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxRemoveOptions
  type: Enum
- id: Microsoft.CodeAnalysis.SyntaxToken
  yaml: api/Microsoft.CodeAnalysis.SyntaxToken.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxToken
  type: Struct
  summary: >+
    Represents a token in the syntax tree. This is the language agnostic equivalent of [Microsoft.CodeAnalysis.CSharp.SyntaxToken](#) and [Microsoft.CodeAnalysis.VisualBasic.SyntaxToken](#).

- id: Microsoft.CodeAnalysis.SyntaxTokenList
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList
  type: Struct
  summary: >+
    Represents a read-only list of [Microsoft.CodeAnalysis.SyntaxToken](#/api/Microsoft.CodeAnalysis.SyntaxToken).

- id: Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator
  type: Struct
  summary: >+
    A structure for enumerating a [Microsoft.CodeAnalysis.SyntaxTokenList](#/api/Microsoft.CodeAnalysis.SyntaxTokenList)

- id: Microsoft.CodeAnalysis.SyntaxTokenList.Reversed
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList.Reversed
  type: Struct
  summary: >+
    reversed enumerable

- id: Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.SyntaxTree
  yaml: api/Microsoft.CodeAnalysis.SyntaxTree.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTree
  type: Class
  summary: >+
    The parsed representation of a source document.

- id: Microsoft.CodeAnalysis.SyntaxTrivia
  yaml: api/Microsoft.CodeAnalysis.SyntaxTrivia.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTrivia
  type: Struct
  summary: >+
    Represents a trivia in the syntax tree. This is the language agnostic equivalent of [Microsoft.CodeAnalysis.CSharp.SyntaxTrivia](#) and [Microsoft.CodeAnalysis.VisualBasic.SyntaxTrivia](#).

- id: Microsoft.CodeAnalysis.SyntaxTriviaList
  yaml: api/Microsoft.CodeAnalysis.SyntaxTriviaList.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTriviaList
  type: Struct
  summary: >+
    Represents a read-only list of [Microsoft.CodeAnalysis.SyntaxTrivia](#/api/Microsoft.CodeAnalysis.SyntaxTrivia).

- id: Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed
  yaml: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed
  type: Struct
  summary: >+
    reversed enumerable

- id: Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator
  yaml: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator
  type: Struct
- id: Microsoft.CodeAnalysis.SyntaxWalker
  yaml: api/Microsoft.CodeAnalysis.SyntaxWalker.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxWalker
  type: Class
  summary: >+
    Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia.  The

    walker will perform a depth first walk of the tree.

- id: Microsoft.CodeAnalysis.SyntaxWalkerDepth
  yaml: api/Microsoft.CodeAnalysis.SyntaxWalkerDepth.yaml
  href: api/Microsoft.CodeAnalysis.SyntaxWalkerDepth
  type: Enum
  summary: >+
    enum to specify how deep walker should decent into

