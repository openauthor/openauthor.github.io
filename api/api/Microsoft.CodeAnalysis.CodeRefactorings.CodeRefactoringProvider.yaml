id: Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider
href: api/Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.yaml
name:
  CSharp: CodeRefactoringProvider
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-3-g8c49d3e
  path: src/Workspaces/Core/Portable/CodeRefactorings/CodeRefactoringProvider.cs
  startLine: 10
summary: >-
  Inherit this type to provide source code refactorings.

  Remember to use [Microsoft.CodeAnalysis.CodeRefactorings.ExportCodeRefactoringProviderAttribute](#/) so the host environment can offer your refactorings in a UI.
syntax:
  content:
    CSharp: public abstract class CodeRefactoringProvider
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)
  href: api/Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.yaml
  name:
    CSharp: ComputeRefactoringsAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/CodeRefactorings/CodeRefactoringProvider.cs
    startLine: 15
  summary: Computes one or more refactorings for the specified [Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext](#/).
  syntax:
    content:
      CSharp: public abstract Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    parameters:
    - id: context
      type:
        id: Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext
        name: CodeRefactoringContext
    return:
      id: Task
