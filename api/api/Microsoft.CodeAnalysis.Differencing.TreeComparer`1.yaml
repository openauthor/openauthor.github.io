id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1
href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yaml
name:
  CSharp: TreeComparer`1
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Differencing.TreeComparer`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-6-g1d967e8
  path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
  startLine: 21
summary: Implements a tree differencing algorithm.
syntax:
  content:
    CSharp: public abstract class TreeComparer<TNode>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yaml
  name:
    CSharp: ComputeEditScript
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 30
  summary: Returns an edit script that transforms  to .
  syntax:
    content:
      CSharp: public EditScript<TNode> ComputeEditScript(TNode oldRoot, TNode newRoot)
    parameters:
    - id: oldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: EditScript
- id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yaml
  name:
    CSharp: ComputeMatch
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 38
  summary: Returns a match map of  descendants to  descendants.
  syntax:
    content:
      CSharp: public Match<TNode> ComputeMatch(TNode oldRoot, TNode newRoot, IEnumerable<KeyValuePair<TNode, TNode>> knownMatches = null)
    parameters:
    - id: oldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: knownMatches
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}}
        isExternal: true
    return:
      id: Match
- id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yaml
  name:
    CSharp: GetDistance
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 52
  summary: Calculates the distance [0..1] of two nodes.
  syntax:
    content:
      CSharp: public abstract double GetDistance(TNode oldNode, TNode newNode);
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Double
- id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yaml
  name:
    CSharp: ValuesEqual
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 61
  summary: Returns true if the specified nodes have equal values.
  syntax:
    content:
      CSharp: public abstract bool ValuesEqual(TNode oldNode, TNode newNode);
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
