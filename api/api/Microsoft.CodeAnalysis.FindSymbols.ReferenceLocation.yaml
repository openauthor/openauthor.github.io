id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
name:
  CSharp: ReferenceLocation
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
type: Struct
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-6-g1d967e8
  path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
  startLine: 12
summary: Information about a reference to a symbol.
syntax:
  content:
    CSharp: public struct ReferenceLocation
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Document
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: Document
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Document
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 18
  summary: The document that the reference was found in.
  syntax:
    content:
      CSharp: public Document Document { get; private set; }
    parameters:
    - id: Document
      type:
        id: Microsoft.CodeAnalysis.Document
        name: Document
        href: Microsoft.CodeAnalysis.Document.yaml
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Alias
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: Alias
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Alias
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 23
  summary: If the symbol was bound through an alias, then this is the alias that was used.
  syntax:
    content:
      CSharp: public IAliasSymbol Alias { get; private set; }
    parameters:
    - id: Alias
      type:
        id: Microsoft.CodeAnalysis.IAliasSymbol
        name: IAliasSymbol
        href: Microsoft.CodeAnalysis.IAliasSymbol
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Location
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: Location
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Location
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 28
  summary: The actual source location for a given symbol.
  syntax:
    content:
      CSharp: public Location Location { get; private set; }
    parameters:
    - id: Location
      type:
        id: Microsoft.CodeAnalysis.Location
        name: Location
        href: Microsoft.CodeAnalysis.Location
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsImplicit
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: IsImplicit
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsImplicit
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 36
  summary: >-
    Indicates if this is an implicit reference to the definition.  i.e. the definition wasn't

    explicitly stated in the source code at this position, but it was still referenced. For

    example, this can happen with special methods like GetEnumerator that are used

    implicitly by a 'for each' statement.
  syntax:
    content:
      CSharp: public bool IsImplicit { get; private set; }
    parameters:
    - id: IsImplicit
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CandidateReason
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: CandidateReason
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CandidateReason
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 38
  syntax:
    content:
      CSharp: public CandidateReason CandidateReason { get; private set; }
    parameters:
    - id: CandidateReason
      type:
        id: Microsoft.CodeAnalysis.CandidateReason
        name: CandidateReason
        href: Microsoft.CodeAnalysis.CandidateReason
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsCandidateLocation
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: IsCandidateLocation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.IsCandidateLocation
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 56
  summary: >-
    Indicates if this was not an exact reference to a location, but was instead a possible

    location that was found through error tolerance.  For example, a call to a method like

    "Foo()" could show up as an error tolerance location to a method "Foo(int i)" if no

    actual "Foo()" method existed.
  syntax:
    content:
      CSharp: public bool IsCandidateLocation { get; }
    parameters:
    - id: IsCandidateLocation
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.op_Equality(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation,Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.op_Equality(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation,Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 64
  syntax:
    content:
      CSharp: public static bool operator ==(ReferenceLocation left, ReferenceLocation right) { return left.Equals(right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.op_Inequality(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation,Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.op_Inequality(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation,Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 69
  syntax:
    content:
      CSharp: public static bool operator !=(ReferenceLocation left, ReferenceLocation right) { return !(left == right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(System.Object)
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 74
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.Equals(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 80
  syntax:
    content:
      CSharp: public bool Equals(ReferenceLocation other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.GetHashCode
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.GetHashCode
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 90
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CompareTo(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
  name:
    CSharp: CompareTo
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.CompareTo(Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/ReferenceLocation.cs
    startLine: 99
  syntax:
    content:
      CSharp: public int CompareTo(ReferenceLocation other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation
        name: ReferenceLocation
        href: Microsoft.CodeAnalysis.FindSymbols.ReferenceLocation.yaml
    return:
      id: Int32
