id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices
href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
name:
  CSharp: MefHostServices
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-3-g8c49d3e
  path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
  startLine: 14
syntax:
  content:
    CSharp: public class MefHostServices
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: Microsoft.CodeAnalysis.Host.HostServices
  name: HostServices
items:
- id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.#ctor(System.Composition.CompositionContext)
  href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
  name:
    CSharp: MefHostServices(System.Composition.CompositionContext)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.MefHostServices(System.Composition.CompositionContext)
  type: Constructor
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
    startLine: 18
  syntax:
    content:
      CSharp: public MefHostServices(CompositionContext compositionContext)
    parameters:
    - id: compositionContext
      type:
        id: System.Composition.CompositionContext
        name: System.Composition.CompositionContext
        isExternal: true
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Composition.CompositionContext)
  href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Composition.CompositionContext)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
    startLine: 23
  syntax:
    content:
      CSharp: public static MefHostServices Create(CompositionContext compositionContext)
    parameters:
    - id: compositionContext
      type:
        id: System.Composition.CompositionContext
        name: System.Composition.CompositionContext
        isExternal: true
    return:
      id: MefHostServices
- id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
  name:
    CSharp: Create
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
    startLine: 33
  syntax:
    content:
      CSharp: public static MefHostServices Create(IEnumerable<System.Reflection.Assembly> assemblies)
    parameters:
    - id: assemblies
      type:
        id: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
        name: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
        isExternal: true
    return:
      id: MefHostServices
- id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultHost
  href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
  name:
    CSharp: DefaultHost
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultHost
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
    startLine: 71
  syntax:
    content:
      CSharp: >-
        public static MefHostServices DefaultHost

                {

                    get

                    {

                        if (s_defaultHost == null)

                        {

                            var host = MefHostServices.Create(MefHostServices.DefaultAssemblies);

                            Interlocked.CompareExchange(ref s_defaultHost, host, null);

                        }



                        return s_defaultHost;

                    }

                }
    parameters:
    - id: DefaultHost
      type:
        id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices
        name: MefHostServices
- id: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultAssemblies
  href: api/Microsoft.CodeAnalysis.Host.Mef.MefHostServices.yaml
  name:
    CSharp: DefaultAssemblies
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.Mef.MefHostServices.DefaultAssemblies
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/Mef/MefHostServices.cs
    startLine: 86
  syntax:
    content:
      CSharp: >-
        public static ImmutableArray<Assembly> DefaultAssemblies

                {

                    get

                    {

                        if (s_defaultAssemblies.IsDefault)

                        {

                            ImmutableInterlocked.InterlockedInitialize(ref s_defaultAssemblies, LoadDefaultAssemblies());

                        }



                        return s_defaultAssemblies;

                    }

                }
    parameters:
    - id: DefaultAssemblies
      type:
        id: System.Collections.Immutable.ImmutableArray{System.Reflection.Assembly}
        name: System.Collections.Immutable.ImmutableArray{System.Reflection.Assembly}
        isExternal: true
