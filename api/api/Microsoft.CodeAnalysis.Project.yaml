id: Microsoft.CodeAnalysis.Project
href: Microsoft.CodeAnalysis.Project.yaml
name:
  CSharp: Project
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Project
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-7-g78a2708
  path: src/Workspaces/Core/Portable/Workspace/Solution/Project.EquivalenceResult.cs
  startLine: 6
summary: Represents a project that is part of a [Microsoft.CodeAnalysis.Project.Solution](Microsoft.CodeAnalysis.Project.yaml).
syntax:
  content:
    CSharp: public partial class Project
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Project.Solution
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Solution
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Solution
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 45
  summary: The solution this project is part of.
  syntax:
    content:
      CSharp: public Solution Solution { get; }
    parameters:
    - id: Solution
      type:
        id: Microsoft.CodeAnalysis.Solution
        name: Solution
        href: Microsoft.CodeAnalysis.Solution.yaml
- id: Microsoft.CodeAnalysis.Project.Id
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Id
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Id
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 57
  summary: >-
    The ID of the project. Multiple [Microsoft.CodeAnalysis.Project](Microsoft.CodeAnalysis.Project.yaml) instances may share the same ID. However, only

    one project may have this ID in any given solution.
  syntax:
    content:
      CSharp: public ProjectId Id { get; }
    parameters:
    - id: Id
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
- id: Microsoft.CodeAnalysis.Project.FilePath
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: FilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.FilePath
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 68
  summary: The path to the project file or null if there is no project file.
  syntax:
    content:
      CSharp: public string FilePath { get; }
    parameters:
    - id: FilePath
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.OutputFilePath
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: OutputFilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.OutputFilePath
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 79
  summary: The path to the output file, or null if it is not known.
  syntax:
    content:
      CSharp: public string OutputFilePath { get; }
    parameters:
    - id: OutputFilePath
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.SupportsCompilation
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: SupportsCompilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.SupportsCompilation
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 93
  summary: >-
    true if this [Microsoft.CodeAnalysis.Project](Microsoft.CodeAnalysis.Project.yaml) supports providing data through the

    [Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)](Microsoft.CodeAnalysis.Project.yaml) method.



    If false then this method will return null instead.
  syntax:
    content:
      CSharp: public bool SupportsCompilation { get; }
    parameters:
    - id: SupportsCompilation
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.LanguageServices
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: LanguageServices
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.LanguageServices
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 104
  summary: The language services from the host environment associated with this project's language.
  syntax:
    content:
      CSharp: public HostLanguageServices LanguageServices { get; }
    parameters:
    - id: LanguageServices
      type:
        id: Microsoft.CodeAnalysis.Host.HostLanguageServices
        name: HostLanguageServices
        href: Microsoft.CodeAnalysis.Host.HostLanguageServices.yaml
- id: Microsoft.CodeAnalysis.Project.Language
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Language
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Language
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 112
  summary: The language associated with the project.
  syntax:
    content:
      CSharp: public string Language { get; }
    parameters:
    - id: Language
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AssemblyName
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AssemblyName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AssemblyName
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 123
  summary: The name of the assembly this project represents.
  syntax:
    content:
      CSharp: public string AssemblyName { get; }
    parameters:
    - id: AssemblyName
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.Name
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Name
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Name
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 134
  summary: The name of the project. This may be different than the assembly name.
  syntax:
    content:
      CSharp: public string Name { get; }
    parameters:
    - id: Name
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.MetadataReferences
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: MetadataReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.MetadataReferences
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 145
  summary: The list of all other metadata sources (assemblies) that this project references.
  syntax:
    content:
      CSharp: public IReadOnlyList<MetadataReference> MetadataReferences { get; }
    parameters:
    - id: MetadataReferences
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.MetadataReference}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.MetadataReference}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.ProjectReferences
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: ProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.ProjectReferences
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 156
  summary: The list of all other projects within the same solution that this project references.
  syntax:
    content:
      CSharp: public IEnumerable<ProjectReference> ProjectReferences { get; }
    parameters:
    - id: ProjectReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AllProjectReferences
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AllProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AllProjectReferences
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 168
  summary: >-
    The list of all other projects that this project references, including projects that

    are not part of the solution.
  syntax:
    content:
      CSharp: public IReadOnlyList<ProjectReference> AllProjectReferences { get; }
    parameters:
    - id: AllProjectReferences
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AnalyzerReferences
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AnalyzerReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AnalyzerReferences
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 179
  summary: The list of all the diagnostic analyzer references for this project.
  syntax:
    content:
      CSharp: public IReadOnlyList<AnalyzerReference> AnalyzerReferences { get; }
    parameters:
    - id: AnalyzerReferences
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AnalyzerOptions
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AnalyzerOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AnalyzerOptions
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 190
  summary: The options used by analyzers for this project.
  syntax:
    content:
      CSharp: public AnalyzerOptions AnalyzerOptions { get; }
    parameters:
    - id: AnalyzerOptions
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
        name: AnalyzerOptions
        href: Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions
- id: Microsoft.CodeAnalysis.Project.CompilationOptions
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: CompilationOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.CompilationOptions
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 201
  summary: The options used when building the compilation for this project.
  syntax:
    content:
      CSharp: public CompilationOptions CompilationOptions { get; }
    parameters:
    - id: CompilationOptions
      type:
        id: Microsoft.CodeAnalysis.CompilationOptions
        name: CompilationOptions
        href: Microsoft.CodeAnalysis.CompilationOptions
- id: Microsoft.CodeAnalysis.Project.ParseOptions
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: ParseOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.ParseOptions
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 212
  summary: The options used when parsing documents for this project.
  syntax:
    content:
      CSharp: public ParseOptions ParseOptions { get; }
    parameters:
    - id: ParseOptions
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
- id: Microsoft.CodeAnalysis.Project.IsSubmission
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: IsSubmission
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.IsSubmission
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 223
  summary: Returns true if this is a submission project.
  syntax:
    content:
      CSharp: public bool IsSubmission { get; }
    parameters:
    - id: IsSubmission
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.HasDocuments
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: HasDocuments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.HasDocuments
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 234
  summary: True if the project has any documents.
  syntax:
    content:
      CSharp: public bool HasDocuments { get; }
    parameters:
    - id: HasDocuments
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.DocumentIds
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: DocumentIds
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.DocumentIds
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 245
  summary: All the document IDs associated with this project.
  syntax:
    content:
      CSharp: public IReadOnlyList<DocumentId> DocumentIds { get; }
    parameters:
    - id: DocumentIds
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.DocumentId}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.DocumentId}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AdditionalDocumentIds
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AdditionalDocumentIds
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AdditionalDocumentIds
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 256
  summary: All the additional document IDs associated with this project.
  syntax:
    content:
      CSharp: public IReadOnlyList<DocumentId> AdditionalDocumentIds { get; }
    parameters:
    - id: AdditionalDocumentIds
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.DocumentId}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.DocumentId}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.Documents
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Documents
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Documents
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 267
  summary: All the documents associated with this project.
  syntax:
    content:
      CSharp: public IEnumerable<Document> Documents { get; }
    parameters:
    - id: Documents
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Document}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Document}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.AdditionalDocuments
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AdditionalDocuments
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AdditionalDocuments
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 275
  syntax:
    content:
      CSharp: public IEnumerable<TextDocument> AdditionalDocuments { get; }
    parameters:
    - id: AdditionalDocuments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.TextDocument}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.TextDocument}
        isExternal: true
- id: Microsoft.CodeAnalysis.Project.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: ContainsDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 286
  summary: True if the project contains a document with the specified ID.
  syntax:
    content:
      CSharp: public bool ContainsDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Project.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: ContainsAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 294
  summary: True if the project contains an additional document with the specified ID.
  syntax:
    content:
      CSharp: public bool ContainsAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Project.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetDocumentId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 302
  summary: Get the documentId in this project with the specified syntax tree.
  syntax:
    content:
      CSharp: public DocumentId GetDocumentId(SyntaxTree syntaxTree)
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: DocumentId
- id: Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 310
  summary: Get the document in this project with the specified syntax tree.
  syntax:
    content:
      CSharp: public Document GetDocument(SyntaxTree syntaxTree)
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 318
  summary: Get the document in this project with the specified document Id.
  syntax:
    content:
      CSharp: public Document GetDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Project.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 331
  summary: Get the additional document in this project with the specified document Id.
  syntax:
    content:
      CSharp: public TextDocument GetAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: TextDocument
- id: Microsoft.CodeAnalysis.Project.TryGetCompilation(Microsoft.CodeAnalysis.Compilation@)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: TryGetCompilation
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.TryGetCompilation(Microsoft.CodeAnalysis.Compilation@)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 376
  summary: Get the [Microsoft.CodeAnalysis.Compilation](#) for this project if it is available.
  syntax:
    content:
      CSharp: public bool TryGetCompilation(out Compilation compilation)
    parameters:
    - id: compilation
      type:
        id: Microsoft.CodeAnalysis.Compilation
        name: Compilation
        href: Microsoft.CodeAnalysis.Compilation
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetCompilationAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetCompilationAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 384
  summary: Get the [Microsoft.CodeAnalysis.Compilation](#) for this project asynchronously.
  syntax:
    content:
      CSharp: public Task<Compilation> GetCompilationAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Project.GetChanges(Microsoft.CodeAnalysis.Project)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetChanges
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetChanges(Microsoft.CodeAnalysis.Project)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 392
  summary: Gets an object that lists the added, changed and removed documents between this project and the specified project.
  syntax:
    content:
      CSharp: public ProjectChanges GetChanges(Project oldProject)
    parameters:
    - id: oldProject
      type:
        id: Microsoft.CodeAnalysis.Project
        name: Project
        href: Microsoft.CodeAnalysis.Project.yaml
    return:
      id: ProjectChanges
- id: Microsoft.CodeAnalysis.Project.Version
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: Version
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.Version
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 413
  summary: The project version. This equates to the version of the project file.
  syntax:
    content:
      CSharp: public VersionStamp Version { get; }
    parameters:
    - id: Version
      type:
        id: Microsoft.CodeAnalysis.VersionStamp
        name: VersionStamp
        href: Microsoft.CodeAnalysis.VersionStamp.yaml
- id: Microsoft.CodeAnalysis.Project.GetLatestDocumentVersionAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetLatestDocumentVersionAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetLatestDocumentVersionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 424
  summary: The version of the most recently modified document.
  syntax:
    content:
      CSharp: public Task<VersionStamp> GetLatestDocumentVersionAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetDependentVersionAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 432
  summary: The most recent version of the project, its documents and all dependent projects and documents.
  syntax:
    content:
      CSharp: public Task<VersionStamp> GetDependentVersionAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetDependentSemanticVersionAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 441
  summary: >-
    The semantic version of this project including the semantics of referenced projects.

    This version changes whenever the consumable declarations of this project and/or projects it depends on change.
  syntax:
    content:
      CSharp: public Task<VersionStamp> GetDependentSemanticVersionAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Project.GetSemanticVersionAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: GetSemanticVersionAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.GetSemanticVersionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 450
  summary: >-
    The semantic version of this project not including the semantics of referenced projects.

    This version changes only when the consumable declarations of this project change.
  syntax:
    content:
      CSharp: public async Task<VersionStamp> GetSemanticVersionAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Project.WithAssemblyName(System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithAssemblyName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithAssemblyName(System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 460
  summary: Creates a new instance of this project updated to have the new assembly name.
  syntax:
    content:
      CSharp: public Project WithAssemblyName(string assemblyName)
    parameters:
    - id: assemblyName
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.WithCompilationOptions(Microsoft.CodeAnalysis.CompilationOptions)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithCompilationOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithCompilationOptions(Microsoft.CodeAnalysis.CompilationOptions)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 468
  summary: Creates a new instance of this project updated to have the specified compilation options.
  syntax:
    content:
      CSharp: public Project WithCompilationOptions(CompilationOptions options)
    parameters:
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CompilationOptions
        name: CompilationOptions
        href: Microsoft.CodeAnalysis.CompilationOptions
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.WithParseOptions(Microsoft.CodeAnalysis.ParseOptions)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithParseOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithParseOptions(Microsoft.CodeAnalysis.ParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 476
  summary: Creates a new instance of this project updated to have the specified parse options.
  syntax:
    content:
      CSharp: public Project WithParseOptions(ParseOptions options)
    parameters:
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddProjectReference(Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddProjectReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddProjectReference(Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 485
  summary: >-
    Creates a new instance of this project updated to include the specified project reference

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddProjectReference(ProjectReference projectReference)
    parameters:
    - id: projectReference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yaml
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 494
  summary: >-
    Creates a new instance of this project updated to include the specified project references

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddProjectReferences(IEnumerable<ProjectReference> projectReferences)
    parameters:
    - id: projectReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: RemoveProjectReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 502
  summary: Creates a new instance of this project updated to no longer include the specified project reference.
  syntax:
    content:
      CSharp: public Project RemoveProjectReference(ProjectReference projectReference)
    parameters:
    - id: projectReference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yaml
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.WithProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithProjectReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 511
  summary: >-
    Creates a new instance of this project updated to replace existing project references

    with the specified ones.
  syntax:
    content:
      CSharp: public Project WithProjectReferences(IEnumerable<ProjectReference> projectReferences)
    parameters:
    - id: projectReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddMetadataReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 520
  summary: >-
    Creates a new instance of this project updated to include the specified metadata reference

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddMetadataReference(MetadataReference metadataReference)
    parameters:
    - id: metadataReference
      type:
        id: Microsoft.CodeAnalysis.MetadataReference
        name: MetadataReference
        href: Microsoft.CodeAnalysis.MetadataReference
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddMetadataReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 529
  summary: >-
    Creates a new instance of this project updated to include the specified metadata references

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddMetadataReferences(IEnumerable<MetadataReference> metadataReferences)
    parameters:
    - id: metadataReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.RemoveMetadataReference(Microsoft.CodeAnalysis.MetadataReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: RemoveMetadataReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.RemoveMetadataReference(Microsoft.CodeAnalysis.MetadataReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 537
  summary: Creates a new instance of this project updated to no longer include the specified metadata reference.
  syntax:
    content:
      CSharp: public Project RemoveMetadataReference(MetadataReference metadataReference)
    parameters:
    - id: metadataReference
      type:
        id: Microsoft.CodeAnalysis.MetadataReference
        name: MetadataReference
        href: Microsoft.CodeAnalysis.MetadataReference
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.WithMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithMetadataReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithMetadataReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 546
  summary: >-
    Creates a new instance of this project updated to replace existing metadata reference

    with the specified ones.
  syntax:
    content:
      CSharp: public Project WithMetadataReferences(IEnumerable<MetadataReference> metadataReferences)
    parameters:
    - id: metadataReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddAnalyzerReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 555
  summary: >-
    Creates a new instance of this project updated to include the specified analyzer reference

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddAnalyzerReference(AnalyzerReference analyzerReference)
    parameters:
    - id: analyzerReference
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
        name: AnalyzerReference
        href: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddAnalyzerReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 564
  summary: >-
    Creates a new instance of this project updated to include the specified analyzer references

    in addition to already existing ones.
  syntax:
    content:
      CSharp: public Project AddAnalyzerReferences(IEnumerable<AnalyzerReference> analyzerReferences)
    parameters:
    - id: analyzerReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.RemoveAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: RemoveAnalyzerReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.RemoveAnalyzerReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 572
  summary: Creates a new instance of this project updated to no longer include the specified analyzer reference.
  syntax:
    content:
      CSharp: public Project RemoveAnalyzerReference(AnalyzerReference analyzerReference)
    parameters:
    - id: analyzerReference
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
        name: AnalyzerReference
        href: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.WithAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: WithAnalyzerReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.WithAnalyzerReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 581
  summary: >-
    Creates a new instance of this project updated to replace existing analyzer references

    with the specified ones.
  syntax:
    content:
      CSharp: public Project WithAnalyzerReferences(IEnumerable<AnalyzerReference> analyzerReferencs)
    parameters:
    - id: analyzerReferencs
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 589
  summary: Creates a new document in a new instance of this project.
  syntax:
    content:
      CSharp: public Document AddDocument(string name, SyntaxNode syntaxRoot, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: syntaxRoot
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 601
  summary: Creates a new document in a new instance of this project.
  syntax:
    content:
      CSharp: public Document AddDocument(string name, SourceText text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Project.AddDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 610
  summary: Creates a new document in a new instance of this project.
  syntax:
    content:
      CSharp: public Document AddDocument(string name, string text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 619
  summary: Creates a new additional document in a new instance of this project.
  syntax:
    content:
      CSharp: public TextDocument AddAdditionalDocument(string name, SourceText text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: TextDocument
- id: Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: AddAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.AddAdditionalDocument(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 628
  summary: Creates a new additional document in a new instance of this project.
  syntax:
    content:
      CSharp: public TextDocument AddAdditionalDocument(string name, string text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: TextDocument
- id: Microsoft.CodeAnalysis.Project.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: RemoveDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 637
  summary: Creates a new instance of this project updated to no longer include the specified document.
  syntax:
    content:
      CSharp: public Project RemoveDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Project.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Project.yaml
  name:
    CSharp: RemoveAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Project.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Project.cs
    startLine: 645
  summary: Creates a new instance of this project updated to no longer include the specified additional document.
  syntax:
    content:
      CSharp: public Project RemoveAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Project
