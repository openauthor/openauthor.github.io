id: Microsoft.CodeAnalysis.Solution
href: Microsoft.CodeAnalysis.Solution.yaml
name:
  CSharp: Solution
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Solution
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-7-g78a2708
  path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
  startLine: 22
summary: Represents a set of projects and their source code documents.
syntax:
  content:
    CSharp: public partial class Solution
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Solution.Workspace
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: Workspace
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.Workspace
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 148
  summary: The Workspace this solution is associated with.
  syntax:
    content:
      CSharp: public Workspace Workspace { get; }
    parameters:
    - id: Workspace
      type:
        id: Microsoft.CodeAnalysis.Workspace
        name: Workspace
        href: Microsoft.CodeAnalysis.Workspace.yaml
- id: Microsoft.CodeAnalysis.Solution.Id
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: Id
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.Id
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 156
  summary: The Id of the solution. Multiple solution instances may share the same Id.
  syntax:
    content:
      CSharp: public SolutionId Id { get; }
    parameters:
    - id: Id
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
- id: Microsoft.CodeAnalysis.Solution.FilePath
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: FilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.FilePath
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 164
  summary: The path to the solution file or null if there is no solution file.
  syntax:
    content:
      CSharp: public string FilePath { get; }
    parameters:
    - id: FilePath
      type:
        id: System.String
        name: System.String
        isExternal: true
- id: Microsoft.CodeAnalysis.Solution.Version
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: Version
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.Version
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 172
  summary: The solution version. This equates to the solution file's version.
  syntax:
    content:
      CSharp: public VersionStamp Version { get; }
    parameters:
    - id: Version
      type:
        id: Microsoft.CodeAnalysis.VersionStamp
        name: VersionStamp
        href: Microsoft.CodeAnalysis.VersionStamp.yaml
- id: Microsoft.CodeAnalysis.Solution.ProjectIds
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: ProjectIds
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.ProjectIds
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 180
  summary: A list of all the ids for all the projects contained by the solution.
  syntax:
    content:
      CSharp: public IReadOnlyList<ProjectId> ProjectIds { get; }
    parameters:
    - id: ProjectIds
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId}
        name: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.ProjectId}
        isExternal: true
- id: Microsoft.CodeAnalysis.Solution.Projects
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: Projects
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.Projects
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 188
  summary: A list of all the projects contained by the solution.
  syntax:
    content:
      CSharp: public IEnumerable<Project> Projects { get; }
    parameters:
    - id: Projects
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Project}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Project}
        isExternal: true
- id: Microsoft.CodeAnalysis.Solution.GetLatestProjectVersion
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetLatestProjectVersion
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetLatestProjectVersion
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 287
  summary: The version of the most recently modified project.
  syntax:
    content:
      CSharp: public VersionStamp GetLatestProjectVersion()
    parameters: []
    return:
      id: VersionStamp
- id: Microsoft.CodeAnalysis.Solution.ContainsProject(Microsoft.CodeAnalysis.ProjectId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: ContainsProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.ContainsProject(Microsoft.CodeAnalysis.ProjectId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 295
  summary: True if the solution contains a project with the specified project ID.
  syntax:
    content:
      CSharp: public bool ContainsProject(ProjectId projectId)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.ProjectId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.ProjectId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 305
  summary: >-
    Gets the project in this solution with the specified project ID.



    If the id is not an id of a project that is part of this solution the method returns null.
  syntax:
    content:
      CSharp: public Project GetProject(ProjectId projectId)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetProject(Microsoft.CodeAnalysis.IAssemblySymbol,System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 329
  summary: Gets the [Microsoft.CodeAnalysis.Project](Microsoft.CodeAnalysis.Project.yaml) associated with an assembly symbol.
  syntax:
    content:
      CSharp: public Project GetProject(IAssemblySymbol assemblySymbol, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: assemblySymbol
      type:
        id: Microsoft.CodeAnalysis.IAssemblySymbol
        name: IAssemblySymbol
        href: Microsoft.CodeAnalysis.IAssemblySymbol
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Solution.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: ContainsDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.ContainsDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 364
  summary: True if the solution contains the document in one of its projects
  syntax:
    content:
      CSharp: public bool ContainsDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Solution.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: ContainsAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.ContainsAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 375
  summary: True if the solution contains the additional document in one of its projects
  syntax:
    content:
      CSharp: public bool ContainsAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetDocumentId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 386
  summary: Gets the documentId in this solution with the specified syntax tree.
  syntax:
    content:
      CSharp: public DocumentId GetDocumentId(SyntaxTree syntaxTree)
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: DocumentId
- id: Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ProjectId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetDocumentId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetDocumentId(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ProjectId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 394
  summary: Gets the documentId in this solution with the specified syntax tree.
  syntax:
    content:
      CSharp: public DocumentId GetDocumentId(SyntaxTree syntaxTree, ProjectId projectId)
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    return:
      id: DocumentId
- id: Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 416
  summary: Gets the document in this solution with the specified document ID.
  syntax:
    content:
      CSharp: public Document GetDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Solution.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 429
  summary: Gets the additional document in this solution with the specified document ID.
  syntax:
    content:
      CSharp: public TextDocument GetAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: TextDocument
- id: Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetDocument(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 470
  summary: Gets the document in this solution with the specified syntax tree.
  syntax:
    content:
      CSharp: public Document GetDocument(SyntaxTree syntaxTree)
    parameters:
    - id: syntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: Document
- id: Microsoft.CodeAnalysis.Solution.AddProject(System.String,System.String,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddProject(System.String,System.String,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 561
  summary: >-
    Creates a new solution instance that includes a project with the specified language and names.

    Returns the new project.
  syntax:
    content:
      CSharp: public Project AddProject(string name, string assemblyName, string language)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: assemblyName
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: language
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Project
- id: Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 570
  summary: Creates a new solution instance that includes a project with the specified language and names.
  syntax:
    content:
      CSharp: public Solution AddProject(ProjectId projectId, string name, string assemblyName, string language)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: assemblyName
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: language
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectInfo)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddProject(Microsoft.CodeAnalysis.ProjectInfo)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 578
  summary: Create a new solution instance that includes a project with the specified project information.
  syntax:
    content:
      CSharp: public Solution AddProject(ProjectInfo projectInfo)
    parameters:
    - id: projectInfo
      type:
        id: Microsoft.CodeAnalysis.ProjectInfo
        name: ProjectInfo
        href: Microsoft.CodeAnalysis.ProjectInfo.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveProject(Microsoft.CodeAnalysis.ProjectId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveProject
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveProject(Microsoft.CodeAnalysis.ProjectId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 642
  summary: Create a new solution instance without the project specified.
  syntax:
    content:
      CSharp: public Solution RemoveProject(ProjectId projectId)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectAssemblyName(Microsoft.CodeAnalysis.ProjectId,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectAssemblyName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectAssemblyName(Microsoft.CodeAnalysis.ProjectId,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 709
  summary: >-
    Creates a new solution instance with the project specified updated to have the new

    assembly name.
  syntax:
    content:
      CSharp: public Solution WithProjectAssemblyName(ProjectId projectId, string assemblyName)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: assemblyName
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectOutputFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectOutputFilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectOutputFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 737
  summary: Creates a new solution instance with the project specified updated to have the output file path.
  syntax:
    content:
      CSharp: public Solution WithProjectOutputFilePath(ProjectId projectId, string outputFilePath)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: outputFilePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectName(Microsoft.CodeAnalysis.ProjectId,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectName
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectName(Microsoft.CodeAnalysis.ProjectId,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 752
  summary: Creates a new solution instance with the project specified updated to have the name.
  syntax:
    content:
      CSharp: public Solution WithProjectName(ProjectId projectId, string name)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectFilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectFilePath(Microsoft.CodeAnalysis.ProjectId,System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 767
  summary: Creates a new solution instance with the project specified updated to have the project file path.
  syntax:
    content:
      CSharp: public Solution WithProjectFilePath(ProjectId projectId, string filePath)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectCompilationOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectCompilationOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectCompilationOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CompilationOptions)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 783
  summary: >-
    Create a new solution instance with the project specified updated to have

    the specified compilation options.
  syntax:
    content:
      CSharp: public Solution WithProjectCompilationOptions(ProjectId projectId, CompilationOptions options)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CompilationOptions
        name: CompilationOptions
        href: Microsoft.CodeAnalysis.CompilationOptions
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectParseOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectParseOptions
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectParseOptions(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 812
  summary: >-
    Create a new solution instance with the project specified updated to have

    the specified parse options.
  syntax:
    content:
      CSharp: public Solution WithProjectParseOptions(ProjectId projectId, ParseOptions options)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddProjectReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 849
  summary: >-
    Create a new solution instance with the project specified updated to include

    the specified project reference.
  syntax:
    content:
      CSharp: public Solution AddProjectReference(ProjectId projectId, ProjectReference projectReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: projectReference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 878
  summary: >-
    Create a new solution instance with the project specified updated to include

    the specified project references.
  syntax:
    content:
      CSharp: public Solution AddProjectReferences(ProjectId projectId, IEnumerable<ProjectReference> projectReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: projectReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveProjectReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveProjectReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 910
  summary: >-
    Create a new solution instance with the project specified updated to no longer

    include the specified project reference.
  syntax:
    content:
      CSharp: public Solution RemoveProjectReference(ProjectId projectId, ProjectReference projectReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: projectReference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 935
  summary: >-
    Create a new solution instance with the project specified updated to contain

    the specified list of project references.
  syntax:
    content:
      CSharp: public Solution WithProjectReferences(ProjectId projectId, IEnumerable<ProjectReference> projectReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: projectReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddMetadataReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 959
  summary: >-
    Create a new solution instance with the project specified updated to include the

    specified metadata reference.
  syntax:
    content:
      CSharp: public Solution AddMetadataReference(ProjectId projectId, MetadataReference metadataReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: metadataReference
      type:
        id: Microsoft.CodeAnalysis.MetadataReference
        name: MetadataReference
        href: Microsoft.CodeAnalysis.MetadataReference
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddMetadataReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 981
  summary: >-
    Create a new solution instance with the project specified updated to include the

    specified metadata references.
  syntax:
    content:
      CSharp: public Solution AddMetadataReferences(ProjectId projectId, IEnumerable<MetadataReference> metadataReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: metadataReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveMetadataReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveMetadataReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.MetadataReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1001
  summary: >-
    Create a new solution instance with the project specified updated to no longer include

    the specified metadata reference.
  syntax:
    content:
      CSharp: public Solution RemoveMetadataReference(ProjectId projectId, MetadataReference metadataReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: metadataReference
      type:
        id: Microsoft.CodeAnalysis.MetadataReference
        name: MetadataReference
        href: Microsoft.CodeAnalysis.MetadataReference
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectMetadataReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectMetadataReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1023
  summary: >-
    Create a new solution instance with the project specified updated to include only the

    specified metadata references.
  syntax:
    content:
      CSharp: public Solution WithProjectMetadataReferences(ProjectId projectId, IEnumerable<MetadataReference> metadataReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: metadataReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddAnalyzerReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1043
  summary: >-
    Create a new solution instance with the project specified updated to include the

    specified analyzer reference.
  syntax:
    content:
      CSharp: public Solution AddAnalyzerReference(ProjectId projectId, AnalyzerReference analyzerReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: analyzerReference
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
        name: AnalyzerReference
        href: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddAnalyzerReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1063
  summary: >-
    Create a new solution instance with the project specified updated to include the

    specified analyzer references.
  syntax:
    content:
      CSharp: public Solution AddAnalyzerReferences(ProjectId projectId, IEnumerable<AnalyzerReference> analyzerReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: analyzerReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveAnalyzerReference
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveAnalyzerReference(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1083
  summary: >-
    Create a new solution instance with the project specified updated to no longer include

    the specified analyzer reference.
  syntax:
    content:
      CSharp: public Solution RemoveAnalyzerReference(ProjectId projectId, AnalyzerReference analyzerReference)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: analyzerReference
      type:
        id: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
        name: AnalyzerReference
        href: Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithProjectAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithProjectAnalyzerReferences
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithProjectAnalyzerReferences(Microsoft.CodeAnalysis.ProjectId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1103
  summary: >-
    Create a new solution instance with the project specified updated to include only the

    specified analyzer references.
  syntax:
    content:
      CSharp: public Solution WithProjectAnalyzerReferences(ProjectId projectId, IEnumerable<AnalyzerReference> analyzerReferences)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yaml
    - id: analyzerReferences
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1138
  summary: >-
    Creates a new solution instance with the corresponding project updated to include a new

    document instance defined by its name and text.
  syntax:
    content:
      CSharp: public Solution AddDocument(DocumentId documentId, string name, string text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1147
  summary: >-
    Creates a new solution instance with the corresponding project updated to include a new

    document instance defined by its name and text.
  syntax:
    content:
      CSharp: public Solution AddDocument(DocumentId documentId, string name, SourceText text, IEnumerable<string> folders = null, string filePath = null, bool isGenerated = false)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: isGenerated
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1194
  summary: >-
    Creates a new solution instance with the corresponding project updated to include a new

    document instance defined by its name and root [Microsoft.CodeAnalysis.SyntaxNode](#).
  syntax:
    content:
      CSharp: public Solution AddDocument(DocumentId documentId, string name, SyntaxNode syntaxRoot, IEnumerable<string> folders = null, string filePath = null, bool isGenerated = false, PreservationMode preservationMode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: syntaxRoot
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: isGenerated
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: preservationMode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.TextLoader,System.Collections.Generic.IEnumerable{System.String})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.TextLoader,System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1203
  summary: >-
    Creates a new solution instance with the project updated to include a new document with

    the arguments specified.
  syntax:
    content:
      CSharp: public Solution AddDocument(DocumentId documentId, string name, TextLoader loader, IEnumerable<string> folders = null)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: loader
      type:
        id: Microsoft.CodeAnalysis.TextLoader
        name: TextLoader
        href: Microsoft.CodeAnalysis.TextLoader.yaml
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentInfo)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddDocument(Microsoft.CodeAnalysis.DocumentInfo)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1239
  summary: >-
    Create a new solution instance with the corresponding project updated to include a new

    document instanced defined by the document info.
  syntax:
    content:
      CSharp: public Solution AddDocument(DocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type:
        id: Microsoft.CodeAnalysis.DocumentInfo
        name: DocumentInfo
        href: Microsoft.CodeAnalysis.DocumentInfo.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1277
  summary: >-
    Creates a new solution instance with the corresponding project updated to include a new

    additional document instance defined by its name and text.
  syntax:
    content:
      CSharp: public Solution AddAdditionalDocument(DocumentId documentId, string name, string text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentId,System.String,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.String},System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1286
  summary: >-
    Creates a new solution instance with the corresponding project updated to include a new

    additional document instance defined by its name and text.
  syntax:
    content:
      CSharp: public Solution AddAdditionalDocument(DocumentId documentId, string name, SourceText text, IEnumerable<string> folders = null, string filePath = null)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentInfo)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: AddAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.AddAdditionalDocument(Microsoft.CodeAnalysis.DocumentInfo)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1326
  syntax:
    content:
      CSharp: public Solution AddAdditionalDocument(DocumentInfo documentInfo)
    parameters:
    - id: documentInfo
      type:
        id: Microsoft.CodeAnalysis.DocumentInfo
        name: DocumentInfo
        href: Microsoft.CodeAnalysis.DocumentInfo.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1363
  summary: Creates a new solution instance that no longer includes the specified document.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.StyleCop.CSharp.SpacingRules", "SA1008:OpeningParenthesisMustBeSpacedCorrectly", Justification = "Working around StyleCop bug 7080")] public Solution RemoveDocument(DocumentId documentId)'
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: RemoveAdditionalDocument
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.RemoveAdditionalDocument(Microsoft.CodeAnalysis.DocumentId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1378
  summary: Creates a new solution instance that no longer includes the specified additional document.
  syntax:
    content:
      CSharp: public Solution RemoveAdditionalDocument(DocumentId documentId)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentFolders(Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{System.String})
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentFolders
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentFolders(Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{System.String})
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1392
  summary: >-
    Creates a new solution instance with the document specified updated to be contained in

    the sequence of logical folders.
  syntax:
    content:
      CSharp: public Solution WithDocumentFolders(DocumentId documentId, IEnumerable<string> folders)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: folders
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1416
  summary: >-
    Creates a new solution instance with the document specified updated to have the text

    specified.
  syntax:
    content:
      CSharp: public Solution WithDocumentText(DocumentId documentId, SourceText text, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithAdditionalDocumentText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1463
  summary: >-
    Creates a new solution instance with the additional document specified updated to have the text

    specified.
  syntax:
    content:
      CSharp: public Solution WithAdditionalDocumentText(DocumentId documentId, SourceText text, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1521
  summary: >-
    Creates a new solution instance with the document specified updated to have the text

    and version specified.
  syntax:
    content:
      CSharp: public Solution WithDocumentText(DocumentId documentId, TextAndVersion textAndVersion, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: textAndVersion
      type:
        id: Microsoft.CodeAnalysis.TextAndVersion
        name: TextAndVersion
        href: Microsoft.CodeAnalysis.TextAndVersion.yaml
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithAdditionalDocumentText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentText(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextAndVersion,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1544
  summary: >-
    Creates a new solution instance with the additional document specified updated to have the text

    and version specified.
  syntax:
    content:
      CSharp: public Solution WithAdditionalDocumentText(DocumentId documentId, TextAndVersion textAndVersion, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: textAndVersion
      type:
        id: Microsoft.CodeAnalysis.TextAndVersion
        name: TextAndVersion
        href: Microsoft.CodeAnalysis.TextAndVersion.yaml
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentSyntaxRoot(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentSyntaxRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentSyntaxRoot(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1567
  summary: >-
    Creates a new solution instance with the document specified updated to have a syntax tree

    rooted by the specified syntax node.
  syntax:
    content:
      CSharp: public Solution WithDocumentSyntaxRoot(DocumentId documentId, SyntaxNode root, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentSourceCodeKind(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SourceCodeKind)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentSourceCodeKind
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentSourceCodeKind(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.SourceCodeKind)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1610
  summary: >-
    Creates a new solution instance with the document specified updated to have the source

    code kind specified.
  syntax:
    content:
      CSharp: public Solution WithDocumentSourceCodeKind(DocumentId documentId, SourceCodeKind sourceCodeKind)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: sourceCodeKind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: Microsoft.CodeAnalysis.SourceCodeKind
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentTextLoader
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1633
  summary: >-
    Creates a new solution instance with the document specified updated to have the text

    supplied by the text loader.
  syntax:
    content:
      CSharp: public Solution WithDocumentTextLoader(DocumentId documentId, TextLoader loader, PreservationMode mode)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: loader
      type:
        id: Microsoft.CodeAnalysis.TextLoader
        name: TextLoader
        href: Microsoft.CodeAnalysis.TextLoader.yaml
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithAdditionalDocumentTextLoader
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithAdditionalDocumentTextLoader(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.TextLoader,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1648
  summary: >-
    Creates a new solution instance with the additional document specified updated to have the text

    supplied by the text loader.
  syntax:
    content:
      CSharp: public Solution WithAdditionalDocumentTextLoader(DocumentId documentId, TextLoader loader, PreservationMode mode)
    parameters:
    - id: documentId
      type:
        id: Microsoft.CodeAnalysis.DocumentId
        name: DocumentId
        href: Microsoft.CodeAnalysis.DocumentId.yaml
    - id: loader
      type:
        id: Microsoft.CodeAnalysis.TextLoader
        name: TextLoader
        href: Microsoft.CodeAnalysis.TextLoader.yaml
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.GetDocumentIdsWithFilePath(System.String)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetDocumentIdsWithFilePath
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetDocumentIdsWithFilePath(System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1786
  summary: >-
    Gets the set of [Microsoft.CodeAnalysis.DocumentId](Microsoft.CodeAnalysis.DocumentId.yaml)s in this [Microsoft.CodeAnalysis.Solution](Microsoft.CodeAnalysis.Solution.yaml) with a

    [Microsoft.CodeAnalysis.TextDocument.FilePath](Microsoft.CodeAnalysis.TextDocument.yaml) that matches the given file path.
  syntax:
    content:
      CSharp: public ImmutableArray<DocumentId> GetDocumentIdsWithFilePath(string filePath)
    parameters:
    - id: filePath
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: ImmutableArray
- id: Microsoft.CodeAnalysis.Solution.GetIsolatedSolution
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetIsolatedSolution
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetIsolatedSolution
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1840
  summary: >-
    Gets a copy of the solution isolated from the original so that they do not share computed state.



    Use isolated solutions when doing operations that are likely to access a lot of text,

    syntax trees or compilations that are unlikely to be needed again after the operation is done.

    When the isolated solution is reclaimed so will the computed state.
  syntax:
    content:
      CSharp: public Solution GetIsolatedSolution()
    parameters: []
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.WithDocumentText(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: WithDocumentText
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.WithDocumentText(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.PreservationMode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 1926
  summary: Creates a new solution instance with all the documents specified updated to have the same specified text.
  syntax:
    content:
      CSharp: public Solution WithDocumentText(IEnumerable<DocumentId> documentIds, SourceText text, PreservationMode mode = PreservationMode.PreserveValue)
    parameters:
    - id: documentIds
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId}
        isExternal: true
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: mode
      type:
        id: Microsoft.CodeAnalysis.PreservationMode
        name: PreservationMode
        href: Microsoft.CodeAnalysis.PreservationMode.yaml
    return:
      id: Solution
- id: Microsoft.CodeAnalysis.Solution.GetChanges(Microsoft.CodeAnalysis.Solution)
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetChanges
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetChanges(Microsoft.CodeAnalysis.Solution)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 2063
  summary: >-
    Gets an objects that lists the added, changed and removed projects between

    this solution and the specified solution.
  syntax:
    content:
      CSharp: public SolutionChanges GetChanges(Solution oldSolution)
    parameters:
    - id: oldSolution
      type:
        id: Microsoft.CodeAnalysis.Solution
        name: Solution
        href: Microsoft.CodeAnalysis.Solution.yaml
    return:
      id: SolutionChanges
- id: Microsoft.CodeAnalysis.Solution.GetProjectDependencyGraph
  href: Microsoft.CodeAnalysis.Solution.yaml
  name:
    CSharp: GetProjectDependencyGraph
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Solution.GetProjectDependencyGraph
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs
    startLine: 2131
  summary: Gets an ProjectDependencyGraph that details the dependencies between projects for this solution.
  syntax:
    content:
      CSharp: public ProjectDependencyGraph GetProjectDependencyGraph()
    parameters: []
    return:
      id: ProjectDependencyGraph
