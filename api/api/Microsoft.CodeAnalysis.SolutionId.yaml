id: Microsoft.CodeAnalysis.SolutionId
href: Microsoft.CodeAnalysis.SolutionId.yaml
name:
  CSharp: SolutionId
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.SolutionId
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-6-g1d967e8
  path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
  startLine: 13
summary: An identifier that can be used to refer to the same Solution across versions.
syntax:
  content:
    CSharp: public class SolutionId
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.SolutionId.Id
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: Id
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.Id
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 19
  summary: The unique id of the solution.
  syntax:
    content:
      CSharp: public Guid Id { get; private set; }
    parameters:
    - id: Id
      type:
        id: System.Guid
        name: System.Guid
        isExternal: true
- id: Microsoft.CodeAnalysis.SolutionId.CreateNewId(System.String)
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: CreateNewId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.CreateNewId(System.String)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 33
  summary: Create a new Solution Id
  syntax:
    content:
      CSharp: public static SolutionId CreateNewId(string debugName = null)
    parameters:
    - id: debugName
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: An optional name to make this id easier to recognize while debugging.
    return:
      id: SolutionId
- id: Microsoft.CodeAnalysis.SolutionId.Equals(System.Object)
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 45
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SolutionId.Equals(Microsoft.CodeAnalysis.SolutionId)
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.Equals(Microsoft.CodeAnalysis.SolutionId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 50
  syntax:
    content:
      CSharp: public bool Equals(SolutionId other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SolutionId.op_Equality(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.SolutionId)
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.op_Equality(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.SolutionId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 57
  syntax:
    content:
      CSharp: public static bool operator ==(SolutionId left, SolutionId right) { return EqualityComparer<SolutionId>.Default.Equals(left, right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SolutionId.op_Inequality(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.SolutionId)
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.op_Inequality(Microsoft.CodeAnalysis.SolutionId,Microsoft.CodeAnalysis.SolutionId)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 62
  syntax:
    content:
      CSharp: public static bool operator !=(SolutionId left, SolutionId right) { return !(left == right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SolutionId
        name: SolutionId
        href: Microsoft.CodeAnalysis.SolutionId.yaml
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.SolutionId.GetHashCode
  href: Microsoft.CodeAnalysis.SolutionId.yaml
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.SolutionId.GetHashCode
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/SolutionId.cs
    startLine: 67
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
