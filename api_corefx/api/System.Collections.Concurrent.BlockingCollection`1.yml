items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection<T>
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 40
  summary: >-
    Provides blocking and bounding capabilities for thread-safe collections that

    implement [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  syntax:
    content:
      CSharp: 'public class BlockingCollection<T> : ICollection, IDisposable, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1
  children:
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 61
  summary: Gets the bounded capacity of this [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content:
      CSharp: public int BoundedCapacity { get; }
    parameters:
    - id: BoundedCapacity
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 74
  summary: Gets whether this [System.Collections.Concurrent.BlockingCollection{T}]() has been marked as complete for adding.
  syntax:
    content:
      CSharp: public bool IsAddingCompleted { get; }
    parameters:
    - id: IsAddingCompleted
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 87
  summary: Gets whether this [System.Collections.Concurrent.BlockingCollection{T}]() has been marked as complete for adding and is empty.
  syntax:
    content:
      CSharp: public bool IsCompleted { get; }
    parameters:
    - id: IsCompleted
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 100
  summary: Gets the number of items contained in the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.Count
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 112
  summary: Gets a value indicating whether access to the [System.Collections.ICollection]() is synchronized.
  syntax:
    content:
      CSharp: bool ICollection.IsSynchronized { get; }
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 126
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](). This property is not supported.
  syntax:
    content:
      CSharp: object ICollection.SyncRoot { get; }
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 143
  summary: >-
    Initializes a new instance of the

    [System.Collections.Concurrent.BlockingCollection{T}]()

    class without an upper-bound.
  syntax:
    content:
      CSharp: 'public BlockingCollection(): this (new ConcurrentQueue<T>())'
    parameters: []
  id: System.Collections.Concurrent.BlockingCollection`1.#ctor
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(int)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 158
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class with the specified upper-bound.
  syntax:
    content:
      CSharp: 'public BlockingCollection(int boundedCapacity): this (new ConcurrentQueue<T>(), boundedCapacity)'
    parameters:
    - id: boundedCapacity
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The bounded size of the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(IProducerConsumerCollection<T>, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>, int)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 173
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class with the specified upper-bound and using the provided

    [System.Collections.Concurrent.IProducerConsumerCollection{T}]() as its underlying data store.
  syntax:
    content:
      CSharp: public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity)
    parameters:
    - id: collection
      type:
        id: System.Collections.Concurrent.IProducerConsumerCollection{`0}
        name: IProducerConsumerCollection<T>
        href: System.Collections.Concurrent.IProducerConsumerCollection{`0}
      description: The collection to use as the underlying data store.
    - id: boundedCapacity
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The bounded size of the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: BlockingCollection(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 199
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.BlockingCollection{T}]()

    class without an upper-bound and using the provided

    [System.Collections.Concurrent.IProducerConsumerCollection{T}]() as its underlying data store.
  syntax:
    content:
      CSharp: public BlockingCollection(IProducerConsumerCollection<T> collection)
    parameters:
    - id: collection
      type:
        id: System.Collections.Concurrent.IProducerConsumerCollection{`0}
        name: IProducerConsumerCollection<T>
        href: System.Collections.Concurrent.IProducerConsumerCollection{`0}
      description: The collection to use as the underlying data store.
  id: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 252
  summary: Adds the item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public void Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection. The value can be a null reference.
  id: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Add(T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 282
  summary: >-
    Adds the item to the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public void Add(T item, CancellationToken cancellationToken)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection. The value can be a null reference.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
  id: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 304
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryAdd(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the  could be added; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 327
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryAdd(T item, TimeSpan timeout)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection.
    - id: timeout
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
      description: >-
        A [System.TimeSpan]() that represents the number of milliseconds

        to wait, or a [System.TimeSpan]() that represents -1 milliseconds to wait indefinitely.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the  could be added to the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 349
  summary: Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryAdd(T item, int millisecondsTimeout)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the  could be added to the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAdd(T, int, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 375
  summary: >-
    Attempts to add the specified item to the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public bool TryAdd(T item, int millisecondsTimeout, CancellationToken cancellationToken)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the  could be added to the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 537
  summary: Takes an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public T Take()
    parameters: []
    return:
      id: T
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.Take
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 561
  summary: Takes an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public T Take(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 583
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryTake(out T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if an item could be removed; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 605
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryTake(out T item, TimeSpan timeout)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
    - id: timeout
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
      description: >-
        A [System.TimeSpan]() that represents the number of milliseconds

        to wait, or a [System.TimeSpan]() that represents -1 milliseconds to wait indefinitely.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 626
  summary: Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().
  syntax:
    content:
      CSharp: public bool TryTake(out T item, int millisecondsTimeout)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTake(out T, int, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 651
  summary: >-
    Attempts to remove an item from the [System.Collections.Concurrent.BlockingCollection{T}]().

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public bool TryTake(out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from the collection.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if an item could be removed from the collection within

        the alloted time; otherwise, false.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: AddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 792
  summary: >-
    Adds the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int AddToAny(BlockingCollection<T>[] collections, T item)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of the collection in the  array to which the item was added.
  id: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: AddToAny(BlockingCollection<T>[], T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 834
  summary: >-
    Adds the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public static int AddToAny(BlockingCollection<T>[] collections, T item, CancellationToken cancellationToken)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of the collection in the  array to which the item was added.
  id: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 867
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryAddToAny(BlockingCollection<T>[] collections, T item)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the

        array to which the item was added, or -1 if the item could not be added.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 896
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    - id: timeout
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
      description: >-
        A [System.TimeSpan]() that represents the number of milliseconds

        to wait, or a [System.TimeSpan]() that represents -1 milliseconds to wait indefinitely.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the

        array to which the item was added, or -1 if the item could not be added.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 923
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the

        array to which the item was added, or -1 if the item could not be added.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryAddToAny(BlockingCollection<T>[], T, int, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 955
  summary: >-
    Attempts to add the specified item to any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, CancellationToken cancellationToken)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the

        array to which the item was added, or -1 if the item could not be added.
  id: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1171
  summary: >-
    Takes an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TakeFromAny(BlockingCollection<T>[], out T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1200
  summary: >-
    Takes an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, CancellationToken cancellationToken)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1228
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1259
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    - id: timeout
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
      description: >-
        A [System.TimeSpan]() that represents the number of milliseconds

        to wait, or a [System.TimeSpan]() that represents -1 milliseconds to wait indefinitely.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1289
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.
  syntax:
    content:
      CSharp: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: TryTakeFromAny(BlockingCollection<T>[], out T, int, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1323
  summary: >-
    Attempts to remove an item from any one of the specified

    [System.Collections.Concurrent.BlockingCollection{T}]() instances.

    A [System.OperationCanceledException]() is thrown if the [System.Threading.CancellationToken]() is

    canceled.
  syntax:
    content:
      CSharp: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    parameters:
    - id: collections
      type:
        id: System.Array
        name: BlockingCollection<T>[]
        isExternal: true
      description: The array of collections.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of milliseconds to wait, or [System.Threading.Timeout.Infinite]() (-1) to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The index of the collection in the  array from which

        the item was removed, or -1 if an item could not be removed.
  id: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1472
  summary: >-
    Marks the [System.Collections.Concurrent.BlockingCollection{T}]() instances

    as not accepting any more additions.
  syntax:
    content:
      CSharp: public void CompleteAdding()
    parameters: []
  id: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1526
  summary: Releases resources used by the [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content:
      CSharp: public void Dispose()
    parameters: []
  id: System.Collections.Concurrent.BlockingCollection`1.Dispose
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: Dispose(bool)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(bool)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1536
  summary: Releases resources used by the [System.Collections.Concurrent.BlockingCollection{T}]() instance.
  syntax:
    content:
      CSharp: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: Whether being disposed explicitly (true) or due to a finalizer (false).
  id: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1558
  summary: Copies the items from the [System.Collections.Concurrent.BlockingCollection{T}]() instance into a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: An array containing copies of the elements of the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.ToArray
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1577
  summary: >-
    Copies all of the items in the [System.Collections.Concurrent.BlockingCollection{T}]() instance

    to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the [System.Collections.Concurrent.BlockingCollection{T}]() instance. The array must have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in  at which copying begins.
  id: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1596
  summary: >-
    Copies all of the items in the [System.Collections.Concurrent.BlockingCollection{T}]() instance

    to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the [System.Collections.Concurrent.BlockingCollection{T}]() instance. The array must have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in  at which copying begins.
  id: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1638
  summary: Provides a consuming [System.Collections.Generics.IEnumerable{T}]() for items in the collection.
  syntax:
    content:
      CSharp: public IEnumerable<T> GetConsumingEnumerable()
    parameters: []
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: An [System.Collections.Generics.IEnumerable{T}]() that removes and returns items from the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1652
  summary: >-
    Provides a consuming [System.Collections.Generics.IEnumerable{T}]() for items in the collection.

    Calling MoveNext on the returned enumerable will block if there is no data available, or will

    throw an [System.OperationCanceledException]() if the [System.Threading.CancellationToken]() is canceled.
  syntax:
    content:
      CSharp: public IEnumerable<T> GetConsumingEnumerable(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token to observe.
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: An [System.Collections.Generics.IEnumerable{T}]() that removes and returns items from the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1680
  summary: Provides an [System.Collections.Generics.IEnumerator{T}]() for items in the collection.
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: An [System.Collections.Generics.IEnumerator{T}]() for the items in the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Concurrent.BlockingCollection`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1690
  summary: Provides an [System.Collections.IEnumerator]() for items in the collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: An [System.Collections.IEnumerator]() for the items in the collection.
  id: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
