items:
- uid: System.Collections.Concurrent.ConcurrentBag`1
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: ConcurrentBag<T>
  fullName: System.Collections.Concurrent.ConcurrentBag<T>
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 36
  summary: Represents an thread-safe, unordered collection of objects.
  syntax:
    content:
      CSharp: public class ConcurrentBag<T>
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Concurrent.ConcurrentBag`1
  children:
  - System.Collections.Concurrent.ConcurrentBag`1.#ctor
  - System.Collections.Concurrent.ConcurrentBag`1.#ctor(IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
  - System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
  - System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentBag`1.ToArray
  - System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentBag`1.Count
  - System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentBag`1.#ctor
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: ConcurrentBag()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ConcurrentBag()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 54
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml)

    class.
  syntax:
    content:
      CSharp: public ConcurrentBag()
    parameters: []
  id: System.Collections.Concurrent.ConcurrentBag`1.#ctor
- uid: System.Collections.Concurrent.ConcurrentBag`1.#ctor(IEnumerable{`0})
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: ConcurrentBag(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ConcurrentBag(IEnumerable<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 67
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml)

    class that contains elements copied from the specified collection.
  syntax:
    content:
      CSharp: public ConcurrentBag(IEnumerable<T> collection)
    parameters:
    - id: collection
      type:
        id: IEnumerable{`0}
        name: IEnumerable{`0}
        isExternal: true
      description: The collection whose elements are copied to the new [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  id: System.Collections.Concurrent.ConcurrentBag`1.#ctor(IEnumerable{`0})
- uid: System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: Add(T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 102
  summary: Adds an object to the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  syntax:
    content:
      CSharp: public void Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to be added to the

        [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml). The value can be a null reference

        (Nothing in Visual Basic) for reference types.
  id: System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
- uid: System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.TryTake(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 164
  summary: Attempts to remove and return an object from the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  syntax:
    content:
      CSharp: public bool TryTake(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains the object

        removed from the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml) or the default value

        of  if the operation failed.
    return:
      id: Boolean
      description: true if an object was removed successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
- uid: System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: TryPeek(out T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.TryPeek(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 177
  summary: >-
    Attempts to return an object from the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml)

    without removing it.
  syntax:
    content:
      CSharp: public bool TryPeek(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains an object from

        the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml) or the default value of

        if the operation failed.
    return:
      id: Boolean
      description: true if and object was returned successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
- uid: System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 433
  summary: >-
    Copies the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml) elements to an existing

    one-dimensional [System.Array](#), starting at the specified array

    index.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional [System.Array](#) that is the

        destination of the elements copied from the

        [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml). The [System.Array](#) must have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
  id: System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Concurrent.ConcurrentBag`1.ToArray
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 511
  summary: Copies the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml) elements to a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      description: A new array containing a snapshot of elements copied from the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  id: System.Collections.Concurrent.ConcurrentBag`1.ToArray
- uid: System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 541
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      description: An enumerator for the contents of the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  id: System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentBag`1.Count
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 584
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml).
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentBag`1.Count
- uid: System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
  href: System.Collections.Concurrent.ConcurrentBag`1.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 609
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentBag`1](System.Collections.Concurrent.ConcurrentBag`1.yml) is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
