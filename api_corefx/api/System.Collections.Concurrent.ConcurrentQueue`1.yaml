id: System.Collections.Concurrent.ConcurrentQueue`1
href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
name:
  CSharp: ConcurrentQueue`1
qualifiedName:
  CSharp: System.Collections.Concurrent.ConcurrentQueue`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
  startLine: 26
summary: Represents a thread-safe first-in, first-out collection of objects.
syntax:
  content:
    CSharp: public class ConcurrentQueue<T>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: ConcurrentQueue`1
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.ConcurrentQueue`1
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 43
  summary: Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml) class.
  syntax:
    content:
      CSharp: public ConcurrentQueue()
    parameters: []
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(IEnumerable{`0})
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: ConcurrentQueue`1(IEnumerable{`0})
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.ConcurrentQueue`1(IEnumerable{`0})
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 82
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml)

    class that contains elements copied from the specified collection
  syntax:
    content:
      CSharp: public ConcurrentQueue(IEnumerable<T> collection)
    parameters:
    - id: collection
      type:
        id: IEnumerable{`0}
        name: IEnumerable{`0}
        isExternal: true
      description: The collection whose elements are copied to the new [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 217
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml) is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: ToArray
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 255
  summary: Copies the elements stored in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml) to a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      description: A new array containing a snapshot of elements copied from the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
- id: System.Collections.Concurrent.ConcurrentQueue`1.Count
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 350
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 399
  summary: Copies the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml) elements to an existing one-dimensional [System.Array](#), starting at the specified array index.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional [System.Array](#) that is the

        destination of the elements copied from the

        [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml). The [System.Array](#) must have zero-based

        indexing.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 426
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      description: An enumerator for the contents of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
- id: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: Enqueue
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 533
  summary: Adds an object to the end of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
  syntax:
    content:
      CSharp: public void Enqueue(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to add to the end of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml). The value can be a null reference

        (Nothing in Visual Basic) for reference types.
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: TryDequeue
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 557
  summary: Attempts to remove and return the object at the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml).
  syntax:
    content:
      CSharp: public bool TryDequeue(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      description: >-
        true if an element was removed and returned from the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml)

        successfully; otherwise, false.
- id: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yaml
  name:
    CSharp: TryPeek
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 578
  summary: >-
    Attempts to return an object from the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yaml)

    without removing it.
  syntax:
    content:
      CSharp: public bool TryPeek(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains an object from

        the beginning of the [System.Collections.Concurrent.ConcurrentQueue{T}](#) or an

        unspecified value if the operation failed.
    return:
      id: Boolean
      description: true if and object was returned successfully; otherwise, false.
