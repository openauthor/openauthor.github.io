items:
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue<T>
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 26
  summary: Represents a thread-safe first-in, first-out collection of objects.
  syntax:
    content:
      CSharp: 'public class ConcurrentQueue<T> : IProducerConsumerCollection<T>, ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Concurrent.ConcurrentQueue`1
  children:
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  - System.Collections.Concurrent.ConcurrentQueue`1.Count
  - System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 43
  summary: Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) class.
  syntax:
    content:
      CSharp: public ConcurrentQueue()
    parameters: []
  id: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ConcurrentQueue(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 82
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    class that contains elements copied from the specified collection
  syntax:
    content:
      CSharp: public ConcurrentQueue(IEnumerable<T> collection)
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection whose elements are copied to the new [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  id: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 117
  summary: >-
    Copies the elements of the [System.Collections.ICollection]() to an [System.Array](), starting at a particular

    [System.Array]() index.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the

        destination of the elements copied from the

        [System.Collections.Concurrent.ConcurrentBag](). The [System.Array]() must have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 139
  summary: >-
    Gets a value indicating whether access to the [System.Collections.ICollection]() is

    synchronized with the SyncRoot.
  syntax:
    content:
      CSharp: bool ICollection.IsSynchronized { // Gets a value indicating whether access to this collection is synchronized. Always returns // false. The reason is subtle. While access is in face thread safe, it's not the case that // locking on the SyncRoot would have prevented concurrent pushes and pops, as this property // would typically indicate; that's because we internally use CAS operations vs. true locks. get; }
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 154
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](). This property is not supported.
  syntax:
    content:
      CSharp: object ICollection.SyncRoot { get; }
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 166
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: An [System.Collections.IEnumerator]() that can be used to iterate through the collection.
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 183
  summary: Attempts to add an object to the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  syntax:
    content:
      CSharp: bool IProducerConsumerCollection<T>.TryAdd(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to add to the [System.Collections.Concurrent.IProducerConsumerCollection{T}](). The value can be a null

        reference (Nothing in Visual Basic) for reference types.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the object was added successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IProducerConsumerCollection<T>.TryTake(out T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 201
  summary: Attempts to remove and return an object from the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  syntax:
    content:
      CSharp: bool IProducerConsumerCollection<T>.TryTake(out T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if an element was removed and returned successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 217
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 255
  summary: Copies the elements stored in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) to a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: A new array containing a snapshot of elements copied from the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  id: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 350
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentQueue`1.Count
- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 399
  summary: Copies the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml) elements to an existing one-dimensional [System.Array](), starting at the specified array index.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the

        destination of the elements copied from the

        [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml). The [System.Array]() must have zero-based

        indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
  id: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 426
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: An enumerator for the contents of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  id: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: Enqueue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 533
  summary: Adds an object to the end of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content:
      CSharp: public void Enqueue(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to add to the end of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml). The value can be a null reference

        (Nothing in Visual Basic) for reference types.
  id: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: TryDequeue(out T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 557
  summary: Attempts to remove and return the object at the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml).
  syntax:
    content:
      CSharp: public bool TryDequeue(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if an element was removed and returned from the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml)

        successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentQueue`1.yml
  name: TryPeek(out T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentQueue.cs
    startLine: 578
  summary: >-
    Attempts to return an object from the beginning of the [System.Collections.Concurrent.ConcurrentQueue`1](System.Collections.Concurrent.ConcurrentQueue`1.yml)

    without removing it.
  syntax:
    content:
      CSharp: public bool TryPeek(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains an object from

        the beginning of the [System.Collections.Concurrent.ConcurrentQueue{T}]() or an

        unspecified value if the operation failed.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if and object was returned successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
