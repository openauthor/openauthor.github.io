id: System.Collections.Concurrent.ConcurrentStack`1
href: System.Collections.Concurrent.ConcurrentStack`1.yaml
name:
  CSharp: ConcurrentStack`1
qualifiedName:
  CSharp: System.Collections.Concurrent.ConcurrentStack`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
  startLine: 35
summary: Represents a thread-safe last-in, first-out collection of objects.
syntax:
  content:
    CSharp: public class ConcurrentStack<T>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: ConcurrentStack`1
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.ConcurrentStack`1
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 66
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

    class.
  syntax:
    content:
      CSharp: public ConcurrentStack()
    parameters: []
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.#ctor(IEnumerable{`0})
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: ConcurrentStack`1(IEnumerable{`0})
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.ConcurrentStack`1(IEnumerable{`0})
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 78
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

    class that contains elements copied from the specified collection
  syntax:
    content:
      CSharp: public ConcurrentStack(IEnumerable<T> collection)
    parameters:
    - id: collection
      type:
        id: IEnumerable{`0}
        name: IEnumerable{`0}
        isExternal: true
      description: The collection whose elements are copied to the new [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 117
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { // Checks whether the stack is empty. Clearly the answer may be out of date even prior to // the function returning (i.e. if another thread concurrently adds to the stack). It does // guarantee, however, that, if another thread does not mutate the stack, a subsequent call // to TryPop will return true -- i.e. it will also read the stack as non-empty. get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Concurrent.ConcurrentStack`1.Count
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 135
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
  syntax:
    content:
      CSharp: public int Count { // Counts the number of entries in the stack. This is an O(n) operation. The answer may be out // of date before returning, but guarantees to return a count that was once valid. Conceptually, // the implementation snaps a copy of the list and then counts the entries, though physically // this is not what actually happens. get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Concurrent.ConcurrentStack`1.Clear
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 192
  summary: Removes all objects from the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 261
  summary: Copies the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) elements to an existing one-dimensional [System.Array](#), starting at the specified array index.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional [System.Array](#) that is the destination of

        the elements copied from the

        [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml). The [System.Array](#) must have zero-based

        indexing.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: Push
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 282
  summary: Inserts an object at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
  syntax:
    content:
      CSharp: public void Push(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml). The value can be

        a null reference (Nothing in Visual Basic) for reference types.
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: PushRange
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 313
  summary: Inserts multiple objects at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) atomically.
  syntax:
    content:
      CSharp: public void PushRange(T[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The objects to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: PushRange
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 344
  summary: Inserts multiple objects at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) atomically.
  syntax:
    content:
      CSharp: public void PushRange(T[] items, int startIndex, int count)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The objects to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based offset in  at which to begin

        inserting elements onto the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to be inserted onto the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    return:
      id: Void
- id: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: TryPeek
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 451
  summary: >-
    Attempts to return an object from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

    without removing it.
  syntax:
    content:
      CSharp: public bool TryPeek(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains an object from

        the top of the [System.Collections.Concurrent.ConcurrentStack{T}](#) or an

        unspecified value if the operation failed.
    return:
      id: Boolean
      description: true if and object was returned successfully; otherwise, false.
- id: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: TryPop
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 478
  summary: Attempts to pop and return the object at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
  syntax:
    content:
      CSharp: public bool TryPop(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      description: >-
        true if an element was removed and returned from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

        successfully; otherwise, false.
- id: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: TryPopRange
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 517
  summary: >-
    Attempts to pop and return multiple objects from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

    atomically.
  syntax:
    content:
      CSharp: public int TryPopRange(T[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The [System.Array](#) to which objects popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) will be added.
    return:
      id: Int32
      description: >-
        The number of objects successfully popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) and inserted in

        .
- id: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: TryPopRange
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 555
  summary: >-
    Attempts to pop and return multiple objects from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml)

    atomically.
  syntax:
    content:
      CSharp: public int TryPopRange(T[] items, int startIndex, int count)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The [System.Array](#) to which objects popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) will be added.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based offset in  at which to begin

        inserting elements from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to be popped from top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) and inserted into .
    return:
      id: Int32
      description: >-
        The number of objects successfully popped from the top of

        the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) and inserted in .
- id: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: ToArray
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 698
  summary: Copies the items stored in the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml) to a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      description: A new array containing a snapshot of elements copied from the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
- id: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  href: System.Collections.Concurrent.ConcurrentStack`1.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 732
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      description: An enumerator for the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yaml).
