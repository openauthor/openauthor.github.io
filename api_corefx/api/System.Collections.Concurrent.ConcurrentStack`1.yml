items:
- uid: System.Collections.Concurrent.ConcurrentStack`1
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ConcurrentStack<T>
  fullName: System.Collections.Concurrent.ConcurrentStack<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 35
  summary: Represents a thread-safe last-in, first-out collection of objects.
  syntax:
    content:
      CSharp: 'public class ConcurrentStack<T> : IProducerConsumerCollection<T>, ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Concurrent.ConcurrentStack`1
  children:
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentStack`1.Count
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentStack`1.Clear
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.ToArray
  - System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ConcurrentStack()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 66
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

    class.
  syntax:
    content:
      CSharp: public ConcurrentStack()
    parameters: []
  id: System.Collections.Concurrent.ConcurrentStack`1.#ctor
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ConcurrentStack(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 78
  summary: >-
    Initializes a new instance of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

    class that contains elements copied from the specified collection
  syntax:
    content:
      CSharp: public ConcurrentStack(IEnumerable<T> collection)
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection whose elements are copied to the new [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  id: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 117
  summary: Gets a value that indicates whether the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { // Checks whether the stack is empty. Clearly the answer may be out of date even prior to // the function returning (i.e. if another thread concurrently adds to the stack). It does // guarantee, however, that, if another thread does not mutate the stack, a subsequent call // to TryPop will return true -- i.e. it will also read the stack as non-empty. get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 135
  summary: Gets the number of elements contained in the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  syntax:
    content:
      CSharp: public int Count { // Counts the number of entries in the stack. This is an O(n) operation. The answer may be out // of date before returning, but guarantees to return a count that was once valid. Conceptually, // the implementation snaps a copy of the list and then counts the entries, though physically // this is not what actually happens. get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentStack`1.Count
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 167
  summary: >-
    Gets a value indicating whether access to the [System.Collections.ICollection]() is

    synchronized with the SyncRoot.
  syntax:
    content:
      CSharp: bool ICollection.IsSynchronized { // Gets a value indicating whether access to this collection is synchronized. Always returns // false. The reason is subtle. While access is in face thread safe, it's not the case that // locking on the SyncRoot would have prevented concurrent pushes and pops, as this property // would typically indicate; that's because we internally use CAS operations vs. true locks. get; }
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 181
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection](). This property is not supported.
  syntax:
    content:
      CSharp: object ICollection.SyncRoot { get; }
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: Clear()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 192
  summary: Removes all objects from the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
  id: System.Collections.Concurrent.ConcurrentStack`1.Clear
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 226
  summary: >-
    Copies the elements of the [System.Collections.ICollection]() to an [System.Array](), starting at a particular

    [System.Array]() index.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the destination of

        the elements copied from the

        [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml). The [System.Array]() must

        have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 261
  summary: Copies the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) elements to an existing one-dimensional [System.Array](), starting at the specified array index.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the destination of

        the elements copied from the

        [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml). The [System.Array]() must have zero-based

        indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index in  at which copying

        begins.
  id: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: Push(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 282
  summary: Inserts an object at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  syntax:
    content:
      CSharp: public void Push(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml). The value can be

        a null reference (Nothing in Visual Basic) for reference types.
  id: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: PushRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 313
  summary: Inserts multiple objects at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) atomically.
  syntax:
    content:
      CSharp: public void PushRange(T[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The objects to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  id: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: PushRange(T[], int, int)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 344
  summary: Inserts multiple objects at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) atomically.
  syntax:
    content:
      CSharp: public void PushRange(T[] items, int startIndex, int count)
    parameters:
    - id: items
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The objects to push onto the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based offset in  at which to begin

        inserting elements onto the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to be inserted onto the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  id: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 437
  summary: Attempts to add an object to the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  syntax:
    content:
      CSharp: bool IProducerConsumerCollection<T>.TryAdd(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to add to the [System.Collections.Concurrent.IProducerConsumerCollection{T}](). The value can be a null

        reference (Nothing in Visual Basic) for reference types.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the object was added successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: TryPeek(out T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 451
  summary: >-
    Attempts to return an object from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

    without removing it.
  syntax:
    content:
      CSharp: public bool TryPeek(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns,  contains an object from

        the top of the [System.Collections.Concurrent.ConcurrentStack{T}]() or an

        unspecified value if the operation failed.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if and object was returned successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: TryPop(out T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 478
  summary: Attempts to pop and return the object at the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  syntax:
    content:
      CSharp: public bool TryPop(out T result)
    parameters:
    - id: result
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if an element was removed and returned from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

        successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: TryPopRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 517
  summary: >-
    Attempts to pop and return multiple objects from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

    atomically.
  syntax:
    content:
      CSharp: public int TryPopRange(T[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The [System.Array]() to which objects popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) will be added.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The number of objects successfully popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) and inserted in

        .
  id: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: TryPopRange(T[], int, int)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 555
  summary: >-
    Attempts to pop and return multiple objects from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml)

    atomically.
  syntax:
    content:
      CSharp: public int TryPopRange(T[] items, int startIndex, int count)
    parameters:
    - id: items
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The [System.Array]() to which objects popped from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) will be added.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based offset in  at which to begin

        inserting elements from the top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to be popped from top of the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) and inserted into .
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The number of objects successfully popped from the top of

        the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) and inserted in .
  id: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: IProducerConsumerCollection<T>.TryTake(out T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 688
  summary: Attempts to remove and return an object from the [System.Collections.Concurrent.IProducerConsumerCollection{T}]().
  syntax:
    content:
      CSharp: bool IProducerConsumerCollection<T>.TryTake(out T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        When this method returns, if the operation was successful,  contains the

        object removed. If no object was available to be removed, the value is unspecified.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if an element was removed and returned successfully; otherwise, false.
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 698
  summary: Copies the items stored in the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml) to a new array.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return:
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: A new array containing a snapshot of elements copied from the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  id: System.Collections.Concurrent.ConcurrentStack`1.ToArray
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 732
  summary: Returns an enumerator that iterates through the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: An enumerator for the [System.Collections.Concurrent.ConcurrentStack`1](System.Collections.Concurrent.ConcurrentStack`1.yml).
  id: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Concurrent.ConcurrentStack`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentStack.cs
    startLine: 766
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: >-
        An [System.Collections.IEnumerator]() that can be used to iterate through

        the collection.
  id: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
