items:
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  href: System.Collections.Concurrent.EnumerablePartitionerOptions.yml
  name: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
  type: Enum
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 23
  syntax:
    content:
      CSharp: public enum EnumerablePartitionerOptions
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.ValueType
    name: ValueType
    isExternal: true
  - id: System.Enum
    name: Enum
    isExternal: true
  id: System.Collections.Concurrent.EnumerablePartitionerOptions
  children:
  - System.Collections.Concurrent.EnumerablePartitionerOptions.None
  - System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.None
  href: System.Collections.Concurrent.EnumerablePartitionerOptions.yml
  name: None
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions.None
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 29
  summary: Use the default behavior (i.e., use buffering to achieve optimal performance)
  syntax:
    content:
      CSharp: None = 0x0
  id: System.Collections.Concurrent.EnumerablePartitionerOptions.None
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  href: System.Collections.Concurrent.EnumerablePartitionerOptions.yml
  name: NoBuffering
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 38
  summary: >-
    Creates a partitioner that will take items from the source enumerable one at a time

    and will not use intermediate storage that can be accessed more efficiently by multiple threads.

    This option provides support for low latency (items will be processed as soon as they are available from

    the source) and partial support for dependencies between items (a thread cannot deadlock waiting for an item

    that it, itself, is responsible for processing).
  syntax:
    content:
      CSharp: NoBuffering = 0x1
  id: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
