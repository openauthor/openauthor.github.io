id: System.Collections.Concurrent.OrderablePartitioner`1
href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
name:
  CSharp: OrderablePartitioner`1
qualifiedName:
  CSharp: System.Collections.Concurrent.OrderablePartitioner`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
  startLine: 60
summary: Represents a particular manner of splitting an orderable data source into multiple partitions.
syntax:
  content:
    CSharp: public abstract class OrderablePartitioner<TSource>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
- id: System.Collections.Concurrent.Partitioner{`0}
  name: Partitioner
  href: System.Collections.Concurrent.Partitioner{`0}
items:
- id: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: GetOrderablePartitions
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 98
  summary: Partitions the underlying collection into the specified number of orderable partitions.
  syntax:
    content:
      CSharp: public abstract IList<IEnumerator<KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount);
    parameters:
    - id: partitionCount
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of partitions to create.
    return:
      id: IList
      description: A list containing  enumerators.
- id: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: GetOrderableDynamicPartitions
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 125
  summary: >-
    Creates an object that can partition the underlying collection into a variable number of

    partitions.
  syntax:
    content:
      CSharp: public virtual IEnumerable<KeyValuePair<long, TSource>> GetOrderableDynamicPartitions()
    parameters: []
    return:
      id: IEnumerable
      description: An object that can create partitions over the underlying data source.
- id: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: KeysOrderedInEachPartition
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 133
  summary: Gets whether elements in each partition are yielded in the order of increasing keys.
  syntax:
    content:
      CSharp: public bool KeysOrderedInEachPartition { get; private set; }
    parameters:
    - id: KeysOrderedInEachPartition
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: KeysOrderedAcrossPartitions
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 143
  summary: Gets whether elements in an earlier partition always come before elements in a later partition.
  syntax:
    content:
      CSharp: public bool KeysOrderedAcrossPartitions { get; private set; }
    parameters:
    - id: KeysOrderedAcrossPartitions
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: KeysNormalized
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 153
  summary: Gets whether order keys are normalized.
  syntax:
    content:
      CSharp: public bool KeysNormalized { get; private set; }
    parameters:
    - id: KeysNormalized
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: GetPartitions
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 164
  summary: Partitions the underlying collection into the given number of ordered partitions.
  syntax:
    content:
      CSharp: public override IList<IEnumerator<TSource>> GetPartitions(int partitionCount)
    parameters:
    - id: partitionCount
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of partitions to create.
    return:
      id: IList
      description: A list containing  enumerators.
- id: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  href: System.Collections.Concurrent.OrderablePartitioner`1.yaml
  name:
    CSharp: GetDynamicPartitions
  qualifiedName:
    CSharp: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 205
  summary: >-
    Creates an object that can partition the underlying collection into a variable number of

    partitions.
  syntax:
    content:
      CSharp: public override IEnumerable<TSource> GetDynamicPartitions()
    parameters: []
    return:
      id: IEnumerable
      description: An object that can create partitions over the underlying data source.
