items:
- uid: System.Collections.Concurrent.Partitioner
  href: System.Collections.Concurrent.Partitioner.yml
  name: Partitioner
  fullName: System.Collections.Concurrent.Partitioner
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 66
  summary: Provides common partitioning strategies for arrays, lists, and enumerables.
  syntax:
    content:
      CSharp: public static class Partitioner
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Concurrent.Partitioner
  children:
  - System.Collections.Concurrent.Partitioner.Create``1(IList{``0},System.Boolean)
  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  - System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0})
  - System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
- uid: System.Collections.Concurrent.Partitioner.Create``1(IList{``0},System.Boolean)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create<TSource>(IList<TSource>, bool)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(IList<TSource>, bool)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 81
  summary: >-
    Creates an orderable partitioner from an

    instance.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<TSource> Create<TSource>(IList<TSource> list, bool loadBalance)
    parameters:
    - id: list
      type:
        id: IList{``0}
        name: IList{``0}
        isExternal: true
      description: The list to be partitioned.
    - id: loadBalance
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        A Boolean value that indicates whether the created partitioner should dynamically

        load balance between partitions rather than statically partition.
    return:
      id: OrderablePartitioner
      description: An orderable partitioner based on the input list.
  id: System.Collections.Concurrent.Partitioner.Create``1(IList{``0},System.Boolean)
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create<TSource>(TSource[], bool)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(TSource[], bool)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 109
  summary: Creates an orderable partitioner from a @!:System.Array- instance.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The array to be partitioned.
    - id: loadBalance
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        A Boolean value that indicates whether the created partitioner should dynamically load balance

        between partitions rather than statically partition.
    return:
      id: OrderablePartitioner
      description: An orderable partitioner based on the input array.
  id: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
- uid: System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0})
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create<TSource>(IEnumerable<TSource>)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 140
  summary: Creates an orderable partitioner from a  instance.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<TSource> Create<TSource>(IEnumerable<TSource> source)
    parameters:
    - id: source
      type:
        id: IEnumerable{``0}
        name: IEnumerable{``0}
        isExternal: true
      description: The enumerable to be partitioned.
    return:
      id: OrderablePartitioner
      description: An orderable partitioner based on the input array.
  id: System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0})
- uid: System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(IEnumerable<TSource>, System.Collections.Concurrent.EnumerablePartitionerOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 162
  summary: Creates an orderable partitioner from a  instance.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<TSource> Create<TSource>(IEnumerable<TSource> source, EnumerablePartitionerOptions partitionerOptions)
    parameters:
    - id: source
      type:
        id: IEnumerable{``0}
        name: IEnumerable{``0}
        isExternal: true
      description: The enumerable to be partitioned.
    - id: partitionerOptions
      type:
        id: System.Collections.Concurrent.EnumerablePartitionerOptions
        name: EnumerablePartitionerOptions
        href: System.Collections.Concurrent.EnumerablePartitionerOptions.yml
      description: Options to control the buffering behavior of the partitioner.
    return:
      id: OrderablePartitioner
      description: An orderable partitioner based on the input array.
  id: System.Collections.Concurrent.Partitioner.Create``1(IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create(long, long)
  fullName: System.Collections.Concurrent.Partitioner.Create(long, long)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 181
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The upper, exclusive bound of the range.
    return:
      id: OrderablePartitioner
      description: A partitioner.
  id: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create(long, long, long)
  fullName: System.Collections.Concurrent.Partitioner.Create(long, long, long)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 204
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The size of each subrange.
    return:
      id: OrderablePartitioner
      description: A partitioner.
  id: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create(int, int)
  fullName: System.Collections.Concurrent.Partitioner.Create(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 238
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The upper, exclusive bound of the range.
    return:
      id: OrderablePartitioner
      description: A partitioner.
  id: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  href: System.Collections.Concurrent.Partitioner.yml
  name: Create(int, int, int)
  fullName: System.Collections.Concurrent.Partitioner.Create(int, int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 261
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content:
      CSharp: public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The size of each subrange.
    return:
      id: OrderablePartitioner
      description: A partitioner.
  id: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
