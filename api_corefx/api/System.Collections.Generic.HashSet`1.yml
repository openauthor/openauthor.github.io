items:
- uid: System.Collections.Generic.HashSet`1
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 50
  syntax:
    content:
      CSharp: 'public class HashSet<T> : ISet<T>, ICollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Generic.HashSet`1
  children:
  - System.Collections.Generic.HashSet`1.#ctor
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.HashSet`1.Clear
  - System.Collections.Generic.HashSet`1.Contains(`0)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.HashSet`1.Remove(`0)
  - System.Collections.Generic.HashSet`1.Count
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.HashSet`1.GetEnumerator
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.HashSet`1.Add(`0)
  - System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.CopyTo(`0[])
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.HashSet`1.Comparer
  - System.Collections.Generic.HashSet`1.TrimExcess
- uid: System.Collections.Generic.HashSet`1.#ctor
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet()
  fullName: System.Collections.Generic.HashSet<T>.HashSet()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 76
  syntax:
    content:
      CSharp: 'public HashSet(): this (EqualityComparer<T>.Default)'
    parameters: []
  id: System.Collections.Generic.HashSet`1.#ctor
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 80
  syntax:
    content:
      CSharp: public HashSet(IEqualityComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
  id: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 94
  syntax:
    content:
      CSharp: 'public HashSet(IEnumerable<T> collection): this (collection, EqualityComparer<T>.Default)'
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: HashSet(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 105
  summary: >-
    Implementation Notes:

    Since resizes are relatively expensive (require rehashing), this attempts to minimize

    the need to resize by setting the initial capacity based on size of collection.
  syntax:
    content:
      CSharp: 'public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer): this (comparer)'
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
  id: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Generic.HashSet`1.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 142
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Generic.HashSet`1.Clear
  href: System.Collections.Generic.HashSet`1.yml
  name: Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 151
  summary: >-
    Remove all items from this set. This clears the elements but not the underlying

    buckets and slots array. Follow this call by TrimExcess to release these.
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
  id: System.Collections.Generic.HashSet`1.Clear
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  href: System.Collections.Generic.HashSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 173
  summary: Checks if this hashset contains the item
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: item to check for containment
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if item contained; false if not
  id: System.Collections.Generic.HashSet`1.Contains(`0)
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 196
  summary: Copy items in this hashset to array, starting at arrayIndex
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: array to add items to
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: index to start at
  id: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  href: System.Collections.Generic.HashSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 206
  summary: Remove item from this hashset
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: item to remove
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if removed; false if not (i.e. if the item wasn't in the HashSet)
  id: System.Collections.Generic.HashSet`1.Remove(`0)
- uid: System.Collections.Generic.HashSet`1.Count
  href: System.Collections.Generic.HashSet`1.yml
  name: Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 253
  summary: Number of elements in this hashset
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.HashSet`1.Count
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Generic.HashSet`1.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 261
  summary: Whether this is readonly
  syntax:
    content:
      CSharp: bool ICollection<T>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  href: System.Collections.Generic.HashSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 270
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Generic.HashSet`1.Enumerator
        name: Enumerator
        href: System.Collections.Generic.HashSet`1.Enumerator.yml
  id: System.Collections.Generic.HashSet`1.GetEnumerator
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Generic.HashSet`1.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 275
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
  id: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Generic.HashSet`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 280
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
  id: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  href: System.Collections.Generic.HashSet`1.yml
  name: Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 295
  summary: >-
    Add item to this HashSet. Returns bool indicating whether item was added (won't be

    added if already present)
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if added, false if already present
  id: System.Collections.Generic.HashSet`1.Add(`0)
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 308
  summary: >-
    Take the union of this HashSet with other. Modifies this set.



    Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding

    multiple resizes ended up not being useful in practice; quickly gets to the

    point where it's a wasteful check.
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: enumerable with items to add
  id: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 336
  summary: >-
    Takes the intersection of this set with other. Modifies this set.



    Implementation Notes:

    We get better perf if other is a hashset using same equality comparer, because we

    get constant contains check in other. Resulting cost is O(n1) to iterate over this.



    If we can't go above route, iterate over the other and mark intersection by checking

    contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1.



    Attempts to return early based on counts alone, using the property that the

    intersection of anything with the empty set is the empty set.
  syntax:
    content:
      CSharp: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: enumerable with items to add
  id: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 378
  summary: Remove items in other from this set. Modifies this set.
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: enumerable with items to remove
  id: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 410
  summary: Takes symmetric difference (XOR) with other and this set. Modifies this set.
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: enumerable with items to XOR
  id: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 462
  summary: >-
    Checks if this is a subset of other.



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it's a subset of anything, including the empty set

    2. If other has unique elements according to this equality comparer, and this has more

    elements than other, then it can't be a subset.



    Furthermore, if other is a hashset using the same equality comparer, we can use a

    faster element-wise check.
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if this is a subset of other; false if not
  id: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 513
  summary: >-
    Checks if this is a proper subset of other (i.e. strictly contained in)



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it's a proper subset of a set that contains at least

    one element, but it's not a proper subset of the empty set.

    2. If other has unique elements according to this equality comparer, and this has >=

    the number of elements in other, then this can't be a proper subset.



    Furthermore, if other is a hashset using the same equality comparer, we can use a

    faster element-wise check.
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if this is a proper subset of other; false if not
  id: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 560
  summary: >-
    Checks if this is a superset of other



    Implementation Notes:

    The following properties are used up-front to avoid element-wise checks:

    1. If other has no elements (it's the empty set), then this is a superset, even if this

    is also the empty set.

    2. If other has unique elements according to this equality comparer, and this has less

    than the number of elements in other, then this can't be a superset
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if this is a superset of other; false if not
  id: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 612
  summary: >-
    Checks if this is a proper superset of other (i.e. other strictly contained in this)



    Implementation Notes:

    This is slightly more complicated than above because we have to keep track if there

    was at least one element not contained in other.



    The following properties are used up-front to avoid element-wise checks:

    1. If this is the empty set, then it can't be a proper superset of any set, even if

    other is the empty set.

    2. If other is an empty set and this contains at least 1 element, then this is a proper

    superset.

    3. If other has unique elements according to this equality comparer, and other's count

    is greater than or equal to this count, then this can't be a proper superset



    Furthermore, if other has unique elements according to this equality comparer, we can

    use a faster element-wise check.
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if this is a proper superset of other; false if not
  id: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 657
  summary: Checks if this set overlaps other (i.e. they share at least one item)
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if these have at least one common element; false if disjoint
  id: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 686
  summary: >-
    Checks if this and other contain the same elements. This is set equality:

    duplicates and order are ignored
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 725
  syntax:
    content:
      CSharp: public void CopyTo(T[] array)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
  id: System.Collections.Generic.HashSet`1.CopyTo(`0[])
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  href: System.Collections.Generic.HashSet`1.yml
  name: CopyTo(T[], int, int)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 727
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int arrayIndex, int count)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  href: System.Collections.Generic.HashSet`1.yml
  name: RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 771
  summary: Remove elements that match specified predicate. Returns the number of elements removed
  syntax:
    content:
      CSharp: public int RemoveWhere(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
- uid: System.Collections.Generic.HashSet`1.Comparer
  href: System.Collections.Generic.HashSet`1.yml
  name: Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 803
  summary: >-
    Gets the IEqualityComparer that is used to determine equality of keys for

    the HashSet.
  syntax:
    content:
      CSharp: public IEqualityComparer<T> Comparer { get; }
    parameters:
    - id: Comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
  id: System.Collections.Generic.HashSet`1.Comparer
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  href: System.Collections.Generic.HashSet`1.yml
  name: TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 822
  summary: >-
    Sets the capacity of this list to the size of the list (rounded up to nearest prime),

    unless count is 0, in which case we release references.



    This method can be used to minimize a list's memory overhead once it is known that no

    new elements will be added to the list. To completely clear a list and release all

    memory referenced by the list, execute the following statements:



    list.Clear();

    list.TrimExcess();
  syntax:
    content:
      CSharp: public void TrimExcess()
    parameters: []
  id: System.Collections.Generic.HashSet`1.TrimExcess
