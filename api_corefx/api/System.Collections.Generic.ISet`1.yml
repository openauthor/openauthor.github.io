items:
- uid: System.Collections.Generic.ISet`1
  href: System.Collections.Generic.ISet`1.yml
  name: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  type: Interface
  source:
    remote: &o0
      path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 12
  summary: >-
    Generic collection that guarantees the uniqueness of its elements, as defined

    by some comparer. It also supports basic set operations such as Union, Intersection,

    Complement and Exclusive Complement.
  syntax:
    content:
      CSharp: 'public interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable'
  id: System.Collections.Generic.ISet`1
  children:
  - System.Collections.Generic.ISet`1.Add(`0)
  - System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.Add(`0)
  href: System.Collections.Generic.ISet`1.yml
  name: Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 15
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.Add(`0)
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 18
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 21
  syntax:
    content:
      CSharp: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 24
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 27
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 30
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 33
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 36
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 39
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 42
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.ISet`1.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime/src/System/Collections/Generic/ISet.cs
    startLine: 45
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
