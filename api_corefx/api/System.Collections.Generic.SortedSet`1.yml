items:
- uid: System.Collections.Generic.SortedSet`1
  href: System.Collections.Generic.SortedSet`1.yml
  name: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 43
  syntax:
    content:
      CSharp: 'public class SortedSet<T> : ISet<T>, ICollection<T>, ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Generic.SortedSet`1
  children:
  - System.Collections.Generic.SortedSet`1.#ctor
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.Count
  - System.Collections.Generic.SortedSet`1.Comparer
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SortedSet`1.Add(`0)
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SortedSet`1.Remove(`0)
  - System.Collections.Generic.SortedSet`1.Clear
  - System.Collections.Generic.SortedSet`1.Contains(`0)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SortedSet`1.GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.SortedSet`1.Min
  - System.Collections.Generic.SortedSet`1.Max
  - System.Collections.Generic.SortedSet`1.Reverse
  - System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
- uid: System.Collections.Generic.SortedSet`1.#ctor
  href: System.Collections.Generic.SortedSet`1.yml
  name: SortedSet()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 60
  syntax:
    content:
      CSharp: public SortedSet()
    parameters: []
  id: System.Collections.Generic.SortedSet`1.#ctor
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: SortedSet(IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 65
  syntax:
    content:
      CSharp: public SortedSet(IComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: SortedSet(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 78
  syntax:
    content:
      CSharp: 'public SortedSet(IEnumerable<T> collection): this (collection, Comparer<T>.Default)'
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: SortedSet(IEnumerable<T>, IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 80
  syntax:
    content:
      CSharp: 'public SortedSet(IEnumerable<T> collection, IComparer<T> comparer): this (comparer)'
    parameters:
    - id: collection
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Generic.SortedSet`1.Count
  href: System.Collections.Generic.SortedSet`1.yml
  name: Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 285
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Count
- uid: System.Collections.Generic.SortedSet`1.Comparer
  href: System.Collections.Generic.SortedSet`1.yml
  name: Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 294
  syntax:
    content:
      CSharp: public IComparer<T> Comparer { get; }
    parameters:
    - id: Comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Comparer
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Generic.SortedSet`1.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 302
  syntax:
    content:
      CSharp: bool ICollection<T>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Generic.SortedSet`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 310
  syntax:
    content:
      CSharp: bool ICollection.IsSynchronized { get; }
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Generic.SortedSet`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 318
  syntax:
    content:
      CSharp: object ICollection.SyncRoot { get; }
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  href: System.Collections.Generic.SortedSet`1.yml
  name: Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 349
  summary: Add the value ITEM to the tree, returns true if added, false if duplicate
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: item to be added
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Add(`0)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Generic.SortedSet`1.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 354
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  href: System.Collections.Generic.SortedSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 446
  summary: Remove the T ITEM from this SortedSet. Returns true if successfully removed.
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Remove(`0)
- uid: System.Collections.Generic.SortedSet`1.Clear
  href: System.Collections.Generic.SortedSet`1.yml
  name: Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 607
  syntax:
    content:
      CSharp: public virtual void Clear()
    parameters: []
  id: System.Collections.Generic.SortedSet`1.Clear
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  href: System.Collections.Generic.SortedSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 615
  syntax:
    content:
      CSharp: public virtual bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Contains(`0)
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  href: System.Collections.Generic.SortedSet`1.yml
  name: CopyTo(T[])
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 623
  syntax:
    content:
      CSharp: public void CopyTo(T[] array)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Generic.SortedSet`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 625
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  href: System.Collections.Generic.SortedSet`1.yml
  name: CopyTo(T[], int, int)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 627
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index, int count)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Generic.SortedSet`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 668
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  href: System.Collections.Generic.SortedSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 722
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Generic.SortedSet`1.Enumerator
        name: Enumerator
        href: System.Collections.Generic.SortedSet`1.Enumerator.yml
  id: System.Collections.Generic.SortedSet`1.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Generic.SortedSet`1.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 730
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Generic.SortedSet`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 735
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1100
  summary: >-
    Transform this set into its union with the IEnumerable OTHER

    Attempts to insert each element and rejects it if it exists.

    NOTE: The caller object is important as UnionWith uses the Comparator

    associated with THIS to check equality

    Throws ArgumentNullException if OTHER is null
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1260
  summary: >-
    Transform this set into its intersection with the IEnumerable OTHER

    NOTE: The caller object is important as IntersectionWith uses the

    comparator associated with THIS to check equality

    Throws ArgumentNullException if OTHER is null
  syntax:
    content:
      CSharp: public virtual void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1348
  summary: >-
    Transform this set into its complement with the IEnumerable OTHER

    NOTE: The caller object is important as ExceptWith uses the

    comparator associated with THIS to check equality

    Throws ArgumentNullException if OTHER is null
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1396
  summary: >-
    Transform this set so it contains elements in THIS or OTHER but not both

    NOTE: The caller object is important as SymmetricExceptWith uses the

    comparator associated with THIS to check equality

    Throws ArgumentNullException if OTHER is null
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1482
  summary: Checks whether this Tree is a subset of the IEnumerable other
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1527
  summary: Checks whether this Tree is a proper subset of the IEnumerable other
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1563
  summary: Checks whether this Tree is a super set of the IEnumerable other
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1597
  summary: Checks whether this Tree is a proper super set of the IEnumerable other
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1641
  summary: Checks whether this Tree has all elements in common with IEnumerable other
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1680
  summary: Checks whether this Tree has any elements in common with IEnumerable other
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  href: System.Collections.Generic.SortedSet`1.yml
  name: RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1807
  syntax:
    content:
      CSharp: public int RemoveWhere(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
- uid: System.Collections.Generic.SortedSet`1.Min
  href: System.Collections.Generic.SortedSet`1.yml
  name: Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1842
  syntax:
    content:
      CSharp: public T Min { get; }
    parameters:
    - id: Min
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Generic.SortedSet`1.Min
- uid: System.Collections.Generic.SortedSet`1.Max
  href: System.Collections.Generic.SortedSet`1.yml
  name: Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1852
  syntax:
    content:
      CSharp: public T Max { get; }
    parameters:
    - id: Max
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Generic.SortedSet`1.Max
- uid: System.Collections.Generic.SortedSet`1.Reverse
  href: System.Collections.Generic.SortedSet`1.yml
  name: Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1862
  syntax:
    content:
      CSharp: public IEnumerable<T> Reverse()
    parameters: []
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Collections.Generic.SortedSet`1.Reverse
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  href: System.Collections.Generic.SortedSet`1.yml
  name: GetViewBetween(T, T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1878
  summary: >-
    Returns a subset of this tree ranging from values lBound to uBound

    Any changes made to the subset reflect in the actual tree
  syntax:
    content:
      CSharp: public virtual SortedSet<T> GetViewBetween(T lowerValue, T upperValue)
    parameters:
    - id: lowerValue
      type:
        id: T
        name: T
        href: T
    - id: upperValue
      type:
        id: T
        name: T
        href: T
    return:
      id: SortedSet
      type:
        id: System.Collections.Generic.SortedSet`1
        name: SortedSet<T>
        href: System.Collections.Generic.SortedSet`1.yml
  id: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
