id: System.Collections.Immutable.IImmutableQueue`1
href: System.Collections.Immutable.IImmutableQueue`1.yaml
name:
  CSharp: IImmutableQueue`1
qualifiedName:
  CSharp: System.Collections.Immutable.IImmutableQueue`1
type: Interface
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
  startLine: 13
summary: An immutable queue.
syntax:
  content:
    CSharp: public interface IImmutableQueue<T>
items:
- id: System.Collections.Immutable.IImmutableQueue`1.IsEmpty
  href: System.Collections.Immutable.IImmutableQueue`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableQueue`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
    startLine: 23
  summary: Gets a value indicating whether this is the empty queue.
  syntax:
    content:
      CSharp: '[Pure] bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Immutable.IImmutableQueue`1.Clear
  href: System.Collections.Immutable.IImmutableQueue`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableQueue`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
    startLine: 29
  summary: Gets an empty queue.
  syntax:
    content:
      CSharp: '[Pure] IImmutableQueue<T> Clear();'
    parameters: []
    return:
      id: IImmutableQueue
- id: System.Collections.Immutable.IImmutableQueue`1.Peek
  href: System.Collections.Immutable.IImmutableQueue`1.yaml
  name:
    CSharp: Peek
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableQueue`1.Peek
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
    startLine: 39
  summary: Gets the element at the front of the queue.
  syntax:
    content:
      CSharp: '[Pure] T Peek();'
    parameters: []
    return:
      id: T
      description: The element on the top of the stack.
- id: System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)
  href: System.Collections.Immutable.IImmutableQueue`1.yaml
  name:
    CSharp: Enqueue
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
    startLine: 49
  summary: Adds an element to the back of the queue.
  syntax:
    content:
      CSharp: '[Pure] IImmutableQueue<T> Enqueue(T value);'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value.
    return:
      id: IImmutableQueue
      description: The new queue.
- id: System.Collections.Immutable.IImmutableQueue`1.Dequeue
  href: System.Collections.Immutable.IImmutableQueue`1.yaml
  name:
    CSharp: Dequeue
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableQueue`1.Dequeue
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableQueue.cs
    startLine: 57
  summary: Returns a queue that is missing the front element.
  syntax:
    content:
      CSharp: '[Pure] IImmutableQueue<T> Dequeue();'
    parameters: []
    return:
      id: IImmutableQueue
      description: A queue; never null.
