items:
- uid: System.Collections.Immutable.IImmutableSet`1
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IImmutableSet<T>
  fullName: System.Collections.Immutable.IImmutableSet<T>
  type: Interface
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 17
  summary: A set of elements that can only be modified by creating a new instance of the set.
  syntax:
    content:
      CSharp: public interface IImmutableSet<T>
  id: System.Collections.Immutable.IImmutableSet`1
  children:
  - System.Collections.Immutable.IImmutableSet`1.Clear
  - System.Collections.Immutable.IImmutableSet`1.Contains(`0)
  - System.Collections.Immutable.IImmutableSet`1.Add(`0)
  - System.Collections.Immutable.IImmutableSet`1.Remove(`0)
  - System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)
  - System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.Clear
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.IImmutableSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 24
  summary: Gets an empty set that retains the same sort or unordered semantics that this instance has.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Clear();'
    parameters: []
    return:
      id: IImmutableSet
  id: System.Collections.Immutable.IImmutableSet`1.Clear
- uid: System.Collections.Immutable.IImmutableSet`1.Contains(`0)
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 34
  summary: Determines whether this set contains the specified value.
  syntax:
    content:
      CSharp: '[Pure] bool Contains(T value);'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value.
    return:
      id: Boolean
      description: true if the set contains the specified value; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.Contains(`0)
- uid: System.Collections.Immutable.IImmutableSet`1.Add(`0)
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 42
  summary: Adds the specified value to this set.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Add(T value);'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value to add.
    return:
      id: IImmutableSet
      description: A new set with the element added, or this set if the element is already in this set.
  id: System.Collections.Immutable.IImmutableSet`1.Add(`0)
- uid: System.Collections.Immutable.IImmutableSet`1.Remove(`0)
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 50
  summary: Removes the specified value from this set.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Remove(T value);'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value to remove.
    return:
      id: IImmutableSet
      description: A new set with the element removed, or this set if the element is not in this set.
  id: System.Collections.Immutable.IImmutableSet`1.Remove(`0)
- uid: System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: TryGetValue(T, out T)
  fullName: System.Collections.Immutable.IImmutableSet<T>.TryGetValue(T, out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 65
  summary: Searches the set for a given value and returns the equal value it finds, if any.
  syntax:
    content:
      CSharp: '[Pure] bool TryGetValue(T equalValue, out T actualValue);'
    parameters:
    - id: equalValue
      type:
        id: T
        name: T
        href: T
      description: The value to search for.
    - id: actualValue
      type:
        id: T
        name: T
        href: T
      description: The value from the set that the search found, or  if the search yielded no match.
    return:
      id: Boolean
      description: A value indicating whether the search was successful.
  id: System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)
- uid: System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Intersect(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 73
  summary: Produces a set that contains elements that exist in both this set and the specified set.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Intersect(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The set to intersect with this one.
    return:
      id: IImmutableSet
      description: A new set that contains any elements that exist in both sets.
  id: System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Except(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 81
  summary: Removes a given set of items from this set.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Except(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to remove from this set.
    return:
      id: IImmutableSet
      description: The new set with the items removed; or the original set if none of the items were in the set.
  id: System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: SymmetricExcept(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 89
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> SymmetricExcept(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The other sequence of items.
    return:
      id: IImmutableSet
      description: The new set.
  id: System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Union(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 97
  summary: Adds a given set of items to this set.
  syntax:
    content:
      CSharp: '[Pure] IImmutableSet<T> Union(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to add.
    return:
      id: IImmutableSet
      description: The new set with the items added; or the original set if all the items were already in the set.
  id: System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 105
  summary: Checks whether a given sequence of items entirely describe the contents of this set.
  syntax:
    content:
      CSharp: '[Pure] bool SetEquals(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The sequence of items to check against this set.
    return:
      id: Boolean
      description: A value indicating whether the sets are equal.
  id: System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 113
  summary: Determines whether the current set is a proper (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] bool IsProperSubsetOf(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct subset of other; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 121
  summary: Determines whether the current set is a proper superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] bool IsProperSupersetOf(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct superset of other; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 129
  summary: Determines whether a set is a subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] bool IsSubsetOf(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a subset of other; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 137
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] bool IsSupersetOf(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.IImmutableSet`1.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Immutable.IImmutableSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableSet.cs
    startLine: 145
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: '[Pure] bool Overlaps(IEnumerable<T> other);'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set and other share at least one common element; otherwise, false.
  id: System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
