id: System.Collections.Immutable.IImmutableStack`1
href: System.Collections.Immutable.IImmutableStack`1.yaml
name:
  CSharp: IImmutableStack`1
qualifiedName:
  CSharp: System.Collections.Immutable.IImmutableStack`1
type: Interface
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
  startLine: 13
summary: An immutable stack.
syntax:
  content:
    CSharp: public interface IImmutableStack<T>
items:
- id: System.Collections.Immutable.IImmutableStack`1.IsEmpty
  href: System.Collections.Immutable.IImmutableStack`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableStack`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 23
  summary: Gets a value indicating whether this is the empty stack.
  syntax:
    content:
      CSharp: '[Pure] bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Immutable.IImmutableStack`1.Clear
  href: System.Collections.Immutable.IImmutableStack`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableStack`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 29
  summary: Gets an empty stack.
  syntax:
    content:
      CSharp: '[Pure] IImmutableStack<T> Clear();'
    parameters: []
    return:
      id: IImmutableStack
- id: System.Collections.Immutable.IImmutableStack`1.Push(`0)
  href: System.Collections.Immutable.IImmutableStack`1.yaml
  name:
    CSharp: Push
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableStack`1.Push(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 37
  summary: Pushes an element onto a stack and returns the new stack.
  syntax:
    content:
      CSharp: '[Pure] IImmutableStack<T> Push(T value);'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The element to push onto the stack.
    return:
      id: IImmutableStack
      description: The new stack.
- id: System.Collections.Immutable.IImmutableStack`1.Pop
  href: System.Collections.Immutable.IImmutableStack`1.yaml
  name:
    CSharp: Pop
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableStack`1.Pop
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 45
  summary: Pops the top element off the stack.
  syntax:
    content:
      CSharp: '[Pure] IImmutableStack<T> Pop();'
    parameters: []
    return:
      id: IImmutableStack
      description: The new stack; never null
- id: System.Collections.Immutable.IImmutableStack`1.Peek
  href: System.Collections.Immutable.IImmutableStack`1.yaml
  name:
    CSharp: Peek
  qualifiedName:
    CSharp: System.Collections.Immutable.IImmutableStack`1.Peek
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/IImmutableStack.cs
    startLine: 52
  summary: Gets the element on the top of the stack.
  syntax:
    content:
      CSharp: '[Pure] T Peek();'
    parameters: []
    return:
      id: T
