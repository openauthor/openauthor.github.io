id: System.Collections.Immutable.ImmutableArray`1.Builder
href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
name:
  CSharp: Builder
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableArray`1.Builder
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
  startLine: 17
summary: >-
  A writable array accessor that can be converted into an [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yaml)

  instance without allocating memory.
syntax:
  content:
    CSharp: public sealed class Builder
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Capacity
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Capacity
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Capacity
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 54
  summary: >-
    Get and sets the length of the internal array.  When set the internal array is

    reallocated to the given capacity if it is not already the specified length.
  syntax:
    content:
      CSharp: public int Capacity { get; set; }
    parameters:
    - id: Capacity
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Count
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 91
  summary: Gets or sets the length of the builder.
  syntax:
    content:
      CSharp: public int Count { get; set; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 137
  summary: Gets or sets the element at the specified index.
  syntax:
    content:
      CSharp: public T this[int index] { get; set; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: ToImmutable
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 174
  summary: Returns an immutable copy of the current contents of this collection.
  syntax:
    content:
      CSharp: public ImmutableArray<T> ToImmutable()
    parameters: []
    return:
      id: ImmutableArray
      description: An immutable array.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: MoveToImmutable
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 190
  summary: >-
    Extracts the internal array as an [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yaml) and replaces it

    with a zero length array.
  syntax:
    content:
      CSharp: public ImmutableArray<T> MoveToImmutable()
    parameters: []
    return:
      id: ImmutableArray
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Clear
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 206
  summary: Removes all items from the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 216
  summary: Inserts an item to the [System.Collections.Generic.IList`1](#) at the specified index.
  syntax:
    content:
      CSharp: public void Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index at which  should be inserted.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to insert into the [System.Collections.Generic.IList`1](#).
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 234
  summary: Adds an item to the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public void Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to add to the [System.Collections.Generic.ICollection`1](#).
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 244
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 264
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(params T[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 282
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: 'public void AddRange<TDerived>(TDerived[] items)where TDerived : T'
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 301
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(T[] items, int length)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The items.
    - id: length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements from the source array to add.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 320
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(ImmutableArray<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yaml
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 330
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(ImmutableArray<T> items, int length)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yaml
      description: The items.
    - id: length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements from the source array to add.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 344
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: 'public void AddRange<TDerived>(ImmutableArray<TDerived> items)where TDerived : T'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 356
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: public void AddRange(Builder items)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 366
  summary: Adds the specified items to the end of the array.
  syntax:
    content:
      CSharp: 'public void AddRange<TDerived>(ImmutableArray<TDerived>.Builder items)where TDerived : T'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 377
  summary: Removes the specified element.
  syntax:
    content:
      CSharp: public bool Remove(T element)
    parameters:
    - id: element
      type:
        id: T
        name: T
        href: T
      description: The element.
    return:
      id: Boolean
      description: A value indicating whether the specified element was found and removed from the collection.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 393
  summary: Removes the [System.Collections.Generic.IList`1](#) item at the specified index.
  syntax:
    content:
      CSharp: public void RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index of the item to remove.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 412
  summary: Determines whether the [System.Collections.Generic.ICollection`1](#) contains a specific value.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate in the [System.Collections.Generic.ICollection`1](#).
    return:
      id: Boolean
      description: true if  is found in the [System.Collections.Generic.ICollection`1](#); otherwise, false.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.ToArray
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: ToArray
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.ToArray
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 420
  summary: Creates a new array with the current contents of this Builder.
  syntax:
    content:
      CSharp: public T[] ToArray()
    parameters: []
    return: {}
- id: System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 437
  summary: Copies the current contents to the specified array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The array to copy to.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The starting index of the target array.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 464
  summary: Determines the index of a specific item in the [System.Collections.Generic.IList`1](#).
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate in the [System.Collections.Generic.IList`1](#).
    return:
      id: Int32
      description: The index of  if found in the list; otherwise, -1.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 476
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 489
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 503
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 539
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 556
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 576
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 590
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Reverse
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Reverse
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 624
  summary: Reverses the order of elements in the collection.
  syntax:
    content:
      CSharp: public void Reverse()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Sort
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Sort
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 632
  summary: Sorts the array.
  syntax:
    content:
      CSharp: public void Sort()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 644
  summary: Sorts the array.
  syntax:
    content:
      CSharp: public void Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 658
  summary: Sorts the array.
  syntax:
    content:
      CSharp: public void Sort(int index, int count, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the first element to consider in the sort.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to include in the sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableArray`1.Builder.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1+Builder.cs
    startLine: 675
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content:
      CSharp: public IEnumerator<T> GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      description: An enumerator.
