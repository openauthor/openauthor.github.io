items:
- uid: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  type: Struct
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 33
  summary: A readonly array with O(1) indexable lookup time.
  syntax:
    content:
      CSharp: public partial struct ImmutableArray<T>
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: System.ValueType
    name: System.ValueType
    isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1
  children:
  - System.Collections.Immutable.ImmutableArray`1.Empty
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IsEmpty
  - System.Collections.Immutable.ImmutableArray`1.Length
  - System.Collections.Immutable.ImmutableArray`1.IsDefault
  - System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableArray`1.Clear
  - System.Collections.Immutable.ImmutableArray`1.Sort
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.ToBuilder
  - System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.GetHashCode
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableArray`1.CastArray``1
  - System.Collections.Immutable.ImmutableArray`1.As``1
  - System.Collections.Immutable.ImmutableArray`1.OfType``1
- uid: System.Collections.Immutable.ImmutableArray`1.Empty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableArray<T>.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 39
  summary: An empty (initialized) instance of ImmutableArray{T}.
  syntax:
    content:
      CSharp: Empty
  id: System.Collections.Immutable.ImmutableArray`1.Empty
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator ==(ImmutableArray<T>, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator ==(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 68
  summary: Checks equality between two instances.
  syntax:
    content:
      CSharp: public static bool operator ==(ImmutableArray<T> left, ImmutableArray<T> right) { return left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the right of the operator.
    return:
      id: Boolean
      description: true if the values' underlying arrays are reference equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator !=(ImmutableArray<T>, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator !=(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 79
  summary: Checks inequality between two instances.
  syntax:
    content:
      CSharp: public static bool operator !=(ImmutableArray<T> left, ImmutableArray<T> right) { return !left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the right of the operator.
    return:
      id: Boolean
      description: true if the values' underlying arrays are reference not equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator ==(ImmutableArray<T>?, ImmutableArray<T>?)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator ==(System.Collections.Immutable.ImmutableArray<T>?, System.Collections.Immutable.ImmutableArray<T>?)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 90
  summary: Checks equality between two instances.
  syntax:
    content:
      CSharp: public static bool operator ==(ImmutableArray<T>? left, ImmutableArray<T>? right) { return left.GetValueOrDefault().Equals(right.GetValueOrDefault()); }
    parameters:
    - id: left
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        isExternal: true
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        isExternal: true
      description: The instance to the right of the operator.
    return:
      id: Boolean
      description: true if the values' underlying arrays are reference equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator !=(ImmutableArray<T>?, ImmutableArray<T>?)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator !=(System.Collections.Immutable.ImmutableArray<T>?, System.Collections.Immutable.ImmutableArray<T>?)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 101
  summary: Checks inequality between two instances.
  syntax:
    content:
      CSharp: public static bool operator !=(ImmutableArray<T>? left, ImmutableArray<T>? right) { return !left.GetValueOrDefault().Equals(right.GetValueOrDefault()); }
    parameters:
    - id: left
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        isExternal: true
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        isExternal: true
      description: The instance to the right of the operator.
    return:
      id: Boolean
      description: true if the values' underlying arrays are reference not equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
- uid: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: this[int]
  fullName: System.Collections.Immutable.ImmutableArray<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 113
  summary: Gets the element at the specified index in the read-only list.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IsEmpty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 159
  summary: Gets a value indicating whether this collection is empty.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.Length
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Length
  fullName: System.Collections.Immutable.ImmutableArray<T>.Length
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 168
  summary: Gets the number of array in the collection.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public int Length { get; }'
    parameters:
    - id: Length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.Length
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefault
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsDefault
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsDefault
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 233
  summary: Gets a value indicating whether this struct was initialized without an actual array instance.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsDefault { get; }'
    parameters:
    - id: IsDefault
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsDefault
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsDefaultOrEmpty
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsDefaultOrEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 242
  summary: Gets a value indicating whether this struct is empty or uninitialized.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsDefaultOrEmpty { get; }'
    parameters:
    - id: IsDefaultOrEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 279
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 293
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 306
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 320
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 334
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 372
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 390
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 409
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 423
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 461
  summary: Determines whether the specified item exists in the array.
  syntax:
    content:
      CSharp: '[Pure] public bool Contains(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Boolean
      description: true if an equal value was found in the array; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(T[])
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 471
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: '[Pure] public void CopyTo(T[] destination)'
    parameters:
    - id: destination
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The array to copy to.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 484
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: '[Pure] public void CopyTo(T[] destination, int destinationIndex)'
    parameters:
    - id: destination
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The array to copy to.
    - id: destinationIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index into the destination array to which the first copied element is written.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(int, T[], int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(int, T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 499
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: '[Pure] public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length)'
    parameters:
    - id: sourceIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index into this collection of the first element to copy.
    - id: destination
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The array to copy to.
    - id: destinationIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index into the destination array to which the first copied element is written.
    - id: length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to copy.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 513
  summary: Returns a new array with the specified value inserted at the specified position.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Insert(int index, T item)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 0-based index into the array at which the new item should be added.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to insert at the start of the array.
    return:
      id: ImmutableArray
      description: A new array.
  id: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: InsertRange(int, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.InsertRange(int, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 538
  summary: Inserts the specified values at the specified index.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> InsertRange(int index, IEnumerable<T> items)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to insert the value.
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The elements to insert.
    return:
      id: ImmutableArray
      description: The new immutable collection.
  id: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: InsertRange(int, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.InsertRange(int, System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 575
  summary: Inserts the specified values at the specified index.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> InsertRange(int index, ImmutableArray<T> items)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index at which to insert the value.
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The elements to insert.
    return:
      id: ImmutableArray
      description: The new immutable collection.
  id: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Add(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 600
  summary: Returns a new array with the specified value inserted at the end.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Add(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to insert at the end of the array.
    return:
      id: ImmutableArray
      description: A new array.
  id: System.Collections.Immutable.ImmutableArray`1.Add(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: AddRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 617
  summary: Adds the specified values to this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> AddRange(IEnumerable<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The values to add.
    return:
      id: ImmutableArray
      description: A new list with the elements added.
  id: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: AddRange(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.AddRange(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 629
  summary: Adds the specified values to this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> AddRange(ImmutableArray<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The values to add.
    return:
      id: ImmutableArray
      description: A new list with the elements added.
  id: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: SetItem(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.SetItem(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 654
  summary: Returns an array with the item at the specified position replaced.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> SetItem(int index, T item)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the item to replace.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The new item.
    return:
      id: ImmutableArray
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Replace(T, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Replace(T, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 673
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Replace(T oldValue, T newValue)'
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace.
    - id: newValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    return:
      id: ImmutableArray
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  id: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Replace(T, T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 689
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace.
    - id: newValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  id: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 708
  summary: >-
    Returns an array with the first occurrence of the specified element removed from the array.

    If no match is found, the current array is returned.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Remove(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to remove.
    return:
      id: ImmutableArray
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Remove(T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 723
  summary: >-
    Returns an array with the first occurrence of the specified element removed from the array.

    If no match is found, the current array is returned.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Remove(T item, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to remove.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 739
  summary: Returns an array with the element at the specified position removed.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveAt(int index)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 0-based index into the array for the element to omit from the returned array.
    return:
      id: ImmutableArray
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 751
  summary: Returns an array with the elements at the specified position removed.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveRange(int index, int length)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 0-based index into the array for the element to omit from the returned array.
    - id: length
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to remove.
    return:
      id: ImmutableArray
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 771
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveRange(IEnumerable<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableArray
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 787
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 816
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveRange(ImmutableArray<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableArray
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 832
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveRange(ImmutableArray<T> items, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 849
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> RemoveAll(Predicate<T> match)'
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to remove.
    return:
      id: ImmutableArray
      description: The new list.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Clear
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 883
  summary: Returns an empty array.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Clear()'
    parameters: []
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.Clear
- uid: System.Collections.Immutable.ImmutableArray`1.Sort
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 892
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Sort()'
    parameters: []
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.Sort
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort(IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 903
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Sort(IComparer<T> comparer)'
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort(int, int, IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort(int, int, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 916
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T> Sort(int index, int count, IComparer<T> comparer)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The index of the first element to consider in the sort.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to include in the sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.ToBuilder
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableArray<T>.ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 959
  summary: Returns a builder that is populated with the same contents as this array.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<T>.Builder ToBuilder()'
    parameters: []
    return:
      id: Builder
      description: The new builder.
  id: System.Collections.Immutable.ImmutableArray`1.ToBuilder
- uid: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 977
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content:
      CSharp: '[Pure] public Enumerator GetEnumerator()'
    parameters: []
    return:
      id: Enumerator
      description: An enumerator.
  id: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
- uid: System.Collections.Immutable.ImmutableArray`1.GetHashCode
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: GetHashCode()
  fullName: System.Collections.Immutable.ImmutableArray<T>.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 991
  summary: Returns a hash code for this instance.
  syntax:
    content:
      CSharp: '[Pure] public override int GetHashCode()'
    parameters: []
    return:
      id: Int32
      description: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
  id: System.Collections.Immutable.ImmutableArray`1.GetHashCode
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Equals(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1005
  summary: Determines whether the specified [System.Object](#) is equal to this instance.
  syntax:
    content:
      CSharp: '[Pure] public override bool Equals(object obj)'
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
      description: The [System.Object](#) to compare with this instance.
    return:
      id: Boolean
      description: true if the specified [System.Object](#) is equal to this instance; otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Equals(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Equals(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1023
  summary: Indicates whether the current object is equal to another object of the same type.
  syntax:
    content:
      CSharp: '[Pure] public bool Equals(ImmutableArray<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: An object to compare with this object.
    return:
      id: Boolean
      description: true if the current object is equal to the  parameter; otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CastUp<TDerived>(ImmutableArray<TDerived>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CastUp<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1038
  summary: >-
    Initializes a new instance of the [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) struct based on the contents

    of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.
  syntax:
    content:
      CSharp: '[Pure] public static ImmutableArray<T> CastUp<TDerived>(ImmutableArray<TDerived> items)where TDerived : class, T'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: The array to initialize the array with. No copy is made.
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Collections.Immutable.ImmutableArray`1.CastArray``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CastArray<TOther>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.CastArray<TOther>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1050
  summary: >-
    Initializes a new instance of the [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) struct by casting the underlying

    array to an array of type .
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<TOther> CastArray<TOther>()where TOther : class'
    parameters: []
    return:
      id: ImmutableArray
  id: System.Collections.Immutable.ImmutableArray`1.CastArray``1
- uid: System.Collections.Immutable.ImmutableArray`1.As``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: As<TOther>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.As<TOther>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1071
  summary: Creates an immutable array for this array, cast to a different element type.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableArray<TOther> As<TOther>()where TOther : class'
    parameters: []
    return:
      id: ImmutableArray
      description: >-
        A struct typed for the base element type. If the cast fails, an instance

        is returned whose [System.Collections.Immutable.ImmutableArray`1.IsDefault](System.Collections.Immutable.ImmutableArray`1.yml) property returns true.
  id: System.Collections.Immutable.ImmutableArray`1.As``1
- uid: System.Collections.Immutable.ImmutableArray`1.OfType``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: OfType<TResult>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.OfType<TResult>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1085
  summary: Filters the elements of this array to those assignable to the specified type.
  syntax:
    content:
      CSharp: '[Pure] public IEnumerable<TResult> OfType<TResult>()'
    parameters: []
    return:
      id: IEnumerable
      description: >-
        An System.Collections.Generic.IEnumerable<T> that contains elements from

        the input sequence of type TResult.
  id: System.Collections.Immutable.ImmutableArray`1.OfType``1
