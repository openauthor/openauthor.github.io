items:
- uid: System.Collections.Immutable.ImmutableArray`1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  type: Struct
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 33
  summary: A readonly array with O(1) indexable lookup time.
  syntax:
    content:
      CSharp: 'public struct ImmutableArray<T> : IList<T>, ICollection<T>, IEquatable<ImmutableArray<T>>, IImmutableList<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, IImmutableArray, IStructuralComparable, IStructuralEquatable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.ValueType
    name: ValueType
    isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1
  children:
  - System.Collections.Immutable.ImmutableArray`1.Empty
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableArray`1.IsEmpty
  - System.Collections.Immutable.ImmutableArray`1.Length
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IsDefault
  - System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableArray`1.Clear
  - System.Collections.Immutable.ImmutableArray`1.Sort
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.ToBuilder
  - System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.GetHashCode
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableArray`1.CastArray``1
  - System.Collections.Immutable.ImmutableArray`1.As``1
  - System.Collections.Immutable.ImmutableArray`1.OfType``1
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
- uid: System.Collections.Immutable.ImmutableArray`1.Empty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableArray<T>.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 39
  summary: An empty (initialized) instance of [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml).
  syntax:
    content:
      CSharp: public static readonly ImmutableArray<T> Empty;
  id: System.Collections.Immutable.ImmutableArray`1.Empty
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator ==(ImmutableArray<T>, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator ==(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 68
  summary: Checks equality between two instances.
  syntax:
    content:
      CSharp: public static bool operator ==(ImmutableArray<T> left, ImmutableArray<T> right)
    parameters:
    - id: left
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the right of the operator.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the values' underlying arrays are reference equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator !=(ImmutableArray<T>, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator !=(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Immutable.ImmutableArray<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 79
  summary: Checks inequality between two instances.
  syntax:
    content:
      CSharp: public static bool operator !=(ImmutableArray<T> left, ImmutableArray<T> right)
    parameters:
    - id: left
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The instance to the right of the operator.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the values' underlying arrays are reference not equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator ==(ImmutableArray<T>?, ImmutableArray<T>?)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator ==(System.Collections.Immutable.ImmutableArray<T>?, System.Collections.Immutable.ImmutableArray<T>?)
  type: Operator
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 90
  summary: Checks equality between two instances.
  syntax:
    content:
      CSharp: public static bool operator ==(ImmutableArray<T>? left, ImmutableArray<T>? right)
    parameters:
    - id: left
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: ImmutableArray<T>?
        isExternal: true
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: ImmutableArray<T>?
        isExternal: true
      description: The instance to the right of the operator.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the values' underlying arrays are reference equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: operator !=(ImmutableArray<T>?, ImmutableArray<T>?)
  fullName: System.Collections.Immutable.ImmutableArray<T>.operator !=(System.Collections.Immutable.ImmutableArray<T>?, System.Collections.Immutable.ImmutableArray<T>?)
  type: Operator
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 101
  summary: Checks inequality between two instances.
  syntax:
    content:
      CSharp: public static bool operator !=(ImmutableArray<T>? left, ImmutableArray<T>? right)
    parameters:
    - id: left
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: ImmutableArray<T>?
        isExternal: true
      description: The instance to the left of the operator.
    - id: right
      type:
        id: System.Nullable{System.Collections.Immutable.ImmutableArray`1}
        name: ImmutableArray<T>?
        isExternal: true
      description: The instance to the right of the operator.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the values' underlying arrays are reference not equal; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
- uid: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: this[int]
  fullName: System.Collections.Immutable.ImmutableArray<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 113
  summary: Gets the element at the specified index in the read-only list.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList<T>.this[int]
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IList<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 133
  summary: Gets or sets the element at the specified index in the read-only list.
  syntax:
    content:
      CSharp: T IList<T>.this[int index] { get; set; }
    parameters:
    - id: System.Collections.Generic.IList<T>.this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 150
  summary: Gets a value indicating whether this instance is read only.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] bool ICollection<T>.IsReadOnly { get; }'
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Immutable.ImmutableArray`1.IsEmpty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 159
  summary: Gets a value indicating whether this collection is empty.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.Length
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Length
  fullName: System.Collections.Immutable.ImmutableArray<T>.Length
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 168
  summary: Gets the number of array in the collection.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public int Length { get; }'
    parameters:
    - id: Length
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.Length
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection<T>.Count
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 186
  summary: Gets the number of array in the collection.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] int ICollection<T>.Count { get; }'
    parameters:
    - id: System.Collections.Generic.ICollection<T>.Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IReadOnlyCollection<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 201
  summary: Gets the number of array in the collection.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] int IReadOnlyCollection<T>.Count { get; }'
    parameters:
    - id: System.Collections.Generic.IReadOnlyCollection<T>.Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IReadOnlyList<T>.this[int]
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IReadOnlyList<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 220
  summary: Gets the element at the specified index.
  syntax:
    content:
      CSharp: T IReadOnlyList<T>.this[int index] { get; }
    parameters:
    - id: System.Collections.Generic.IReadOnlyList<T>.this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefault
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsDefault
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsDefault
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 233
  summary: Gets a value indicating whether this struct was initialized without an actual array instance.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsDefault { get; }'
    parameters:
    - id: IsDefault
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsDefault
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IsDefaultOrEmpty
  fullName: System.Collections.Immutable.ImmutableArray<T>.IsDefaultOrEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 242
  summary: Gets a value indicating whether this struct is empty or uninitialized.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsDefaultOrEmpty { get; }'
    parameters:
    - id: IsDefaultOrEmpty
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 279
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: public int IndexOf(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 293
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: public int IndexOf(T item, int startIndex, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 306
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: public int IndexOf(T item, int startIndex)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 320
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: public int IndexOf(T item, int startIndex, int count)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.IndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 334
  summary: Searches the array for the specified item.
  syntax:
    content:
      CSharp: public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 372
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: public int LastIndexOf(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 390
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: public int LastIndexOf(T item, int startIndex)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 409
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: public int LastIndexOf(T item, int startIndex, int count)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: LastIndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.LastIndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 423
  summary: Searches the array for the specified item in reverse.
  syntax:
    content:
      CSharp: public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to begin the search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array where the item was found; or -1 if it could not be found.
  id: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 461
  summary: Determines whether the specified item exists in the array.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to search for.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if an equal value was found in the array; false otherwise.
  id: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(T[])
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 471
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] destination)
    parameters:
    - id: destination
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The array to copy to.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 484
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] destination, int destinationIndex)
    parameters:
    - id: destination
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The array to copy to.
    - id: destinationIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index into the destination array to which the first copied element is written.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CopyTo(int, T[], int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CopyTo(int, T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 499
  summary: Copies the contents of this array to the specified array.
  syntax:
    content:
      CSharp: public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length)
    parameters:
    - id: sourceIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index into this collection of the first element to copy.
    - id: destination
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The array to copy to.
    - id: destinationIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index into the destination array to which the first copied element is written.
    - id: length
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to copy.
  id: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 513
  summary: Returns a new array with the specified value inserted at the specified position.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array at which the new item should be added.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to insert at the start of the array.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new array.
  id: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: InsertRange(int, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.InsertRange(int, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 538
  summary: Inserts the specified values at the specified index.
  syntax:
    content:
      CSharp: public ImmutableArray<T> InsertRange(int index, IEnumerable<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to insert the value.
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The elements to insert.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new immutable collection.
  id: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: InsertRange(int, ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.InsertRange(int, System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 575
  summary: Inserts the specified values at the specified index.
  syntax:
    content:
      CSharp: public ImmutableArray<T> InsertRange(int index, ImmutableArray<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to insert the value.
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The elements to insert.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new immutable collection.
  id: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Add(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 600
  summary: Returns a new array with the specified value inserted at the end.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to insert at the end of the array.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new array.
  id: System.Collections.Immutable.ImmutableArray`1.Add(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: AddRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 617
  summary: Adds the specified values to this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The values to add.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements added.
  id: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: AddRange(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.AddRange(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 629
  summary: Adds the specified values to this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> AddRange(ImmutableArray<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The values to add.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements added.
  id: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: SetItem(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.SetItem(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 654
  summary: Returns an array with the item at the specified position replaced.
  syntax:
    content:
      CSharp: public ImmutableArray<T> SetItem(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of the item to replace.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The new item.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Replace(T, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Replace(T, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 673
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Replace(T oldValue, T newValue)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace.
    - id: newValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  id: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Replace(T, T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 689
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace.
    - id: newValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  id: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 708
  summary: >-
    Returns an array with the first occurrence of the specified element removed from the array.

    If no match is found, the current array is returned.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to remove.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Remove(T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 723
  summary: >-
    Returns an array with the first occurrence of the specified element removed from the array.

    If no match is found, the current array is returned.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Remove(T item, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item to remove.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 739
  summary: Returns an array with the element at the specified position removed.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array for the element to omit from the returned array.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 751
  summary: Returns an array with the elements at the specified position removed.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveRange(int index, int length)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 0-based index into the array for the element to omit from the returned array.
    - id: length
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to remove.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new array.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 771
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 787
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 816
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveRange(ImmutableArray<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveRange(System.Collections.Immutable.ImmutableArray<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 832
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveRange(ImmutableArray<T> items, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: RemoveAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 849
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public ImmutableArray<T> RemoveAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the elements

        to remove.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: The new list.
  id: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Clear
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 883
  summary: Returns an empty array.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Clear()
    parameters: []
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
  id: System.Collections.Immutable.ImmutableArray`1.Clear
- uid: System.Collections.Immutable.ImmutableArray`1.Sort
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort()
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 892
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Sort()
    parameters: []
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
  id: System.Collections.Immutable.ImmutableArray`1.Sort
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort(IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 903
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
  id: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Sort(int, int, IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Sort(int, int, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 916
  summary: Returns a sorted instance of this array.
  syntax:
    content:
      CSharp: public ImmutableArray<T> Sort(int index, int count, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of the first element to consider in the sort.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to include in the sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: The comparer to use in sorting. If null, the default comparer is used.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
  id: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.ToBuilder
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableArray<T>.ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 959
  summary: Returns a builder that is populated with the same contents as this array.
  syntax:
    content:
      CSharp: public Builder ToBuilder()
    parameters: []
    return:
      id: Builder
      type:
        id: System.Collections.Immutable.ImmutableArray`1.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray`1.Builder.yml
      description: The new builder.
  id: System.Collections.Immutable.ImmutableArray`1.ToBuilder
- uid: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 977
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Immutable.ImmutableArray`1.Enumerator
        name: Enumerator
        href: System.Collections.Immutable.ImmutableArray`1.Enumerator.yml
      description: An enumerator.
  id: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
- uid: System.Collections.Immutable.ImmutableArray`1.GetHashCode
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: GetHashCode()
  fullName: System.Collections.Immutable.ImmutableArray<T>.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 991
  summary: Returns a hash code for this instance.
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
  id: System.Collections.Immutable.ImmutableArray`1.GetHashCode
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Equals(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1005
  summary: Determines whether the specified [System.Object]() is equal to this instance.
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The [System.Object]() to compare with this instance.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the specified [System.Object]() is equal to this instance; otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: Equals(ImmutableArray<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.Equals(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1023
  summary: Indicates whether the current object is equal to another object of the same type.
  syntax:
    content:
      CSharp: public bool Equals(ImmutableArray<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
      description: An object to compare with this object.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current object is equal to the  parameter; otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CastUp<TDerived>(ImmutableArray<TDerived>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.CastUp<TDerived>(System.Collections.Immutable.ImmutableArray<TDerived>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1038
  summary: >-
    Initializes a new instance of the [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) struct based on the contents

    of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.
  syntax:
    content:
      CSharp: 'public static ImmutableArray<T> CastUp<TDerived>(ImmutableArray<TDerived> items)where TDerived : class, T'
    parameters:
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TDerived>
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: The array to initialize the array with. No copy is made.
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray`1
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray`1.yml
  id: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Collections.Immutable.ImmutableArray`1.CastArray``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: CastArray<TOther>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.CastArray<TOther>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1050
  summary: >-
    Initializes a new instance of the [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) struct by casting the underlying

    array to an array of type .
  syntax:
    content:
      CSharp: 'public ImmutableArray<TOther> CastArray<TOther>()where TOther : class'
    parameters: []
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TOther>
        href: System.Collections.Immutable.ImmutableArray{``0}
  id: System.Collections.Immutable.ImmutableArray`1.CastArray``1
- uid: System.Collections.Immutable.ImmutableArray`1.As``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: As<TOther>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.As<TOther>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1071
  summary: Creates an immutable array for this array, cast to a different element type.
  syntax:
    content:
      CSharp: 'public ImmutableArray<TOther> As<TOther>()where TOther : class'
    parameters: []
    return:
      id: ImmutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TOther>
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: >-
        A struct typed for the base element type. If the cast fails, an instance

        is returned whose [System.Collections.Immutable.ImmutableArray`1.IsDefault](System.Collections.Immutable.ImmutableArray`1.yml) property returns true.
  id: System.Collections.Immutable.ImmutableArray`1.As``1
- uid: System.Collections.Immutable.ImmutableArray`1.OfType``1
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: OfType<TResult>()
  fullName: System.Collections.Immutable.ImmutableArray<T>.OfType<TResult>()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1085
  summary: Filters the elements of this array to those assignable to the specified type.
  syntax:
    content:
      CSharp: public IEnumerable<TResult> OfType<TResult>()
    parameters: []
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TResult>
        isExternal: true
      description: >-
        An [System.Collections.Generic.IEnumerable`1]() that contains elements from

        the input sequence of type .
  id: System.Collections.Immutable.ImmutableArray`1.OfType``1
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList<T>.Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IList<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1099
  syntax:
    content:
      CSharp: void IList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: item
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList<T>.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IList<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1105
  syntax:
    content:
      CSharp: void IList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1111
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1117
  syntax:
    content:
      CSharp: void ICollection<T>.Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1123
  syntax:
    content:
      CSharp: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1134
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: An enumerator.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1147
  summary: Returns an enumerator for the contents of the array.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: An enumerator.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1158
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Clear()
    parameters: []
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1169
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Add(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1180
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1191
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Insert(int index, T element)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: element
      type:
        id: T
        name: T
        href: T
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.InsertRange(int, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.InsertRange(int, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1202
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.InsertRange(int index, IEnumerable<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1213
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Remove(T value, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1224
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1235
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.RemoveRange(int, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1246
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1257
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.SetItem(int, T)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.SetItem(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1268
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.SetItem(int index, T value)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1279
  summary: See [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml)
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
    - id: newValue
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.Add(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.Add(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1295
  summary: Adds an item to the [System.Collections.IList]().
  syntax:
    content:
      CSharp: int IList.Add(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to add to the [System.Collections.IList]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.Clear()
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1305
  summary: Removes all items from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content:
      CSharp: void IList.Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.Contains(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.Contains(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1318
  summary: Determines whether the [System.Collections.IList]() contains a specific value.
  syntax:
    content:
      CSharp: bool IList.Contains(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to locate in the [System.Collections.IList]().
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the [System.Object]() is found in the [System.Collections.IList](); otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.IndexOf(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.IndexOf(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1333
  summary: Determines the index of a specific item in the [System.Collections.IList]().
  syntax:
    content:
      CSharp: int IList.IndexOf(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to locate in the [System.Collections.IList]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of  if found in the list; otherwise, -1.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.Insert(int, object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.Insert(int, object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1347
  summary: Inserts an item to the [System.Collections.IList]() at the specified index.
  syntax:
    content:
      CSharp: void IList.Insert(int index, object value)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index at which  should be inserted.
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to insert into the [System.Collections.IList]().
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.IsFixedSize
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1359
  summary: Gets a value indicating whether this instance is fixed size.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] [DebuggerBrowsable(DebuggerBrowsableState.Never)] bool IList.IsFixedSize { get; }'
    parameters:
    - id: System.Collections.IList.IsFixedSize
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1372
  summary: Gets a value indicating whether this instance is read only.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] [DebuggerBrowsable(DebuggerBrowsableState.Never)] bool IList.IsReadOnly { get; }'
    parameters:
    - id: System.Collections.IList.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection.Count
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.ICollection.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1383
  summary: Gets the size of the array.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] [DebuggerBrowsable(DebuggerBrowsableState.Never)] int ICollection.Count { get; }'
    parameters:
    - id: System.Collections.ICollection.Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1398
  summary: See the [System.Collections.ICollection]() interface.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] [DebuggerBrowsable(DebuggerBrowsableState.Never)] bool ICollection.IsSynchronized { get; }'
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1412
  summary: Gets the sync root.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] [DebuggerBrowsable(DebuggerBrowsableState.Never)] object ICollection.SyncRoot { get; }'
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.Remove(object)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.Remove(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1424
  summary: Removes the first occurrence of a specific object from the [System.Collections.IList]().
  syntax:
    content:
      CSharp: void IList.Remove(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to remove from the [System.Collections.IList]().
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1435
  summary: Removes the [System.Collections.Generic.IList`1]() item at the specified index.
  syntax:
    content:
      CSharp: void IList.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index of the item to remove.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IList.this[int]
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IList.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1451
  summary: Gets or sets the [System.Object]() at the specified index.
  syntax:
    content:
      CSharp: '[ExcludeFromCodeCoverage] object IList.this[int index] { get; set; }'
    parameters:
    - id: System.Collections.IList.this[]
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1468
  summary: Copies the elements of the [System.Collections.ICollection]() to an [System.Array](), starting at a particular [System.Array]() index.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
      description: The one-dimensional [System.Array]() that is the destination of the elements copied from [System.Collections.ICollection](). The [System.Array]() must have zero-based indexing.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in  at which copying begins.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IStructuralEquatable.Equals(object, IEqualityComparer)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IStructuralEquatable.Equals(object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1482
  summary: Determines whether an object is structurally equal to the current instance.
  syntax:
    content:
      CSharp: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    parameters:
    - id: other
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to compare with the current instance.
    - id: comparer
      type:
        id: System.Collections.IEqualityComparer
        name: IEqualityComparer
        isExternal: true
      description: An object that determines whether the current instance and other are equal.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the two objects are equal; otherwise, false.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1513
  summary: Returns a hash code for the current instance.
  syntax:
    content:
      CSharp: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.IEqualityComparer
        name: IEqualityComparer
        isExternal: true
      description: An object that computes the hash code of the current object.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The hash code for the current instance.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  href: System.Collections.Immutable.ImmutableArray`1.yml
  name: IStructuralComparable.CompareTo(object, IComparer)
  fullName: System.Collections.Immutable.ImmutableArray<T>.System.Collections.IStructuralComparable.CompareTo(object, System.Collections.IComparer)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray`1.cs
    startLine: 1533
  summary: >-
    Determines whether the current collection object precedes, occurs in the

    same position as, or follows another object in the sort order.
  syntax:
    content:
      CSharp: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    parameters:
    - id: other
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to compare with the current instance.
    - id: comparer
      type:
        id: System.Collections.IComparer
        name: IComparer
        isExternal: true
      description: >-
        An object that compares members of the current collection object with the

        corresponding members of other.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        An integer that indicates the relationship of the current collection object

        to other.
  id: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
