id: System.Collections.Immutable.ImmutableDictionary`2.Builder
href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
name:
  CSharp: Builder
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
  startLine: 31
summary: >-
  A dictionary that mutates with little or no memory allocations,

  can produce and/or build on immutable dictionary instances very efficiently.
syntax:
  content:
    CSharp: public sealed class Builder
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: KeyComparer
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 87
  summary: Gets or sets the key comparer.
  syntax:
    content:
      CSharp: public IEqualityComparer<TKey> KeyComparer { get; set; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: ValueComparer
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 117
  summary: Gets or sets the value comparer.
  syntax:
    content:
      CSharp: public IEqualityComparer<TValue> ValueComparer { get; set; }
    parameters:
    - id: ValueComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`1}
        name: System.Collections.Generic.IEqualityComparer{`1}
        isExternal: true
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Count
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 144
  summary: Gets the number of elements contained in the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Keys
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 161
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2](#)
  syntax:
    content:
      CSharp: public IEnumerable<TKey> Keys { get; }
    parameters:
    - id: Keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Values
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Values
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 184
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2](#)
  syntax:
    content:
      CSharp: public IEnumerable<TValue> Values { get; }
    parameters:
    - id: Values
      type:
        id: System.Collections.Generic.IEnumerable{`1}
        name: System.Collections.Generic.IEnumerable{`1}
        isExternal: true
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 412
  summary: Gets or sets the element with the specified key.
  syntax:
    content:
      CSharp: public TValue this[TKey key] { get; set; }
    parameters:
    - id: this[]
      type:
        id: TValue
        name: TValue
        href: TValue
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 438
  summary: Adds a sequence of values to this collection.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")] public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        isExternal: true
      description: The items.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: RemoveRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 449
  summary: Removes any entries from the dictionaries with keys that match those found in the specified sequence.
  syntax:
    content:
      CSharp: public void RemoveRange(IEnumerable<TKey> keys)
    parameters:
    - id: keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The keys for entries to remove from the dictionary.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 465
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: GetValueOrDefault
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 475
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content:
      CSharp: '[Pure] public TValue GetValueOrDefault(TKey key)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key to search for.
    return:
      id: TValue
      description: The value for the key, or default(TValue) if no matching key was found.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: GetValueOrDefault
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 489
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content:
      CSharp: '[Pure] public TValue GetValueOrDefault(TKey key, TValue defaultValue)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key to search for.
    - id: defaultValue
      type:
        id: TValue
        name: TValue
        href: TValue
      description: The default value to return if no matching key is found in the dictionary.
    return:
      id: TValue
      description: The value for the key, or  if no matching key was found.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: ToImmutable
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 511
  summary: Creates an immutable dictionary based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableDictionary<TKey, TValue> ToImmutable()
    parameters: []
    return:
      id: ImmutableDictionary
      description: An immutable map.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 536
  summary: Adds an element with the provided key and value to the [System.Collections.Generic.IDictionary`2](#).
  syntax:
    content:
      CSharp: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The object to use as the key of the element to add.
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
      description: The object to use as the value of the element to add.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: ContainsKey
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 550
  summary: Determines whether the [System.Collections.Generic.IDictionary`2](#) contains an element with the specified key.
  syntax:
    content:
      CSharp: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key to locate in the [System.Collections.Generic.IDictionary`2](#).
    return:
      id: Boolean
      description: true if the [System.Collections.Generic.IDictionary`2](#) contains an element with the key; otherwise, false.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: ContainsValue
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 567
  summary: >-
    Determines whether the ImmutableSortedMap<TKey,TValue>

    contains an element with the specified value.
  syntax:
    content:
      CSharp: '[Pure] public bool ContainsValue(TValue value)'
    parameters:
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
      description: >-
        The value to locate in the ImmutableSortedMap<TKey,TValue>.

        The value can be null for reference types.
    return:
      id: Boolean
      description: >-
        true if the ImmutableSortedMap<TKey,TValue> contains

        an element with the specified value; otherwise, false.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 590
  summary: Removes the element with the specified key from the [System.Collections.Generic.IDictionary`2](#).
  syntax:
    content:
      CSharp: public bool Remove(TKey key)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key of the element to remove.
    return:
      id: Boolean
      description: true if the element is successfully removed; otherwise, false.  This method also returns false if  was not found in the original [System.Collections.Generic.IDictionary`2](#).
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: TryGetValue
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 605
  summary: Gets the value associated with the specified key.
  syntax:
    content:
      CSharp: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key whose value to get.
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the  parameter. This parameter is passed uninitialized.
    return:
      id: Boolean
      description: true if the object that implements [System.Collections.Generic.IDictionary`2](#) contains an element with the specified key; otherwise, false.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: TryGetKey
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 613
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yaml) interface.
  syntax:
    content:
      CSharp: public bool TryGetKey(TKey equalKey, out TKey actualKey)
    parameters:
    - id: equalKey
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: actualKey
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: Boolean
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 623
  summary: Adds an item to the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
      description: The object to add to the [System.Collections.Generic.ICollection`1](#).
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 632
  summary: Removes all items from the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 645
  summary: Determines whether the [System.Collections.Generic.ICollection`1](#) contains a specific value.
  syntax:
    content:
      CSharp: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
      description: The object to locate in the [System.Collections.Generic.ICollection`1](#).
    return:
      id: Boolean
      description: true if  is found in the [System.Collections.Generic.ICollection`1](#); otherwise, false.
- id: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableDictionary`2.Builder.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2+Builder.cs
    startLine: 675
  summary: Removes the first occurrence of a specific object from the [System.Collections.Generic.ICollection`1](#).
  syntax:
    content:
      CSharp: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
      description: The object to remove from the [System.Collections.Generic.ICollection`1](#).
    return:
      id: Boolean
      description: true if  was successfully removed from the [System.Collections.Generic.ICollection`1](#); otherwise, false. This method also returns false if  is not found in the original [System.Collections.Generic.ICollection`1](#).
