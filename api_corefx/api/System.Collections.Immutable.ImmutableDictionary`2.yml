items:
- uid: System.Collections.Immutable.ImmutableDictionary`2
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ImmutableDictionary<TKey, TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 17
  summary: An immutable unordered dictionary implementation.
  syntax:
    content:
      CSharp: public sealed partial class ImmutableDictionary<TKey, TValue>
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2
  children:
  - System.Collections.Immutable.ImmutableDictionary`2.Empty
  - System.Collections.Immutable.ImmutableDictionary`2.Clear
  - System.Collections.Immutable.ImmutableDictionary`2.Count
  - System.Collections.Immutable.ImmutableDictionary`2.IsEmpty
  - System.Collections.Immutable.ImmutableDictionary`2.KeyComparer
  - System.Collections.Immutable.ImmutableDictionary`2.ValueComparer
  - System.Collections.Immutable.ImmutableDictionary`2.Keys
  - System.Collections.Immutable.ImmutableDictionary`2.Values
  - System.Collections.Immutable.ImmutableDictionary`2.Item(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.ToBuilder
  - System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)
  - System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)
  - System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)
  - System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)
  - System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  - System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)
  - System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator
- uid: System.Collections.Immutable.ImmutableDictionary`2.Empty
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 25
  summary: An empty immutable dictionary with default equality comparers.
  syntax:
    content:
      CSharp: Empty
  id: System.Collections.Immutable.ImmutableDictionary`2.Empty
- uid: System.Collections.Immutable.ImmutableDictionary`2.Clear
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 125
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableDictionary<TKey, TValue> Clear()
    parameters: []
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.Clear
- uid: System.Collections.Immutable.ImmutableDictionary`2.Count
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 133
  summary: Gets the number of elements in this collection.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.Count
- uid: System.Collections.Immutable.ImmutableDictionary`2.IsEmpty
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 144
  summary: Gets a value indicating whether this instance is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.IsEmpty
- uid: System.Collections.Immutable.ImmutableDictionary`2.KeyComparer
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 152
  summary: Gets the key comparer.
  syntax:
    content:
      CSharp: public IEqualityComparer<TKey> KeyComparer { get; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.KeyComparer
- uid: System.Collections.Immutable.ImmutableDictionary`2.ValueComparer
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ValueComparer
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.ValueComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 160
  summary: Gets the value comparer used to determine whether values are equal.
  syntax:
    content:
      CSharp: public IEqualityComparer<TValue> ValueComparer { get; }
    parameters:
    - id: ValueComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`1}
        name: System.Collections.Generic.IEqualityComparer{`1}
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.ValueComparer
- uid: System.Collections.Immutable.ImmutableDictionary`2.Keys
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Keys
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 168
  summary: Gets the keys in the map.
  syntax:
    content:
      CSharp: public IEnumerable<TKey> Keys { get; }
    parameters:
    - id: Keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.Keys
- uid: System.Collections.Immutable.ImmutableDictionary`2.Values
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Values
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 185
  summary: Gets the values in the map.
  syntax:
    content:
      CSharp: public IEnumerable<TValue> Values { get; }
    parameters:
    - id: Values
      type:
        id: System.Collections.Generic.IEnumerable{`1}
        name: System.Collections.Generic.IEnumerable{`1}
        isExternal: true
  id: System.Collections.Immutable.ImmutableDictionary`2.Values
- uid: System.Collections.Immutable.ImmutableDictionary`2.Item(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: this[TKey]
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 245
  summary: Gets the  with the specified key.
  syntax:
    content:
      CSharp: public TValue this[TKey key] { get; }
    parameters:
    - id: this[]
      type:
        id: TValue
        name: TValue
        href: TValue
  id: System.Collections.Immutable.ImmutableDictionary`2.Item(`0)
- uid: System.Collections.Immutable.ImmutableDictionary`2.ToBuilder
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 290
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  syntax:
    content:
      CSharp: '[Pure] public Builder ToBuilder()'
    parameters: []
    return:
      id: Builder
  id: System.Collections.Immutable.ImmutableDictionary`2.ToBuilder
- uid: System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Add(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 302
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> Add(TKey key, TValue value)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)
- uid: System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: AddRange(IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 315
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")] public ImmutableDictionary<TKey, TValue> AddRange(IEnumerable<KeyValuePair<TKey, TValue>> pairs)'
    parameters:
    - id: pairs
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        isExternal: true
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
- uid: System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: SetItem(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.SetItem(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 328
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)
- uid: System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: SetItems(IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 344
  summary: Applies a given set of key=value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.
  syntax:
    content:
      CSharp: '[Pure] [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")] public ImmutableDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        isExternal: true
      description: The key=value pairs to set on the map.  Any keys that conflict with existing keys will overwrite the previous values.
    return:
      id: ImmutableDictionary
      description: An immutable dictionary.
  id: System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
- uid: System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Remove(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 358
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> Remove(TKey key)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)
- uid: System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: RemoveRange(IEnumerable<TKey>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 371
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> RemoveRange(IEnumerable<TKey> keys)'
    parameters:
    - id: keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ContainsKey(TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 405
  summary: Determines whether the specified key contains key.
  syntax:
    content:
      CSharp: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key.
    return:
      id: Boolean
      description: true if the specified key contains key; otherwise, false.
  id: System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)
- uid: System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 418
  summary: Determines whether [contains] [the specified key value pair].
  syntax:
    content:
      CSharp: public bool Contains(KeyValuePair<TKey, TValue> pair)
    parameters:
    - id: pair
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
      description: The key value pair.
    return:
      id: Boolean
      description: true if [contains] [the specified key value pair]; otherwise, false.
  id: System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
- uid: System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 426
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)
- uid: System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: TryGetKey(TKey, out TKey)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.TryGetKey(TKey, out TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 435
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: public bool TryGetKey(TKey equalKey, out TKey actualKey)
    parameters:
    - id: equalKey
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: actualKey
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)
- uid: System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: WithComparers(IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.WithComparers(System.Collections.Generic.IEqualityComparer<TKey>, System.Collections.Generic.IEqualityComparer<TValue>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 444
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> WithComparers(IEqualityComparer<TKey> keyComparer, IEqualityComparer<TValue> valueComparer)'
    parameters:
    - id: keyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
    - id: valueComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`1}
        name: System.Collections.Generic.IEqualityComparer{`1}
        isExternal: true
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})
- uid: System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: WithComparers(IEqualityComparer<TKey>)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.WithComparers(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 484
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableDictionary<TKey, TValue> WithComparers(IEqualityComparer<TKey> keyComparer)'
    parameters:
    - id: keyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
    return:
      id: ImmutableDictionary
  id: System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: ContainsValue(TValue)
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 502
  summary: >-
    Determines whether the ImmutableSortedMap<TKey,TValue>

    contains an element with the specified value.
  syntax:
    content:
      CSharp: '[Pure] public bool ContainsValue(TValue value)'
    parameters:
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
      description: >-
        The value to locate in the ImmutableSortedMap<TKey,TValue>.

        The value can be null for reference types.
    return:
      id: Boolean
      description: >-
        true if the ImmutableSortedMap<TKey,TValue> contains

        an element with the specified value; otherwise, false.
  id: System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)
- uid: System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator
  href: System.Collections.Immutable.ImmutableDictionary`2.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableDictionary`2.cs
    startLine: 521
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator
