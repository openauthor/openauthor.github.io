items:
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Builder
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 30
  summary: >-
    A hash set that mutates with little or no memory allocations,

    can produce and/or build on immutable hash set instances very efficiently.
  syntax:
    content:
      CSharp: 'public sealed class Builder : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, ISet<T>'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder
  children:
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Count
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Count
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 80
  summary: Gets the number of elements contained in the [System.Collections.Generic.ICollection`1]().
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Count
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 89
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content:
      CSharp: bool ICollection<T>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 102
  summary: Gets or sets the key comparer.
  syntax:
    content:
      CSharp: public IEqualityComparer<T> KeyComparer { get; set; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 176
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Immutable.ImmutableHashSet`1.Enumerator
        name: Enumerator
        href: System.Collections.Immutable.ImmutableHashSet`1.Enumerator.yml
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 189
  summary: Creates an immutable hash set based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableHashSet<T> ToImmutable()
    parameters: []
    return:
      id: ImmutableHashSet
      type:
        id: System.Collections.Immutable.ImmutableHashSet`1
        name: ImmutableHashSet<T>
        href: System.Collections.Immutable.ImmutableHashSet`1.yml
      description: An immutable set.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 211
  summary: Adds the specified item.
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if the item did not already belong to the collection.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 226
  summary: Removes the first occurrence of a specific object from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to remove from the [System.Collections.Generic.ICollection`1]().
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if  was successfully removed from the [System.Collections.Generic.ICollection`1](); otherwise, false. This method also returns false if  is not found in the original [System.Collections.Generic.ICollection`1]().
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 240
  summary: Determines whether the [System.Collections.Generic.ICollection`1]() contains a specific value.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate in the [System.Collections.Generic.ICollection`1]().
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if  is found in the [System.Collections.Generic.ICollection`1](); otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 249
  summary: Removes all items from the [System.Collections.Generic.ICollection`1]().
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 259
  summary: Removes all elements in the specified collection from the current set.
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection of items to remove from the set.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 269
  summary: Modifies the current set so that it contains only elements that are also in a specified collection.
  syntax:
    content:
      CSharp: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 280
  summary: Determines whether the current set is a proper (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a correct subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 290
  summary: Determines whether the current set is a proper (strict) superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 300
  summary: Determines whether the current set is a subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 310
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 320
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set and other share at least one common element; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 330
  summary: Determines whether the current set and the specified collection contain the same elements.
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is equal to other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 344
  summary: Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 354
  summary: Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 369
  summary: Adds an item to the [System.Collections.Generic.ICollection`1]().
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to add to the [System.Collections.Generic.ICollection`1]().
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 377
  summary: See the [System.Collections.Generic.ICollection`1]() interface.
  syntax:
    content:
      CSharp: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 399
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Immutable.ImmutableHashSet`1.Builder.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1+Builder.cs
    startLine: 410
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
