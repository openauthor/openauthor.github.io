items:
- uid: System.Collections.Immutable.ImmutableHashSet`1
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ImmutableHashSet<T>
  fullName: System.Collections.Immutable.ImmutableHashSet<T>
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 16
  summary: An immutable unordered hash set implementation.
  syntax:
    content:
      CSharp: public sealed partial class ImmutableHashSet<T>
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1
  children:
  - System.Collections.Immutable.ImmutableHashSet`1.Empty
  - System.Collections.Immutable.ImmutableHashSet`1.Clear
  - System.Collections.Immutable.ImmutableHashSet`1.Count
  - System.Collections.Immutable.ImmutableHashSet`1.IsEmpty
  - System.Collections.Immutable.ImmutableHashSet`1.KeyComparer
  - System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
  - System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
  - System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
  - System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
- uid: System.Collections.Immutable.ImmutableHashSet`1.Empty
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 24
  summary: An empty immutable hash set with the default comparer for .
  syntax:
    content:
      CSharp: Empty
  id: System.Collections.Immutable.ImmutableHashSet`1.Empty
- uid: System.Collections.Immutable.ImmutableHashSet`1.Clear
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 75
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableHashSet<T> Clear()
    parameters: []
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Clear
- uid: System.Collections.Immutable.ImmutableHashSet`1.Count
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 85
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.Count
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsEmpty
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 93
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.IsEmpty
- uid: System.Collections.Immutable.ImmutableHashSet`1.KeyComparer
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 103
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public IEqualityComparer<T> KeyComparer { get; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
  id: System.Collections.Immutable.ImmutableHashSet`1.KeyComparer
- uid: System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 176
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  syntax:
    content:
      CSharp: '[Pure] public Builder ToBuilder()'
    parameters: []
    return:
      id: Builder
  id: System.Collections.Immutable.ImmutableHashSet`1.ToBuilder
- uid: System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 188
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableHashSet<T> Add(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Add(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 201
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableHashSet<T> Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: TryGetValue(T, out T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.TryGetValue(T, out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 222
  summary: Searches the set for a given value and returns the equal value it finds, if any.
  syntax:
    content:
      CSharp: '[Pure] public bool TryGetValue(T equalValue, out T actualValue)'
    parameters:
    - id: equalValue
      type:
        id: T
        name: T
        href: T
      description: The value to search for.
    - id: actualValue
      type:
        id: T
        name: T
        href: T
      description: The value from the set that the search found, or the original value if the search yielded no match.
    return:
      id: Boolean
      description: A value indicating whether the search was successful.
  id: System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)
- uid: System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Union(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Union(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 241
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableHashSet<T> Union(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Intersect(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Intersect(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 253
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableHashSet<T> Intersect(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Except(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Except(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 266
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableHashSet<T> Except(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: SymmetricExcept(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.SymmetricExcept(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 279
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableHashSet<T> SymmetricExcept(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The other sequence of items.
    return:
      id: ImmutableHashSet
      description: The new set.
  id: System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 294
  summary: Checks whether a given sequence of items entirely describe the contents of this set.
  syntax:
    content:
      CSharp: '[Pure] public bool SetEquals(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The sequence of items to check against this set.
    return:
      id: Boolean
      description: A value indicating whether the sets are equal.
  id: System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 312
  summary: Determines whether the current set is a property (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsProperSubsetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 325
  summary: Determines whether the current set is a correct superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsProperSupersetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 338
  summary: Determines whether a set is a subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsSubsetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 351
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsSupersetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 364
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool Overlaps(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set and other share at least one common element; otherwise, false.
  id: System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 435
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)
- uid: System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: WithComparer(IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.WithComparer(System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 444
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableHashSet<T> WithComparer(IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
    return:
      id: ImmutableHashSet
  id: System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableHashSet`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableHashSet<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet`1.cs
    startLine: 591
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator
