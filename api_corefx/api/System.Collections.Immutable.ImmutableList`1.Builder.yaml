id: System.Collections.Immutable.ImmutableList`1.Builder
href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
name:
  CSharp: Builder
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableList`1.Builder
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
  startLine: 31
summary: >-
  A list that mutates with little or no memory allocations,

  can produce and/or build on immutable list instances very efficiently.
syntax:
  content:
    CSharp: public sealed class Builder
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableList`1.Builder.Count
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 74
  summary: Gets the number of elements in this list.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 132
  summary: Gets or sets the value for a given index into the list.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Usage", "CA2233:OperationsShouldNotOverflow", MessageId = "index+1", Justification = "There is no chance of this overflowing")] public T this[int index] { get; set; }'
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 164
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public int IndexOf(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Int32
- id: System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 172
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public void Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 180
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public void RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 188
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public void Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Clear
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 196
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 204
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
- id: System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 212
  summary: See [System.Collections.Generic.IList`1](#)
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
- id: System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 230
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public ImmutableList<T>.Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
- id: System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: ForEach
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 265
  summary: Performs the specified action on each element of the list.
  syntax:
    content:
      CSharp: public void ForEach(Action<T> action)
    parameters:
    - id: action
      type:
        id: System.Action{`0}
        name: System.Action{`0}
        isExternal: true
      description: The System.Action<T> delegate to perform on each element of the list.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 284
  summary: >-
    Copies the entire ImmutableList<T> to a compatible one-dimensional

    array, starting at the beginning of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 303
  summary: >-
    Copies the entire ImmutableList<T> to a compatible one-dimensional

    array, starting at the specified index of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index in array at which copying begins.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 326
  summary: >-
    Copies a range of elements from the ImmutableList<T> to

    a compatible one-dimensional array, starting at the specified index of the

    target array.
  syntax:
    content:
      CSharp: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based index in the source ImmutableList<T> at

        which copying begins.
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index in array at which copying begins.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to copy.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: GetRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 344
  summary: Creates a shallow copy of a range of elements in the source ImmutableList<T>.
  syntax:
    content:
      CSharp: public ImmutableList<T> GetRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based ImmutableList<T> index at which the range

        starts.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the range.
    return:
      id: ImmutableList
      description: A shallow copy of a range of elements in the source ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: ConvertAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 367
  summary: >-
    Converts the elements in the current ImmutableList<T> to

    another type, and returns a list containing the converted elements.
  syntax:
    content:
      CSharp: public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter)
    parameters:
    - id: converter
      type:
        id: System.Func{`0,``0}
        name: System.Func{`0,``0}
        isExternal: true
      description: >-
        A System.Converter<TInput,TOutput> delegate that converts each element from

        one type to another type.
    return:
      id: ImmutableList
      description: >-
        A ImmutableList<T> of the target type containing the converted

        elements from the current ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Exists
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 386
  summary: >-
    Determines whether the ImmutableList<T> contains elements

    that match the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool Exists(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to search for.
    return:
      id: Boolean
      description: >-
        true if the ImmutableList<T> contains one or more elements

        that match the conditions defined by the specified predicate; otherwise,

        false.
- id: System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Find
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 404
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the first occurrence within the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public T Find(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      description: >-
        The first element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 423
  summary: >-
    Retrieves all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public ImmutableList<T> FindAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to search for.
    return:
      id: ImmutableList
      description: >-
        A ImmutableList<T> containing all the elements that match

        the conditions defined by the specified predicate, if found; otherwise, an

        empty ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 442
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public int FindIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 460
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList<T> that extends

    from the specified index to the last element.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: The System.Predicate<T> delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 481
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList<T> that starts

    at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: The System.Predicate<T> delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindLast
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 503
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the last occurrence within the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public T FindLast(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      description: >-
        The last element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 522
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public int FindLastIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 541
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList<T> that extends

    from the first element to the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 565
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList<T> that contains

    the specified number of elements and ends at the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 593
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList<T>

    that extends from the specified index to the last element.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int index)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList<T> that extends from index

        to the last element, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 620
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList<T>

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int index, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList<T> that starts at index and

        contains count number of elements, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 648
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList<T>

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList<T> that starts at index and

        contains count number of elements, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 671
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList<T>

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList<T> that contains count number of elements

        and ends at index, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 698
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList<T>

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList<T> that contains count number of elements

        and ends at index, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 726
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList<T>

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList<T> that contains count number of elements

        and ends at index, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 750
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList<T>

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList<T> that contains count number of elements

        and ends at index, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: TrueForAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 769
  summary: >-
    Determines whether every element in the ImmutableList<T>

    matches the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool TrueForAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions to check against

        the elements.
    return:
      id: Boolean
      description: >-
        true if every element in the ImmutableList<T> matches the

        conditions defined by the specified predicate; otherwise, false. If the list

        has no elements, the return value is true.
- id: System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 787
  summary: Adds the elements of a sequence to the end of this collection.
  syntax:
    content:
      CSharp: public void AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: >-
        The sequence whose elements should be appended to this collection.

        The sequence itself cannot be null, but it can contain elements that are

        null, if type  is a reference type.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 806
  summary: >-
    Inserts the elements of a collection into the ImmutableList<T>

    at the specified index.
  syntax:
    content:
      CSharp: public void InsertRange(int index, IEnumerable<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index at which the new elements should be inserted.
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: >-
        The collection whose elements should be inserted into the ImmutableList<T>.

        The collection itself cannot be null, but it can contain elements that are

        null, if type T is a reference type.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: RemoveAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 825
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public int RemoveAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to remove.
    return:
      id: Int32
      description: The number of elements removed from the ImmutableList<T>
- id: System.Collections.Immutable.ImmutableList`1.Builder.Reverse
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Reverse
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 837
  summary: Reverses the order of the elements in the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public void Reverse()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 847
  summary: Reverses the order of the elements in the specified range.
  syntax:
    content:
      CSharp: public void Reverse(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to reverse.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the range to reverse.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Sort
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Sort
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 860
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the default comparer.
  syntax:
    content:
      CSharp: public void Sort()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 872
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the specified System.Comparison<T>.
  syntax:
    content:
      CSharp: public void Sort(Comparison<T> comparison)
    parameters:
    - id: comparison
      type:
        id: System.Comparison{`0}
        name: System.Comparison{`0}
        isExternal: true
      description: The System.Comparison<T> to use when comparing elements.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 886
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the specified comparer.
  syntax:
    content:
      CSharp: public void Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 906
  summary: >-
    Sorts the elements in a range of elements in ImmutableList<T>

    using the specified comparer.
  syntax:
    content:
      CSharp: public void Sort(int index, int count, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to sort.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The length of the range to sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 931
  summary: >-
    Searches the entire sorted System.Collections.Generic.List<T> for an element

    using the default comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 956
  summary: >-
    Searches the entire sorted System.Collections.Generic.List<T> for an element

    using the specified comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item, IComparer<T> comparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements.-or-null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 990
  summary: >-
    Searches a range of elements in the sorted System.Collections.Generic.List<T>

    for an element using the specified comparer and returns the zero-based index

    of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The length of the range to search.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableList`1.Builder.yaml
  name:
    CSharp: ToImmutable
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1+Builder.cs
    startLine: 1003
  summary: Creates an immutable list based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableList<T> ToImmutable()
    parameters: []
    return:
      id: ImmutableList
      description: An immutable list.
