id: System.Collections.Immutable.ImmutableList`1
href: System.Collections.Immutable.ImmutableList`1.yaml
name:
  CSharp: ImmutableList`1
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableList`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
  startLine: 16
summary: An immutable list implementation.
syntax:
  content:
    CSharp: public sealed partial class ImmutableList<T>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableList`1.Empty
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Empty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 24
  summary: An empty immutable list.
  syntax:
    content:
      CSharp: Empty
- id: System.Collections.Immutable.ImmutableList`1.Clear
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 54
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Clear()
    parameters: []
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 77
  summary: >-
    Searches the entire sorted System.Collections.Generic.List<T> for an element

    using the default comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 102
  summary: >-
    Searches the entire sorted System.Collections.Generic.List<T> for an element

    using the specified comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item, IComparer<T> comparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements.-or-null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: BinarySearch
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 136
  summary: >-
    Searches a range of elements in the sorted System.Collections.Generic.List<T>

    for an element using the specified comparer and returns the zero-based index

    of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The length of the range to search.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: Int32
      description: >-
        The zero-based index of item in the sorted System.Collections.Generic.List<T>,

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of System.Collections.Generic.List<T>.Count.
- id: System.Collections.Immutable.ImmutableList`1.IsEmpty
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 146
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Immutable.ImmutableList`1.Count
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 167
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableList`1.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 212
  summary: Gets the element of the set at the given index.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableList`1.ToBuilder
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: ToBuilder
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.ToBuilder
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 248
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  syntax:
    content:
      CSharp: '[Pure] public Builder ToBuilder()'
    parameters: []
    return:
      id: Builder
- id: System.Collections.Immutable.ImmutableList`1.Add(`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Add(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 260
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Add(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: AddRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 272
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> AddRange(IEnumerable<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Insert
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 293
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Insert(int index, T item)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: InsertRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 305
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> InsertRange(int index, IEnumerable<T> items)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 320
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Remove(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 329
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Remove(T value, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: RemoveRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 343
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> RemoveRange(int index, int count)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The starting index to begin removal.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to remove.
    return:
      id: ImmutableList
      description: A new list with the elements removed.
- id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: RemoveRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 367
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> RemoveRange(IEnumerable<T> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableList
      description: A new list with the elements removed.
- id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: RemoveRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 383
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableList
      description: A new list with the elements removed.
- id: System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: RemoveAt
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 415
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> RemoveAt(int index)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: RemoveAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 436
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> RemoveAll(Predicate<T> match)'
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to remove.
    return:
      id: ImmutableList
      description: The new list.
- id: System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: SetItem
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 448
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> SetItem(int index, T value)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 457
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Replace(T oldValue, T newValue)'
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
    - id: newValue
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Replace
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 466
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
    - id: newValue
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Reverse
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Reverse
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 486
  summary: Reverses the order of the elements in the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Reverse()'
    parameters: []
    return:
      id: ImmutableList
      description: The reversed list.
- id: System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 499
  summary: Reverses the order of the elements in the specified range.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Reverse(int index, int count)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to reverse.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the range to reverse.
    return:
      id: ImmutableList
      description: The reversed list.
- id: System.Collections.Immutable.ImmutableList`1.Sort
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Sort
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 509
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the default comparer.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Sort()'
    parameters: []
    return:
      id: ImmutableList
- id: System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 524
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the specified System.Comparison<T>.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Sort(Comparison<T> comparison)'
    parameters:
    - id: comparison
      type:
        id: System.Comparison{`0}
        name: System.Comparison{`0}
        isExternal: true
      description: The System.Comparison<T> to use when comparing elements.
    return:
      id: ImmutableList
      description: The sorted list.
- id: System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 541
  summary: >-
    Sorts the elements in the entire ImmutableList<T> using

    the specified comparer.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Sort(IComparer<T> comparer)'
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: ImmutableList
      description: The sorted list.
- id: System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Sort
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 564
  summary: >-
    Sorts the elements in a range of elements in ImmutableList<T>

    using the specified comparer.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableList<T> Sort(int index, int count, IComparer<T> comparer)'
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the range to sort.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The length of the range to sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
      description: >-
        The System.Collections.Generic.IComparer<T> implementation to use when comparing

        elements, or null to use the default comparer System.Collections.Generic.Comparer<T>.Default.
    return:
      id: ImmutableList
      description: The sorted list.
- id: System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: ForEach
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 584
  summary: Performs the specified action on each element of the list.
  syntax:
    content:
      CSharp: public void ForEach(Action<T> action)
    parameters:
    - id: action
      type:
        id: System.Action{`0}
        name: System.Action{`0}
        isExternal: true
      description: The System.Action<T> delegate to perform on each element of the list.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 603
  summary: >-
    Copies the entire ImmutableList<T> to a compatible one-dimensional

    array, starting at the beginning of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 622
  summary: >-
    Copies the entire ImmutableList<T> to a compatible one-dimensional

    array, starting at the specified index of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index in array at which copying begins.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: CopyTo
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 646
  summary: >-
    Copies a range of elements from the ImmutableList<T> to

    a compatible one-dimensional array, starting at the specified index of the

    target array.
  syntax:
    content:
      CSharp: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based index in the source ImmutableList<T> at

        which copying begins.
    - id: array
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: >-
        The one-dimensional System.Array that is the destination of the elements

        copied from ImmutableList<T>. The System.Array must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based index in array at which copying begins.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements to copy.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: GetRange
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 664
  summary: Creates a shallow copy of a range of elements in the source ImmutableList<T>.
  syntax:
    content:
      CSharp: public ImmutableList<T> GetRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based ImmutableList<T> index at which the range

        starts.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the range.
    return:
      id: ImmutableList
      description: A shallow copy of a range of elements in the source ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: ConvertAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 687
  summary: >-
    Converts the elements in the current ImmutableList<T> to

    another type, and returns a list containing the converted elements.
  syntax:
    content:
      CSharp: public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter)
    parameters:
    - id: converter
      type:
        id: System.Func{`0,``0}
        name: System.Func{`0,``0}
        isExternal: true
      description: >-
        A System.Converter<TInput,TOutput> delegate that converts each element from

        one type to another type.
    return:
      id: ImmutableList
      description: >-
        A ImmutableList<T> of the target type containing the converted

        elements from the current ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Exists
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 706
  summary: >-
    Determines whether the ImmutableList<T> contains elements

    that match the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool Exists(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to search for.
    return:
      id: Boolean
      description: >-
        true if the ImmutableList<T> contains one or more elements

        that match the conditions defined by the specified predicate; otherwise,

        false.
- id: System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Find
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 724
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the first occurrence within the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public T Find(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      description: >-
        The first element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- id: System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 743
  summary: >-
    Retrieves all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public ImmutableList<T> FindAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the elements

        to search for.
    return:
      id: ImmutableList
      description: >-
        A ImmutableList<T> containing all the elements that match

        the conditions defined by the specified predicate, if found; otherwise, an

        empty ImmutableList<T>.
- id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 762
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public int FindIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 780
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList<T> that extends

    from the specified index to the last element.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: The System.Predicate<T> delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 801
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the ImmutableList<T> that starts

    at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: The System.Predicate<T> delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindLast
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 823
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the last occurrence within the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public T FindLast(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      description: >-
        The last element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type T.
- id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 842
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the entire ImmutableList<T>.
  syntax:
    content:
      CSharp: public int FindLastIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 861
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList<T> that extends

    from the first element to the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: FindLastIndex
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 885
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the ImmutableList<T> that contains

    the specified number of elements and ends at the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by match, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 919
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the ImmutableList<T>

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: '[Pure] public int IndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: >-
        The zero-based index of the first occurrence of item within the range of

        elements in the ImmutableList<T> that starts at index and

        contains count number of elements, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: LastIndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 945
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the ImmutableList<T>

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: '[Pure] public int LastIndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)'
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the ImmutableList<T>. The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: System.Collections.Generic.IEqualityComparer{`0}
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      description: >-
        The zero-based index of the last occurrence of item within the range of elements

        in the ImmutableList<T> that contains count number of elements

        and ends at index, if found; otherwise, -1.
- id: System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: TrueForAll
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 964
  summary: >-
    Determines whether every element in the ImmutableList<T>

    matches the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool TrueForAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: System.Predicate{`0}
        isExternal: true
      description: >-
        The System.Predicate<T> delegate that defines the conditions to check against

        the elements.
    return:
      id: Boolean
      description: >-
        true if every element in the ImmutableList<T> matches the

        conditions defined by the specified predicate; otherwise, false. If the list

        has no elements, the return value is true.
- id: System.Collections.Immutable.ImmutableList`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.Contains(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 977
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: public bool Contains(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
- id: System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 986
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yaml) interface.
  syntax:
    content:
      CSharp: public int IndexOf(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: Int32
- id: System.Collections.Immutable.ImmutableList`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableList`1.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableList`1.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1362
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
