items:
- uid: System.Collections.Immutable.ImmutableList`1
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ImmutableList<T>
  fullName: System.Collections.Immutable.ImmutableList<T>
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 16
  summary: An immutable list implementation.
  syntax:
    content:
      CSharp: 'public sealed class ImmutableList<T> : IImmutableList<T>, IList<T>, ICollection<T>, IList, ICollection, IOrderedCollection<T>, IImmutableListQueries<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IStrongEnumerable<T, Enumerator>'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Immutable.ImmutableList`1
  children:
  - System.Collections.Immutable.ImmutableList`1.Empty
  - System.Collections.Immutable.ImmutableList`1.Clear
  - System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
  - System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.IsEmpty
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear
  - System.Collections.Immutable.ImmutableList`1.Count
  - System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableList`1.Item(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.ToBuilder
  - System.Collections.Immutable.ImmutableList`1.Add(`0)
  - System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.Remove(`0)
  - System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
  - System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Reverse
  - System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.Sort
  - System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
  - System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
  - System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])
  - System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
  - System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.Contains(`0)
  - System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Immutable.ImmutableList`1.GetEnumerator
- uid: System.Collections.Immutable.ImmutableList`1.Empty
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableList<T>.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 24
  summary: An empty immutable list.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")] public static readonly ImmutableList<T> Empty;'
  id: System.Collections.Immutable.ImmutableList`1.Empty
- uid: System.Collections.Immutable.ImmutableList`1.Clear
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 54
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Clear()
    parameters: []
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Clear
- uid: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: BinarySearch(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.BinarySearch(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 77
  summary: >-
    Searches the entire sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) for an element

    using the default comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of item in the sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml),

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of [System.Collections.Immutable.ImmutableList`1.Count](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)
- uid: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 102
  summary: >-
    Searches the entire sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) for an element

    using the specified comparer and returns the zero-based index of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(T item, IComparer<T> comparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: >-
        The [System.Collections.Generic.IComparer`1]() implementation to use when comparing

        elements.-or-null to use the default comparer [System.Collections.Generic.Comparer`1.Default]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of item in the sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml),

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of [System.Collections.Immutable.ImmutableList`1.Count](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: BinarySearch(int, int, T, IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.BinarySearch(int, int, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 136
  summary: >-
    Searches a range of elements in the sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    for an element using the specified comparer and returns the zero-based index

    of the element.
  syntax:
    content:
      CSharp: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the range to search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The length of the range to search.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: >-
        The [System.Collections.Generic.IComparer`1]() implementation to use when comparing

        elements, or null to use the default comparer [System.Collections.Generic.Comparer`1.Default]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of item in the sorted [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml),

        if item is found; otherwise, a negative number that is the bitwise complement

        of the index of the next element that is larger than item or, if there is

        no larger element, the bitwise complement of [System.Collections.Immutable.ImmutableList`1.Count](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.IsEmpty
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableList<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 146
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] public bool IsEmpty { get; }'
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.IsEmpty
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 159
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Clear()
    parameters: []
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear
- uid: System.Collections.Immutable.ImmutableList`1.Count
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableList<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 167
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.Count
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 184
  summary: See [System.Collections.ICollection]().
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] object ICollection.SyncRoot { get; }'
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 193
  summary: See the [System.Collections.ICollection]() interface.
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] bool ICollection.IsSynchronized { get; }'
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Immutable.ImmutableList`1.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: this[int]
  fullName: System.Collections.Immutable.ImmutableList<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 212
  summary: Gets the element of the set at the given index.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableList`1.Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.ToBuilder
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ToBuilder()
  fullName: System.Collections.Immutable.ImmutableList<T>.ToBuilder()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 248
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  syntax:
    content:
      CSharp: public Builder ToBuilder()
    parameters: []
    return:
      id: Builder
      type:
        id: System.Collections.Immutable.ImmutableList`1.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableList`1.Builder.yml
  id: System.Collections.Immutable.ImmutableList`1.ToBuilder
- uid: System.Collections.Immutable.ImmutableList`1.Add(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 260
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Add(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Add(`0)
- uid: System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: AddRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 272
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 293
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: item
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: InsertRange(int, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.InsertRange(int, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 305
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> InsertRange(int index, IEnumerable<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 320
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Remove(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Remove(`0)
- uid: System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Remove(T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 329
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Remove(T value, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: RemoveRange(int, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.RemoveRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 343
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableList<T> RemoveRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The starting index to begin removal.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to remove.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: RemoveRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 367
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableList<T> RemoveRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The items to remove if matches are found in this list.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 383
  summary: Removes the specified values from this list.
  syntax:
    content:
      CSharp: public ImmutableList<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The items to remove if matches are found in this list.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableList<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 415
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: RemoveAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 436
  summary: >-
    Removes all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public ImmutableList<T> RemoveAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the elements

        to remove.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The new list.
  id: System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: SetItem(int, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.SetItem(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 448
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> SetItem(int index, T value)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Replace(T, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Replace(T, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 457
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Replace(T oldValue, T newValue)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
    - id: newValue
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)
- uid: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Replace(T, T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 466
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public ImmutableList<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
    - id: newValue
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Reverse
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Reverse()
  fullName: System.Collections.Immutable.ImmutableList<T>.Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 486
  summary: Reverses the order of the elements in the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public ImmutableList<T> Reverse()
    parameters: []
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The reversed list.
  id: System.Collections.Immutable.ImmutableList`1.Reverse
- uid: System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Reverse(int, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.Reverse(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 499
  summary: Reverses the order of the elements in the specified range.
  syntax:
    content:
      CSharp: public ImmutableList<T> Reverse(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the range to reverse.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the range to reverse.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The reversed list.
  id: System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.Sort
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Sort()
  fullName: System.Collections.Immutable.ImmutableList<T>.Sort()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 509
  summary: >-
    Sorts the elements in the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) using

    the default comparer.
  syntax:
    content:
      CSharp: public ImmutableList<T> Sort()
    parameters: []
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
  id: System.Collections.Immutable.ImmutableList`1.Sort
- uid: System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Sort(Comparison<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Sort(System.Comparison<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 524
  summary: >-
    Sorts the elements in the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) using

    the specified [System.Comparison`1]().
  syntax:
    content:
      CSharp: public ImmutableList<T> Sort(Comparison<T> comparison)
    parameters:
    - id: comparison
      type:
        id: System.Comparison{`0}
        name: Comparison<T>
        isExternal: true
      description: The [System.Comparison`1]() to use when comparing elements.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The sorted list.
  id: System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Sort(IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 541
  summary: >-
    Sorts the elements in the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) using

    the specified comparer.
  syntax:
    content:
      CSharp: public ImmutableList<T> Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: >-
        The [System.Collections.Generic.IComparer`1]() implementation to use when comparing

        elements, or null to use the default comparer [System.Collections.Generic.Comparer`1.Default]().
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The sorted list.
  id: System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Sort(int, int, IComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Sort(int, int, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 564
  summary: >-
    Sorts the elements in a range of elements in [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    using the specified comparer.
  syntax:
    content:
      CSharp: public ImmutableList<T> Sort(int index, int count, IComparer<T> comparer)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the range to sort.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The length of the range to sort.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
      description: >-
        The [System.Collections.Generic.IComparer`1]() implementation to use when comparing

        elements, or null to use the default comparer [System.Collections.Generic.Comparer`1.Default]().
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: The sorted list.
  id: System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ForEach(Action<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.ForEach(System.Action<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 584
  summary: Performs the specified action on each element of the list.
  syntax:
    content:
      CSharp: public void ForEach(Action<T> action)
    parameters:
    - id: action
      type:
        id: System.Action{`0}
        name: Action<T>
        isExternal: true
      description: The System.Action<T> delegate to perform on each element of the list.
  id: System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})
- uid: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: CopyTo(T[])
  fullName: System.Collections.Immutable.ImmutableList<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 603
  summary: >-
    Copies the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) to a compatible one-dimensional

    array, starting at the beginning of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the destination of the elements

        copied from [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml). The [System.Array]() must have

        zero-based indexing.
  id: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])
- uid: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: CopyTo(T[], int)
  fullName: System.Collections.Immutable.ImmutableList<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 622
  summary: >-
    Copies the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) to a compatible one-dimensional

    array, starting at the specified index of the target array.
  syntax:
    content:
      CSharp: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the destination of the elements

        copied from [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml). The [System.Array]() must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in array at which copying begins.
  id: System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: CopyTo(int, T[], int, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.CopyTo(int, T[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 646
  summary: >-
    Copies a range of elements from the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) to

    a compatible one-dimensional array, starting at the specified index of the

    target array.
  syntax:
    content:
      CSharp: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index in the source [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) at

        which copying begins.
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: >-
        The one-dimensional [System.Array]() that is the destination of the elements

        copied from [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml). The [System.Array]() must have

        zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in array at which copying begins.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to copy.
  id: System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: GetRange(int, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.GetRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 664
  summary: Creates a shallow copy of a range of elements in the source [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public ImmutableList<T> GetRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) index at which the range

        starts.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the range.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: A shallow copy of a range of elements in the source [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ConvertAll<TOutput>(Func<T, TOutput>)
  fullName: System.Collections.Immutable.ImmutableList<T>.ConvertAll<TOutput>(System.Func<T, TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 687
  summary: >-
    Converts the elements in the current [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) to

    another type, and returns a list containing the converted elements.
  syntax:
    content:
      CSharp: public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter)
    parameters:
    - id: converter
      type:
        id: System.Func{`0,``0}
        name: Func<T, TOutput>
        isExternal: true
      description: >-
        A [System.Func`2]() delegate that converts each element from

        one type to another type.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList{``0}
        name: ImmutableList<TOutput>
        href: System.Collections.Immutable.ImmutableList{``0}
      description: >-
        A [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) of the target type containing the converted

        elements from the current [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})
- uid: System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Exists(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Exists(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 706
  summary: >-
    Determines whether the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) contains elements

    that match the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool Exists(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the elements

        to search for.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) contains one or more elements

        that match the conditions defined by the specified predicate; otherwise,

        false.
  id: System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Find(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.Find(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 724
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the first occurrence within the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public T Find(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      type:
        id: T
        name: T
        href: T
      description: >-
        The first element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type .
  id: System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 743
  summary: >-
    Retrieves all the elements that match the conditions defined by the specified

    predicate.
  syntax:
    content:
      CSharp: public ImmutableList<T> FindAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the elements

        to search for.
    return:
      id: ImmutableList
      type:
        id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList<T>
        href: System.Collections.Immutable.ImmutableList`1.yml
      description: >-
        A [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) containing all the elements that match

        the conditions defined by the specified predicate, if found; otherwise, an

        empty [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  id: System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindIndex(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindIndex(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 762
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public int FindIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindIndex(int, Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindIndex(int, System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 780
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that extends

    from the specified index to the last element.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: The [System.Predicate`1]() delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindIndex(int, int, Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindIndex(int, int, System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 801
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the first occurrence within

    the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that starts

    at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: public int FindIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: The [System.Predicate`1]() delegate that defines the conditions of the element to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the first occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindLast(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindLast(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 823
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the last occurrence within the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public T FindLast(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: T
      type:
        id: T
        name: T
        href: T
      description: >-
        The last element that matches the conditions defined by the specified predicate,

        if found; otherwise, the default value for type .
  id: System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindLastIndex(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindLastIndex(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 842
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the entire [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml).
  syntax:
    content:
      CSharp: public int FindLastIndex(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindLastIndex(int, Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindLastIndex(int, System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 861
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that extends

    from the first element to the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: FindLastIndex(int, int, Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.FindLastIndex(int, int, System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 885
  summary: >-
    Searches for an element that matches the conditions defined by the specified

    predicate, and returns the zero-based index of the last occurrence within

    the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that contains

    the specified number of elements and ends at the specified index.
  syntax:
    content:
      CSharp: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    parameters:
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the section to search.
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions of the element

        to search for.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the last occurrence of an element that matches the

        conditions defined by , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.IndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 919
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    first occurrence within the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    that starts at the specified index and contains the specified number of elements.
  syntax:
    content:
      CSharp: public int IndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml). The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based starting index of the search. 0 (zero) is valid in an empty

        list.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the first occurrence of  within the range of

        elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that starts at  and

        contains  number of elements, if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: LastIndexOf(T, int, int, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.LastIndexOf(T, int, int, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 945
  summary: >-
    Searches for the specified object and returns the zero-based index of the

    last occurrence within the range of elements in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    that contains the specified number of elements and ends at the specified

    index.
  syntax:
    content:
      CSharp: public int LastIndexOf(T item, int index, int count, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: >-
        The object to locate in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml). The value

        can be null for reference types.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based starting index of the backward search.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the section to search.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        The zero-based index of the last occurrence of  within the range of elements

        in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) that contains  number of elements

        and ends at , if found; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: TrueForAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.TrueForAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 964
  summary: >-
    Determines whether every element in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml)

    matches the conditions defined by the specified predicate.
  syntax:
    content:
      CSharp: public bool TrueForAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
      description: >-
        The [System.Predicate`1]() delegate that defines the conditions to check against

        the elements.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if every element in the [System.Collections.Immutable.ImmutableList`1](System.Collections.Immutable.ImmutableList`1.yml) matches the

        conditions defined by the specified predicate; otherwise, false. If the list

        has no elements, the return value is true.
  id: System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 977
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public bool Contains(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.Contains(`0)
- uid: System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IndexOf(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.IndexOf(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 986
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: public int IndexOf(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.IndexOf(`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 994
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Add(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1003
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1015
  summary: Inserts the specified value at the specified index.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to insert the value.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The element to add.
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
      description: The new immutable list.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.InsertRange(int, IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.InsertRange(int, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1027
  summary: Inserts the specified value at the specified index.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.InsertRange(int index, IEnumerable<T> items)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index at which to insert the value.
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The elements to add.
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
      description: The new immutable list.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.Remove(T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1036
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Remove(T value, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1045
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match)
    parameters:
    - id: match
      type:
        id: System.Predicate{`0}
        name: Predicate<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1054
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.RemoveRange(int, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1063
  summary: See the [System.Collections.Immutable.IImmutableList`1](System.Collections.Immutable.IImmutableList`1.yml) interface.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1074
  summary: Removes the element at the specified index.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index.
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
      description: A new list with the elements removed.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.SetItem(int, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.SetItem(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1086
  summary: Replaces an element in the list at a given position with the specified element.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.SetItem(int index, T value)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The position in the list of the element to replace.
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
      description: The new list.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Immutable.IImmutableList<T>.Replace(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1102
  summary: Replaces an element in the list with the specified element.
  syntax:
    content:
      CSharp: IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: oldValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace.
    - id: newValue
      type:
        id: T
        name: T
        href: T
      description: The element to replace the old element with.
    - id: equalityComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`0}
        name: IEqualityComparer<T>
        isExternal: true
      description: The equality comparer to use in the search.
    return:
      id: IImmutableList
      type:
        id: System.Collections.Immutable.IImmutableList{`0}
        name: IImmutableList<T>
        href: System.Collections.Immutable.IImmutableList{`0}
      description: The new list.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1118
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1133
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: An [System.Collections.IEnumerator]() object that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList<T>.Insert(int, T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.IList<T>.Insert(int, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1148
  summary: Inserts the specified index.
  syntax:
    content:
      CSharp: void IList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index.
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList<T>.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.IList<T>.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1158
  summary: Removes the value at the specified index.
  syntax:
    content:
      CSharp: void IList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList<T>.this[int]
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.IList<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1166
  summary: Gets or sets the value at the specified index.
  syntax:
    content:
      CSharp: T IList<T>.this[int index] { get; set; }
    parameters:
    - id: System.Collections.Generic.IList<T>.this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1181
  summary: Adds the specified item.
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection<T>.Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1190
  summary: Clears this instance.
  syntax:
    content:
      CSharp: void ICollection<T>.Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1200
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content:
      CSharp: bool ICollection<T>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection<T>.Remove(T)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1211
  summary: Removes the specified item.
  syntax:
    content:
      CSharp: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The item.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1223
  summary: See the [System.Collections.ICollection]() interface.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.Add(object)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.Add(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1240
  summary: Adds an item to the [System.Collections.IList]().
  syntax:
    content:
      CSharp: int IList.Add(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to add to the [System.Collections.IList]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.RemoveAt(int)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.RemoveAt(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1250
  summary: Removes the [System.Collections.IList]() item at the specified index.
  syntax:
    content:
      CSharp: void IList.RemoveAt(int index)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index of the item to remove.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.Clear()
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1259
  summary: Clears this instance.
  syntax:
    content:
      CSharp: void IList.Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.Contains(object)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.Contains(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1272
  summary: Determines whether the [System.Collections.IList]() contains a specific value.
  syntax:
    content:
      CSharp: bool IList.Contains(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to locate in the [System.Collections.IList]().
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the [System.Object]() is found in the [System.Collections.IList](); otherwise, false.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.IndexOf(object)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.IndexOf(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1285
  summary: Determines the index of a specific item in the [System.Collections.IList]().
  syntax:
    content:
      CSharp: int IList.IndexOf(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to locate in the [System.Collections.IList]().
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index of  if found in the list; otherwise, -1.
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.Insert(int, object)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.Insert(int, object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1296
  summary: Inserts an item to the [System.Collections.IList]() at the specified index.
  syntax:
    content:
      CSharp: void IList.Insert(int index, object value)
    parameters:
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index at which  should be inserted.
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to insert into the [System.Collections.IList]().
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.IsFixedSize
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1306
  summary: Gets a value indicating whether the [System.Collections.IList]() has a fixed size.
  syntax:
    content:
      CSharp: bool IList.IsFixedSize { get; }
    parameters:
    - id: System.Collections.IList.IsFixedSize
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1317
  summary: Gets a value indicating whether the [System.Collections.Generic.ICollection`1]() is read-only.
  syntax:
    content:
      CSharp: bool IList.IsReadOnly { get; }
    parameters:
    - id: System.Collections.IList.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.Remove(object)
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.Remove(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1327
  summary: Removes the first occurrence of a specific object from the [System.Collections.IList]().
  syntax:
    content:
      CSharp: void IList.Remove(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The object to remove from the [System.Collections.IList]().
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)
- uid: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: IList.this[int]
  fullName: System.Collections.Immutable.ImmutableList<T>.System.Collections.IList.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1341
  summary: Gets or sets the [System.Object]() at the specified index.
  syntax:
    content:
      CSharp: object IList.this[int index] { get; set; }
    parameters:
    - id: System.Collections.IList.this[]
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableList`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableList`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableList<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList`1.cs
    startLine: 1362
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Immutable.ImmutableList`1.Enumerator
        name: Enumerator
        href: System.Collections.Immutable.ImmutableList`1.Enumerator.yml
      description: A [System.Collections.Generic.IEnumerator`1]() that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableList`1.GetEnumerator
