items:
- uid: System.Collections.Immutable.ImmutableQueue`1
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: ImmutableQueue<T>
  fullName: System.Collections.Immutable.ImmutableQueue<T>
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 17
  summary: An immutable queue.
  syntax:
    content:
      CSharp: public sealed class ImmutableQueue<T>
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Immutable.ImmutableQueue`1
  children:
  - System.Collections.Immutable.ImmutableQueue`1.Clear
  - System.Collections.Immutable.ImmutableQueue`1.IsEmpty
  - System.Collections.Immutable.ImmutableQueue`1.Empty
  - System.Collections.Immutable.ImmutableQueue`1.Peek
  - System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
  - System.Collections.Immutable.ImmutableQueue`1.Dequeue
  - System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
  - System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
- uid: System.Collections.Immutable.ImmutableQueue`1.Clear
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 65
  summary: Gets the empty queue.
  syntax:
    content:
      CSharp: public ImmutableQueue<T> Clear()
    parameters: []
    return:
      id: ImmutableQueue
  id: System.Collections.Immutable.ImmutableQueue`1.Clear
- uid: System.Collections.Immutable.ImmutableQueue`1.IsEmpty
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: IsEmpty
  fullName: System.Collections.Immutable.ImmutableQueue<T>.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 78
  summary: Gets a value indicating whether this instance is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: System.Collections.Immutable.ImmutableQueue`1.IsEmpty
- uid: System.Collections.Immutable.ImmutableQueue`1.Empty
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Empty
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Empty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 86
  summary: Gets the empty queue.
  syntax:
    content:
      CSharp: public static ImmutableQueue<T> Empty { get; }
    parameters:
    - id: Empty
      type:
        id: System.Collections.Immutable.ImmutableQueue`1
        name: ImmutableQueue
        href: System.Collections.Immutable.ImmutableQueue`1.yml
  id: System.Collections.Immutable.ImmutableQueue`1.Empty
- uid: System.Collections.Immutable.ImmutableQueue`1.Peek
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Peek()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 130
  summary: Gets the element at the front of the queue.
  syntax:
    content:
      CSharp: '[Pure] public T Peek()'
    parameters: []
    return:
      id: T
  id: System.Collections.Immutable.ImmutableQueue`1.Peek
- uid: System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Enqueue(T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 148
  summary: Adds an element to the back of the queue.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableQueue<T> Enqueue(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value.
    return:
      id: ImmutableQueue
      description: The new queue.
  id: System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)
- uid: System.Collections.Immutable.ImmutableQueue`1.Dequeue
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Dequeue()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Dequeue()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 181
  summary: Returns a queue that is missing the front element.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableQueue<T> Dequeue()'
    parameters: []
    return:
      id: ImmutableQueue
      description: A queue; never null.
  id: System.Collections.Immutable.ImmutableQueue`1.Dequeue
- uid: System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: Dequeue(out T)
  fullName: System.Collections.Immutable.ImmutableQueue<T>.Dequeue(out T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 210
  summary: Retrieves the item at the head of the queue, and returns a queue with the head element removed.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "0#")] [Pure] public ImmutableQueue<T> Dequeue(out T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: Receives the value from the head of the queue.
    return:
      id: ImmutableQueue
      description: The new queue with the head element removed.
  id: System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)
- uid: System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableQueue`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableQueue<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableQueue`1.cs
    startLine: 235
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: '[Pure] public Enumerator GetEnumerator()'
    parameters: []
    return:
      id: Enumerator
      description: An [Enumerator](#) that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableQueue`1.GetEnumerator
