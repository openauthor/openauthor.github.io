items:
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Builder
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 29
  summary: >-
    A sorted dictionary that mutates with little or no memory allocations,

    can produce and/or build on immutable sorted dictionary instances very efficiently.
  syntax:
    content:
      CSharp: public sealed class Builder
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder
  children:
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)
  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Keys
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 98
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2](#)
  syntax:
    content:
      CSharp: public IEnumerable<TKey> Keys { get; }
    parameters:
    - id: Keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Values
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 114
  summary: See [System.Collections.Generic.IReadOnlyDictionary`2](#)
  syntax:
    content:
      CSharp: public IEnumerable<TValue> Values { get; }
    parameters:
    - id: Values
      type:
        id: System.Collections.Generic.IEnumerable{`1}
        name: System.Collections.Generic.IEnumerable{`1}
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 122
  summary: Gets the number of elements in this map.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: this[TKey]
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.this[TKey]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 180
  summary: Gets or sets the value for a given key.
  syntax:
    content:
      CSharp: public TValue this[TKey key] { get; set; }
    parameters:
    - id: this[]
      type:
        id: TValue
        name: TValue
        href: TValue
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 287
  summary: Gets or sets the key comparer.
  syntax:
    content:
      CSharp: public IComparer<TKey> KeyComparer { get; set; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: ValueComparer
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.ValueComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 324
  summary: Gets or sets the value comparer.
  syntax:
    content:
      CSharp: public IEqualityComparer<TValue> ValueComparer { get; set; }
    parameters:
    - id: ValueComparer
      type:
        id: System.Collections.Generic.IEqualityComparer{`1}
        name: System.Collections.Generic.IEqualityComparer{`1}
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Add(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 424
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: ContainsKey(TKey)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 437
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Remove(TKey)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 445
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public bool Remove(TKey key)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 460
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: TryGetKey(TKey, out TKey)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.TryGetKey(TKey, out TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 468
  summary: See the [System.Collections.Immutable.IImmutableDictionary`2](System.Collections.Immutable.IImmutableDictionary`2.yml) interface.
  syntax:
    content:
      CSharp: public bool TryGetKey(TKey equalKey, out TKey actualKey)
    parameters:
    - id: equalKey
      type:
        id: TKey
        name: TKey
        href: TKey
    - id: actualKey
      type:
        id: TKey
        name: TKey
        href: TKey
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 477
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 485
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 494
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 510
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{`0,`1}
        name: System.Collections.Generic.KeyValuePair{`0,`1}
        isExternal: true
    return:
      id: Boolean
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 523
  summary: See [System.Collections.Generic.IDictionary`2](#)
  syntax:
    content:
      CSharp: public ImmutableSortedDictionary<TKey, TValue>.Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: ContainsValue(TValue)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.ContainsValue(TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 560
  summary: >-
    Determines whether the ImmutableSortedMap<TKey,TValue>

    contains an element with the specified value.
  syntax:
    content:
      CSharp: '[Pure] public bool ContainsValue(TValue value)'
    parameters:
    - id: value
      type:
        id: TValue
        name: TValue
        href: TValue
      description: >-
        The value to locate in the ImmutableSortedMap<TKey,TValue>.

        The value can be null for reference types.
    return:
      id: Boolean
      description: >-
        true if the ImmutableSortedMap<TKey,TValue> contains

        an element with the specified value; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: AddRange(IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 570
  summary: Removes any entries from the dictionaries with keys that match those found in the specified sequence.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")] public void AddRange(IEnumerable<KeyValuePair<TKey, TValue>> items)'
    parameters:
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
        isExternal: true
      description: The keys for entries to remove from the dictionary.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: RemoveRange(IEnumerable<TKey>)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.RemoveRange(System.Collections.Generic.IEnumerable<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 585
  summary: Removes any entries from the dictionaries with keys that match those found in the specified sequence.
  syntax:
    content:
      CSharp: public void RemoveRange(IEnumerable<TKey> keys)
    parameters:
    - id: keys
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The keys for entries to remove from the dictionary.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: GetValueOrDefault(TKey)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.GetValueOrDefault(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 600
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content:
      CSharp: '[Pure] public TValue GetValueOrDefault(TKey key)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key to search for.
    return:
      id: TValue
      description: The value for the key, or default(TValue) if no matching key was found.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: GetValueOrDefault(TKey, TValue)
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.GetValueOrDefault(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 614
  summary: Gets the value for a given key if a matching key exists in the dictionary.
  syntax:
    content:
      CSharp: '[Pure] public TValue GetValueOrDefault(TKey key, TValue defaultValue)'
    parameters:
    - id: key
      type:
        id: TKey
        name: TKey
        href: TKey
      description: The key to search for.
    - id: defaultValue
      type:
        id: TValue
        name: TValue
        href: TValue
      description: The default value to return if no matching key is found in the dictionary.
    return:
      id: TValue
      description: The value for the key, or  if no matching key was found.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)
- uid: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>.Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedDictionary`2+Builder.cs
    startLine: 636
  summary: Creates an immutable sorted dictionary based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableSortedDictionary<TKey, TValue> ToImmutable()
    parameters: []
    return:
      id: ImmutableSortedDictionary
      description: An immutable map.
  id: System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable
