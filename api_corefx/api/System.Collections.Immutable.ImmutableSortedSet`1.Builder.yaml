id: System.Collections.Immutable.ImmutableSortedSet`1.Builder
href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
name:
  CSharp: Builder
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
  startLine: 31
summary: >-
  A sorted set that mutates with little or no memory allocations,

  can produce and/or build on immutable sorted set instances very efficiently.
syntax:
  content:
    CSharp: public sealed class Builder
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 80
  summary: Gets the number of elements in this set.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 105
  summary: Gets the element of the set at the given index.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Max
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 114
  summary: Gets the maximum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Max { get; }
    parameters:
    - id: Max
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Min
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 123
  summary: Gets the minimum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Min { get; }
    parameters:
    - id: Min
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: KeyComparer
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 136
  summary: Gets or sets the System.Collections.Generic.IComparer<T> object that is used to determine equality for the values in the System.Collections.Generic.SortedSet<T>.
  syntax:
    content:
      CSharp: public IComparer<T> KeyComparer { get; set; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 206
  summary: >-
    Adds an element to the current set and returns a value to indicate if the

    element was successfully added.
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The element to add to the set.
    return:
      id: Boolean
      description: true if the element is added to the set; false if the element is already in the set.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: ExceptWith
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 217
  summary: Removes all elements in the specified collection from the current set.
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection of items to remove from the set.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: IntersectWith
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 232
  summary: Modifies the current set so that it contains only elements that are also in a specified collection.
  syntax:
    content:
      CSharp: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: IsProperSubsetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 254
  summary: Determines whether the current set is a proper (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct subset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: IsProperSupersetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 264
  summary: Determines whether the current set is a proper (strict) superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a superset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: IsSubsetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 274
  summary: Determines whether the current set is a subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a subset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: IsSupersetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 284
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a superset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Overlaps
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 294
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set and other share at least one common element; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: SetEquals
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 304
  summary: Determines whether the current set and the specified collection contain the same elements.
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is equal to other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: SymmetricExceptWith
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 313
  summary: Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: UnionWith
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 322
  summary: Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 346
  summary: Removes all elements from this set.
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
    return:
      id: Void
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 356
  summary: Determines whether the set contains a specific value.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate in the set.
    return:
      id: Boolean
      description: true if item is found in the set; false otherwise.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 374
  summary: Removes the first occurrence of a specific object from the set.
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to remove from the set.
    return:
      id: Boolean
      description: true if the item was removed from the set; false if the item was not found in the set.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 385
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public ImmutableSortedSet<T>.Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A enumerator that can be used to iterate through the collection.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 418
  summary: >-
    Returns an System.Collections.Generic.IEnumerable<T> that iterates over this

    collection in reverse order.
  syntax:
    content:
      CSharp: '[Pure] public IEnumerable<T> Reverse()'
    parameters: []
    return:
      id: IEnumerable
      description: >-
        An enumerator that iterates over the System.Collections.Generic.SortedSet<T>

        in reverse order.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yaml
  name:
    CSharp: ToImmutable
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 432
  summary: Creates an immutable sorted set based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableSortedSet<T> ToImmutable()
    parameters: []
    return:
      id: ImmutableSortedSet
      description: An immutable set.
