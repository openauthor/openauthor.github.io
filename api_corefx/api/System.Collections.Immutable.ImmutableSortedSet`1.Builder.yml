items:
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Builder
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 31
  summary: >-
    A sorted set that mutates with little or no memory allocations,

    can produce and/or build on immutable sorted set instances very efficiently.
  syntax:
    content:
      CSharp: 'public sealed class Builder : ISortKeyCollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, ISet<T>, ICollection, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder
  children:
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Count
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 80
  summary: Gets the number of elements in this set.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 89
  summary: Gets a value indicating whether this instance is read-only.
  syntax:
    content:
      CSharp: bool ICollection<T>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<T>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: this[int]
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 105
  summary: Gets the element of the set at the given index.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Max
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 114
  summary: Gets the maximum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Max { get; }
    parameters:
    - id: Max
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Min
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 123
  summary: Gets the minimum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Min { get; }
    parameters:
    - id: Min
      type:
        id: T
        name: T
        href: T
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: KeyComparer
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 136
  summary: Gets or sets the [System.Collections.Generic.IComparer`1]() object that is used to determine equality for the values in the [System.Collections.Immutable.ImmutableSortedSet`1](System.Collections.Immutable.ImmutableSortedSet`1.yml).
  syntax:
    content:
      CSharp: public IComparer<T> KeyComparer { get; set; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: IComparer<T>
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Add(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 206
  summary: >-
    Adds an element to the current set and returns a value to indicate if the

    element was successfully added.
  syntax:
    content:
      CSharp: public bool Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The element to add to the set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the element is added to the set; false if the element is already in the set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 217
  summary: Removes all elements in the specified collection from the current set.
  syntax:
    content:
      CSharp: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection of items to remove from the set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 232
  summary: Modifies the current set so that it contains only elements that are also in a specified collection.
  syntax:
    content:
      CSharp: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 254
  summary: Determines whether the current set is a proper (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a correct subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 264
  summary: Determines whether the current set is a proper (strict) superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 274
  summary: Determines whether the current set is a subset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a subset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 284
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is a superset of other; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 294
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set and other share at least one common element; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 304
  summary: Determines whether the current set and the specified collection contain the same elements.
  syntax:
    content:
      CSharp: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the current set is equal to other; otherwise, false.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 313
  summary: Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
  syntax:
    content:
      CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 322
  summary: Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.
  syntax:
    content:
      CSharp: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: The collection to compare to the current set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 338
  summary: >-
    Adds an element to the current set and returns a value to indicate if the

    element was successfully added.
  syntax:
    content:
      CSharp: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The element to add to the set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Clear()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 346
  summary: Removes all elements from this set.
  syntax:
    content:
      CSharp: public void Clear()
    parameters: []
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Contains(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 356
  summary: Determines whether the set contains a specific value.
  syntax:
    content:
      CSharp: public bool Contains(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to locate in the set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if item is found in the set; false otherwise.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 364
  summary: See [System.Collections.Generic.ICollection`1]()
  syntax:
    content:
      CSharp: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Remove(T)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 374
  summary: Removes the first occurrence of a specific object from the set.
  syntax:
    content:
      CSharp: public bool Remove(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The object to remove from the set.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the item was removed from the set; false if the item was not found in the set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 385
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      type:
        id: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator
        name: Enumerator
        href: System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.yml
      description: A enumerator that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 394
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{`0}
        name: IEnumerator<T>
        isExternal: true
      description: A enumerator that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 403
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      description: A enumerator that can be used to iterate through the collection.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: Reverse()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 418
  summary: >-
    Returns an [System.Collections.Generic.IEnumerable`1]() that iterates over this

    collection in reverse order.
  syntax:
    content:
      CSharp: public IEnumerable<T> Reverse()
    parameters: []
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<T>
        isExternal: true
      description: >-
        An enumerator that iterates over the [System.Collections.Immutable.ImmutableSortedSet`1.Builder](System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml)

        in reverse order.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ToImmutable()
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.ToImmutable()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 432
  summary: Creates an immutable sorted set based on the contents of this instance.
  syntax:
    content:
      CSharp: public ImmutableSortedSet<T> ToImmutable()
    parameters: []
    return:
      id: ImmutableSortedSet
      type:
        id: System.Collections.Immutable.ImmutableSortedSet`1
        name: ImmutableSortedSet<T>
        href: System.Collections.Immutable.ImmutableSortedSet`1.yml
      description: An immutable set.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 453
  summary: Copies the elements of the [System.Collections.ICollection]() to an [System.Array](), starting at a particular [System.Array]() index.
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
      description: The one-dimensional [System.Array]() that is the destination of the elements copied from [System.Collections.ICollection](). The [System.Array]() must have zero-based indexing.
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index in  at which copying begins.
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 463
  summary: Gets a value indicating whether access to the [System.Collections.ICollection]() is synchronized (thread safe).
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] bool ICollection.IsSynchronized { get; }'
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot
  href: System.Collections.Immutable.ImmutableSortedSet`1.Builder.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>.Builder.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1+Builder.cs
    startLine: 474
  summary: Gets an object that can be used to synchronize access to the [System.Collections.ICollection]().
  syntax:
    content:
      CSharp: '[DebuggerBrowsable(DebuggerBrowsableState.Never)] object ICollection.SyncRoot { get; }'
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot
