id: System.Collections.Immutable.ImmutableSortedSet`1
href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
name:
  CSharp: ImmutableSortedSet`1
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableSortedSet`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
  startLine: 21
summary: An immutable sorted set implementation.
syntax:
  content:
    CSharp: public sealed partial class ImmutableSortedSet<T>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableSortedSet`1.Empty
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Empty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Empty
  type: Field
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 36
  summary: An empty sorted set with the default sort comparer.
  syntax:
    content:
      CSharp: Empty
- id: System.Collections.Immutable.ImmutableSortedSet`1.Clear
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 76
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: public ImmutableSortedSet<T> Clear()
    parameters: []
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.Max
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Max
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 87
  summary: Gets the maximum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Max { get; }
    parameters:
    - id: Max
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.Min
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Min
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 96
  summary: Gets the minimum value in the collection, as defined by the comparer.
  syntax:
    content:
      CSharp: public T Min { get; }
    parameters:
    - id: Min
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 106
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Immutable.ImmutableSortedSet`1.Count
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Count
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 114
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: public int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: KeyComparer
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 126
  summary: See the [System.Collections.Generic.ISortKeyCollection`1](#) interface.
  syntax:
    content:
      CSharp: public IComparer<T> KeyComparer { get; }
    parameters:
    - id: KeyComparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
- id: System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Item
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 148
  summary: Gets the element of the set at the given index.
  syntax:
    content:
      CSharp: public T this[int index] { get; }
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
- id: System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: ToBuilder
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 169
  summary: >-
    Creates a collection with the same contents as this collection that

    can be efficiently mutated across multiple operations using standard

    mutable interfaces.
  syntax:
    content:
      CSharp: '[Pure] public Builder ToBuilder()'
    parameters: []
    return:
      id: Builder
- id: System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 181
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> Add(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Remove
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 193
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> Remove(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: TryGetValue
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 214
  summary: Searches the set for a given value and returns the equal value it finds, if any.
  syntax:
    content:
      CSharp: '[Pure] public bool TryGetValue(T equalValue, out T actualValue)'
    parameters:
    - id: equalValue
      type:
        id: T
        name: T
        href: T
      description: The value to search for.
    - id: actualValue
      type:
        id: T
        name: T
        href: T
      description: The value from the set that the search found, or the original value if the search yielded no match.
    return:
      id: Boolean
      description: A value indicating whether the search was successful.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Intersect
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 235
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> Intersect(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Except
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 255
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> Except(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: SymmetricExcept
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 275
  summary: Produces a set that contains elements either in this set or a given sequence, but not both.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> SymmetricExcept(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The other sequence of items.
    return:
      id: ImmutableSortedSet
      description: The new set.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Union
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 305
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> Union(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: WithComparer
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 347
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableSortedSet<T> WithComparer(IComparer<T> comparer)'
    parameters:
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{`0}
        name: System.Collections.Generic.IComparer{`0}
        isExternal: true
    return:
      id: ImmutableSortedSet
- id: System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: SetEquals
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 373
  summary: Checks whether a given sequence of items entirely describe the contents of this set.
  syntax:
    content:
      CSharp: '[Pure] public bool SetEquals(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The sequence of items to check against this set.
    return:
      id: Boolean
      description: A value indicating whether the sets are equal.
- id: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IsProperSubsetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 408
  summary: Determines whether the current set is a property (strict) subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsProperSubsetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct subset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IsProperSupersetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 459
  summary: Determines whether the current set is a correct superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsProperSupersetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a correct superset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IsSubsetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 487
  summary: Determines whether a set is a subset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsSubsetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a subset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IsSupersetOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 523
  summary: Determines whether the current set is a superset of a specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool IsSupersetOf(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set is a superset of other; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Overlaps
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 544
  summary: Determines whether the current set overlaps with the specified collection.
  syntax:
    content:
      CSharp: '[Pure] public bool Overlaps(IEnumerable<T> other)'
    parameters:
    - id: other
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
      description: The collection to compare to the current set.
    return:
      id: Boolean
      description: true if the current set and other share at least one common element; otherwise, false.
- id: System.Collections.Immutable.ImmutableSortedSet`1.Reverse
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Reverse
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Reverse
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 573
  summary: >-
    Returns an System.Collections.Generic.IEnumerable<T> that iterates over this

    collection in reverse order.
  syntax:
    content:
      CSharp: '[Pure] public IEnumerable<T> Reverse()'
    parameters: []
    return:
      id: IEnumerable
      description: >-
        An enumerator that iterates over the System.Collections.Generic.SortedSet<T>

        in reverse order.
- id: System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: IndexOf
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 593
  summary: Gets the position within this set that the specified value does or would appear.
  syntax:
    content:
      CSharp: public int IndexOf(T item)
    parameters:
    - id: item
      type:
        id: T
        name: T
        href: T
      description: The value whose position is being sought.
    return:
      id: Int32
      description: >-
        The index of the specified  in the sorted set,

        if  is found.  If  is not

        found and  is less than one or more elements in this set,

        a negative number which is the bitwise complement of the index of the first

        element that is larger than value. If  is not found

        and  is greater than any of the elements in the set,

        a negative number which is the bitwise complement of (the index of the last

        element plus 1).
- id: System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: Contains
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 606
  summary: See the [System.Collections.Immutable.IImmutableSet`1](System.Collections.Immutable.IImmutableSet`1.yaml) interface.
  syntax:
    content:
      CSharp: public bool Contains(T value)
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
    return:
      id: Boolean
- id: System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableSortedSet`1.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet`1.cs
    startLine: 999
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: public Enumerator GetEnumerator()
    parameters: []
    return:
      id: Enumerator
      description: A [System.Collections.Generic.IEnumerator`1](#) that can be used to iterate through the collection.
