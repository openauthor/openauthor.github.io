id: System.Collections.Immutable.ImmutableStack`1
href: System.Collections.Immutable.ImmutableStack`1.yaml
name:
  CSharp: ImmutableStack`1
qualifiedName:
  CSharp: System.Collections.Immutable.ImmutableStack`1
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
  startLine: 17
summary: An immutable stack.
syntax:
  content:
    CSharp: public sealed class ImmutableStack<T>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Collections.Immutable.ImmutableStack`1.Empty
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Empty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Empty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 64
  summary: Gets the empty stack, upon which all stacks are built.
  syntax:
    content:
      CSharp: public static ImmutableStack<T> Empty { get; }
    parameters:
    - id: Empty
      type:
        id: System.Collections.Immutable.ImmutableStack`1
        name: ImmutableStack
        href: System.Collections.Immutable.ImmutableStack`1.yaml
- id: System.Collections.Immutable.ImmutableStack`1.Clear
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Clear
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Clear
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 78
  summary: Gets the empty stack, upon which all stacks are built.
  syntax:
    content:
      CSharp: public ImmutableStack<T> Clear()
    parameters: []
    return:
      id: ImmutableStack
- id: System.Collections.Immutable.ImmutableStack`1.IsEmpty
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: IsEmpty
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 100
  summary: Gets a value indicating whether this instance is empty.
  syntax:
    content:
      CSharp: public bool IsEmpty { get; }
    parameters:
    - id: IsEmpty
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Collections.Immutable.ImmutableStack`1.Peek
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Peek
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Peek
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 112
  summary: Gets the element on the top of the stack.
  syntax:
    content:
      CSharp: '[Pure] public T Peek()'
    parameters: []
    return:
      id: T
      description: The element on the top of the stack.
- id: System.Collections.Immutable.ImmutableStack`1.Push(`0)
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Push
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Push(`0)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 128
  summary: Pushes an element onto a stack and returns the new stack.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableStack<T> Push(T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The element to push onto the stack.
    return:
      id: ImmutableStack
      description: The new stack.
- id: System.Collections.Immutable.ImmutableStack`1.Pop
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Pop
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Pop
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 152
  summary: Returns a stack that lacks the top element on this stack.
  syntax:
    content:
      CSharp: '[Pure] public ImmutableStack<T> Pop()'
    parameters: []
    return:
      id: ImmutableStack
      description: A stack; never null
- id: System.Collections.Immutable.ImmutableStack`1.Pop(`0@)
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: Pop
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.Pop(`0@)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 171
  summary: Pops the top element off the stack.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "0#")] [Pure] public ImmutableStack<T> Pop(out T value)'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
      description: The value that was removed from the stack.
    return:
      id: ImmutableStack
      description: A stack; never null
- id: System.Collections.Immutable.ImmutableStack`1.GetEnumerator
  href: System.Collections.Immutable.ImmutableStack`1.yaml
  name:
    CSharp: GetEnumerator
  qualifiedName:
    CSharp: System.Collections.Immutable.ImmutableStack`1.GetEnumerator
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableStack`1.cs
    startLine: 196
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content:
      CSharp: '[Pure] public Enumerator GetEnumerator()'
    parameters: []
    return:
      id: Enumerator
      description: An [Enumerator](#) that can be used to iterate through the collection.
