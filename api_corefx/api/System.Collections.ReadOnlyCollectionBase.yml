items:
- uid: System.Collections.ReadOnlyCollectionBase
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: ReadOnlyCollectionBase
  fullName: System.Collections.ReadOnlyCollectionBase
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 17
  syntax:
    content:
      CSharp: 'public abstract class ReadOnlyCollectionBase : ICollection, IEnumerable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Collections.ReadOnlyCollectionBase
  children:
  - System.Collections.ReadOnlyCollectionBase.InnerList
  - System.Collections.ReadOnlyCollectionBase.Count
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ReadOnlyCollectionBase.GetEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 21
  syntax:
    content:
      CSharp: protected ArrayList InnerList { get; }
    parameters:
    - id: InnerList
      type:
        id: System.Collections.ArrayList
        name: ArrayList
        href: System.Collections.ArrayList.yml
  id: System.Collections.ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ReadOnlyCollectionBase.Count
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 31
  syntax:
    content:
      CSharp: public virtual int Count { get; }
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.ReadOnlyCollectionBase.Count
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 36
  syntax:
    content:
      CSharp: bool ICollection.IsSynchronized { get; }
    parameters:
    - id: System.Collections.ICollection.IsSynchronized
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 41
  syntax:
    content:
      CSharp: object ICollection.SyncRoot { get; }
    parameters:
    - id: System.Collections.ICollection.SyncRoot
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: ICollection.CopyTo(Array, int)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(System.Array, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 46
  syntax:
    content:
      CSharp: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type:
        id: System.Array
        name: Array
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  href: System.Collections.ReadOnlyCollectionBase.yml
  name: GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs
    startLine: 51
  syntax:
    content:
      CSharp: public virtual IEnumerator GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
  id: System.Collections.ReadOnlyCollectionBase.GetEnumerator
