items:
- uid: System.Diagnostics.Process
  href: System.Diagnostics.Process.yml
  name: Process
  fullName: System.Diagnostics.Process
  type: Class
  source:
    remote: &o1
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 15
  syntax:
    content:
      CSharp: 'public class Process : IDisposable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Diagnostics.Process
  children:
  - System.Diagnostics.Process.OutputDataReceived
  - System.Diagnostics.Process.ErrorDataReceived
  - System.Diagnostics.Process.#ctor
  - System.Diagnostics.Process.SafeHandle
  - System.Diagnostics.Process.BasePriority
  - System.Diagnostics.Process.ExitCode
  - System.Diagnostics.Process.HasExited
  - System.Diagnostics.Process.ExitTime
  - System.Diagnostics.Process.HandleCount
  - System.Diagnostics.Process.Id
  - System.Diagnostics.Process.MachineName
  - System.Diagnostics.Process.MaxWorkingSet
  - System.Diagnostics.Process.MinWorkingSet
  - System.Diagnostics.Process.Modules
  - System.Diagnostics.Process.NonpagedSystemMemorySize64
  - System.Diagnostics.Process.PagedMemorySize64
  - System.Diagnostics.Process.PagedSystemMemorySize64
  - System.Diagnostics.Process.PeakPagedMemorySize64
  - System.Diagnostics.Process.PeakWorkingSet64
  - System.Diagnostics.Process.PeakVirtualMemorySize64
  - System.Diagnostics.Process.PriorityBoostEnabled
  - System.Diagnostics.Process.PriorityClass
  - System.Diagnostics.Process.PrivateMemorySize64
  - System.Diagnostics.Process.ProcessName
  - System.Diagnostics.Process.ProcessorAffinity
  - System.Diagnostics.Process.SessionId
  - System.Diagnostics.Process.StartInfo
  - System.Diagnostics.Process.Threads
  - System.Diagnostics.Process.VirtualMemorySize64
  - System.Diagnostics.Process.EnableRaisingEvents
  - System.Diagnostics.Process.StandardInput
  - System.Diagnostics.Process.StandardOutput
  - System.Diagnostics.Process.StandardError
  - System.Diagnostics.Process.WorkingSet64
  - System.Diagnostics.Process.Exited
  - System.Diagnostics.Process.Dispose(System.Boolean)
  - System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - System.Diagnostics.Process.GetProcessById(System.Int32)
  - System.Diagnostics.Process.GetProcessesByName(System.String)
  - System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
  - System.Diagnostics.Process.GetProcesses
  - System.Diagnostics.Process.GetProcesses(System.String)
  - System.Diagnostics.Process.GetCurrentProcess
  - System.Diagnostics.Process.OnExited
  - System.Diagnostics.Process.Refresh
  - System.Diagnostics.Process.Start
  - System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)
  - System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)
  - System.Diagnostics.Process.Start(System.String)
  - System.Diagnostics.Process.Start(System.String,System.String)
  - System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  - System.Diagnostics.Process.ToString
  - System.Diagnostics.Process.WaitForExit
  - System.Diagnostics.Process.WaitForExit(System.Int32)
  - System.Diagnostics.Process.BeginOutputReadLine
  - System.Diagnostics.Process.BeginErrorReadLine
  - System.Diagnostics.Process.CancelOutputRead
  - System.Diagnostics.Process.CancelErrorRead
  - System.Diagnostics.Process.Dispose
  - System.Diagnostics.Process.EnterDebugMode
  - System.Diagnostics.Process.LeaveDebugMode
  - System.Diagnostics.Process.Kill
  - System.Diagnostics.Process.MainModule
  - System.Diagnostics.Process.PrivilegedProcessorTime
  - System.Diagnostics.Process.StartTime
  - System.Diagnostics.Process.TotalProcessorTime
  - System.Diagnostics.Process.UserProcessorTime
- uid: System.Diagnostics.Process.OutputDataReceived
  href: System.Diagnostics.Process.yml
  name: OutputDataReceived
  fullName: System.Diagnostics.Process.OutputDataReceived
  type: Event
  source:
    remote: &o0
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 70
  syntax:
    content:
      CSharp: public event DataReceivedEventHandler OutputDataReceived;
  id: System.Diagnostics.Process.OutputDataReceived
- uid: System.Diagnostics.Process.ErrorDataReceived
  href: System.Diagnostics.Process.yml
  name: ErrorDataReceived
  fullName: System.Diagnostics.Process.ErrorDataReceived
  type: Event
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 71
  syntax:
    content:
      CSharp: public event DataReceivedEventHandler ErrorDataReceived;
  id: System.Diagnostics.Process.ErrorDataReceived
- uid: System.Diagnostics.Process.#ctor
  href: System.Diagnostics.Process.yml
  name: Process()
  fullName: System.Diagnostics.Process.Process()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 92
  syntax:
    content:
      CSharp: public Process()
    parameters: []
  id: System.Diagnostics.Process.#ctor
- uid: System.Diagnostics.Process.SafeHandle
  href: System.Diagnostics.Process.yml
  name: SafeHandle
  fullName: System.Diagnostics.Process.SafeHandle
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 110
  syntax:
    content:
      CSharp: public SafeProcessHandle SafeHandle { get; }
    parameters:
    - id: SafeHandle
      type:
        id: Microsoft.Win32.SafeHandles.SafeProcessHandle
        name: SafeProcessHandle
        href: Microsoft.Win32.SafeHandles.SafeProcessHandle.yml
  id: System.Diagnostics.Process.SafeHandle
- uid: System.Diagnostics.Process.BasePriority
  href: System.Diagnostics.Process.yml
  name: BasePriority
  fullName: System.Diagnostics.Process.BasePriority
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 134
  syntax:
    content:
      CSharp: public int BasePriority { get; }
    parameters:
    - id: BasePriority
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.Process.BasePriority
- uid: System.Diagnostics.Process.ExitCode
  href: System.Diagnostics.Process.yml
  name: ExitCode
  fullName: System.Diagnostics.Process.ExitCode
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 150
  syntax:
    content:
      CSharp: public int ExitCode { get; }
    parameters:
    - id: ExitCode
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.Process.ExitCode
- uid: System.Diagnostics.Process.HasExited
  href: System.Diagnostics.Process.yml
  name: HasExited
  fullName: System.Diagnostics.Process.HasExited
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 165
  syntax:
    content:
      CSharp: public bool HasExited { get; }
    parameters:
    - id: HasExited
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.HasExited
- uid: System.Diagnostics.Process.ExitTime
  href: System.Diagnostics.Process.yml
  name: ExitTime
  fullName: System.Diagnostics.Process.ExitTime
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 187
  syntax:
    content:
      CSharp: public DateTime ExitTime { get; }
    parameters:
    - id: ExitTime
      type:
        id: System.DateTime
        name: DateTime
        isExternal: true
  id: System.Diagnostics.Process.ExitTime
- uid: System.Diagnostics.Process.HandleCount
  href: System.Diagnostics.Process.yml
  name: HandleCount
  fullName: System.Diagnostics.Process.HandleCount
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 207
  syntax:
    content:
      CSharp: public int HandleCount { get; }
    parameters:
    - id: HandleCount
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.Process.HandleCount
- uid: System.Diagnostics.Process.Id
  href: System.Diagnostics.Process.yml
  name: Id
  fullName: System.Diagnostics.Process.Id
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 222
  syntax:
    content:
      CSharp: public int Id { get; }
    parameters:
    - id: Id
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.Process.Id
- uid: System.Diagnostics.Process.MachineName
  href: System.Diagnostics.Process.yml
  name: MachineName
  fullName: System.Diagnostics.Process.MachineName
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 237
  syntax:
    content:
      CSharp: public string MachineName { get; }
    parameters:
    - id: MachineName
      type:
        id: System.String
        name: string
        isExternal: true
  id: System.Diagnostics.Process.MachineName
- uid: System.Diagnostics.Process.MaxWorkingSet
  href: System.Diagnostics.Process.yml
  name: MaxWorkingSet
  fullName: System.Diagnostics.Process.MaxWorkingSet
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 252
  syntax:
    content:
      CSharp: public IntPtr MaxWorkingSet { get; set; }
    parameters:
    - id: MaxWorkingSet
      type:
        id: System.IntPtr
        name: IntPtr
        isExternal: true
  id: System.Diagnostics.Process.MaxWorkingSet
- uid: System.Diagnostics.Process.MinWorkingSet
  href: System.Diagnostics.Process.yml
  name: MinWorkingSet
  fullName: System.Diagnostics.Process.MinWorkingSet
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 271
  syntax:
    content:
      CSharp: public IntPtr MinWorkingSet { get; set; }
    parameters:
    - id: MinWorkingSet
      type:
        id: System.IntPtr
        name: IntPtr
        isExternal: true
  id: System.Diagnostics.Process.MinWorkingSet
- uid: System.Diagnostics.Process.Modules
  href: System.Diagnostics.Process.yml
  name: Modules
  fullName: System.Diagnostics.Process.Modules
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 284
  syntax:
    content:
      CSharp: public ProcessModuleCollection Modules { get; }
    parameters:
    - id: Modules
      type:
        id: System.Diagnostics.ProcessModuleCollection
        name: ProcessModuleCollection
        href: System.Diagnostics.ProcessModuleCollection.yml
  id: System.Diagnostics.Process.Modules
- uid: System.Diagnostics.Process.NonpagedSystemMemorySize64
  href: System.Diagnostics.Process.yml
  name: NonpagedSystemMemorySize64
  fullName: System.Diagnostics.Process.NonpagedSystemMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 304
  syntax:
    content:
      CSharp: public long NonpagedSystemMemorySize64 { get; }
    parameters:
    - id: NonpagedSystemMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.NonpagedSystemMemorySize64
- uid: System.Diagnostics.Process.PagedMemorySize64
  href: System.Diagnostics.Process.yml
  name: PagedMemorySize64
  fullName: System.Diagnostics.Process.PagedMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 313
  syntax:
    content:
      CSharp: public long PagedMemorySize64 { get; }
    parameters:
    - id: PagedMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PagedMemorySize64
- uid: System.Diagnostics.Process.PagedSystemMemorySize64
  href: System.Diagnostics.Process.yml
  name: PagedSystemMemorySize64
  fullName: System.Diagnostics.Process.PagedSystemMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 322
  syntax:
    content:
      CSharp: public long PagedSystemMemorySize64 { get; }
    parameters:
    - id: PagedSystemMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PagedSystemMemorySize64
- uid: System.Diagnostics.Process.PeakPagedMemorySize64
  href: System.Diagnostics.Process.yml
  name: PeakPagedMemorySize64
  fullName: System.Diagnostics.Process.PeakPagedMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 331
  syntax:
    content:
      CSharp: public long PeakPagedMemorySize64 { get; }
    parameters:
    - id: PeakPagedMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PeakPagedMemorySize64
- uid: System.Diagnostics.Process.PeakWorkingSet64
  href: System.Diagnostics.Process.yml
  name: PeakWorkingSet64
  fullName: System.Diagnostics.Process.PeakWorkingSet64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 340
  syntax:
    content:
      CSharp: public long PeakWorkingSet64 { get; }
    parameters:
    - id: PeakWorkingSet64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PeakWorkingSet64
- uid: System.Diagnostics.Process.PeakVirtualMemorySize64
  href: System.Diagnostics.Process.yml
  name: PeakVirtualMemorySize64
  fullName: System.Diagnostics.Process.PeakVirtualMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 349
  syntax:
    content:
      CSharp: public long PeakVirtualMemorySize64 { get; }
    parameters:
    - id: PeakVirtualMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PeakVirtualMemorySize64
- uid: System.Diagnostics.Process.PriorityBoostEnabled
  href: System.Diagnostics.Process.yml
  name: PriorityBoostEnabled
  fullName: System.Diagnostics.Process.PriorityBoostEnabled
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 365
  syntax:
    content:
      CSharp: public bool PriorityBoostEnabled { get; set; }
    parameters:
    - id: PriorityBoostEnabled
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.PriorityBoostEnabled
- uid: System.Diagnostics.Process.PriorityClass
  href: System.Diagnostics.Process.yml
  name: PriorityClass
  fullName: System.Diagnostics.Process.PriorityClass
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 390
  syntax:
    content:
      CSharp: public ProcessPriorityClass PriorityClass { get; set; }
    parameters:
    - id: PriorityClass
      type:
        id: System.Diagnostics.ProcessPriorityClass
        name: ProcessPriorityClass
        href: System.Diagnostics.ProcessPriorityClass.yml
  id: System.Diagnostics.Process.PriorityClass
- uid: System.Diagnostics.Process.PrivateMemorySize64
  href: System.Diagnostics.Process.yml
  name: PrivateMemorySize64
  fullName: System.Diagnostics.Process.PrivateMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 414
  syntax:
    content:
      CSharp: public long PrivateMemorySize64 { get; }
    parameters:
    - id: PrivateMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.PrivateMemorySize64
- uid: System.Diagnostics.Process.ProcessName
  href: System.Diagnostics.Process.yml
  name: ProcessName
  fullName: System.Diagnostics.Process.ProcessName
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 429
  syntax:
    content:
      CSharp: public string ProcessName { get; }
    parameters:
    - id: ProcessName
      type:
        id: System.String
        name: string
        isExternal: true
  id: System.Diagnostics.Process.ProcessName
- uid: System.Diagnostics.Process.ProcessorAffinity
  href: System.Diagnostics.Process.yml
  name: ProcessorAffinity
  fullName: System.Diagnostics.Process.ProcessorAffinity
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 444
  syntax:
    content:
      CSharp: public IntPtr ProcessorAffinity { get; set; }
    parameters:
    - id: ProcessorAffinity
      type:
        id: System.IntPtr
        name: IntPtr
        isExternal: true
  id: System.Diagnostics.Process.ProcessorAffinity
- uid: System.Diagnostics.Process.SessionId
  href: System.Diagnostics.Process.yml
  name: SessionId
  fullName: System.Diagnostics.Process.SessionId
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 463
  syntax:
    content:
      CSharp: public int SessionId { get; }
    parameters:
    - id: SessionId
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.Process.SessionId
- uid: System.Diagnostics.Process.StartInfo
  href: System.Diagnostics.Process.yml
  name: StartInfo
  fullName: System.Diagnostics.Process.StartInfo
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 478
  syntax:
    content:
      CSharp: public ProcessStartInfo StartInfo { get; set; }
    parameters:
    - id: StartInfo
      type:
        id: System.Diagnostics.ProcessStartInfo
        name: ProcessStartInfo
        href: System.Diagnostics.ProcessStartInfo.yml
  id: System.Diagnostics.Process.StartInfo
- uid: System.Diagnostics.Process.Threads
  href: System.Diagnostics.Process.yml
  name: Threads
  fullName: System.Diagnostics.Process.Threads
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 515
  syntax:
    content:
      CSharp: public ProcessThreadCollection Threads { get; }
    parameters:
    - id: Threads
      type:
        id: System.Diagnostics.ProcessThreadCollection
        name: ProcessThreadCollection
        href: System.Diagnostics.ProcessThreadCollection.yml
  id: System.Diagnostics.Process.Threads
- uid: System.Diagnostics.Process.VirtualMemorySize64
  href: System.Diagnostics.Process.yml
  name: VirtualMemorySize64
  fullName: System.Diagnostics.Process.VirtualMemorySize64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 535
  syntax:
    content:
      CSharp: public long VirtualMemorySize64 { get; }
    parameters:
    - id: VirtualMemorySize64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.VirtualMemorySize64
- uid: System.Diagnostics.Process.EnableRaisingEvents
  href: System.Diagnostics.Process.yml
  name: EnableRaisingEvents
  fullName: System.Diagnostics.Process.EnableRaisingEvents
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 551
  syntax:
    content:
      CSharp: public bool EnableRaisingEvents { get; set; }
    parameters:
    - id: EnableRaisingEvents
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.EnableRaisingEvents
- uid: System.Diagnostics.Process.StandardInput
  href: System.Diagnostics.Process.yml
  name: StandardInput
  fullName: System.Diagnostics.Process.StandardInput
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 582
  syntax:
    content:
      CSharp: public StreamWriter StandardInput { get; }
    parameters:
    - id: StandardInput
      type:
        id: System.IO.StreamWriter
        name: StreamWriter
        isExternal: true
  id: System.Diagnostics.Process.StandardInput
- uid: System.Diagnostics.Process.StandardOutput
  href: System.Diagnostics.Process.yml
  name: StandardOutput
  fullName: System.Diagnostics.Process.StandardOutput
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 598
  syntax:
    content:
      CSharp: public StreamReader StandardOutput { get; }
    parameters:
    - id: StandardOutput
      type:
        id: System.IO.StreamReader
        name: StreamReader
        isExternal: true
  id: System.Diagnostics.Process.StandardOutput
- uid: System.Diagnostics.Process.StandardError
  href: System.Diagnostics.Process.yml
  name: StandardError
  fullName: System.Diagnostics.Process.StandardError
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 623
  syntax:
    content:
      CSharp: public StreamReader StandardError { get; }
    parameters:
    - id: StandardError
      type:
        id: System.IO.StreamReader
        name: StreamReader
        isExternal: true
  id: System.Diagnostics.Process.StandardError
- uid: System.Diagnostics.Process.WorkingSet64
  href: System.Diagnostics.Process.yml
  name: WorkingSet64
  fullName: System.Diagnostics.Process.WorkingSet64
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 645
  syntax:
    content:
      CSharp: public long WorkingSet64 { get; }
    parameters:
    - id: WorkingSet64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Diagnostics.Process.WorkingSet64
- uid: System.Diagnostics.Process.Exited
  href: System.Diagnostics.Process.yml
  name: Exited
  fullName: System.Diagnostics.Process.Exited
  type: Event
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 654
  syntax:
    content:
      CSharp: public event EventHandler Exited
  id: System.Diagnostics.Process.Exited
- uid: System.Diagnostics.Process.Dispose(System.Boolean)
  href: System.Diagnostics.Process.yml
  name: Dispose(bool)
  fullName: System.Diagnostics.Process.Dispose(bool)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 704
  syntax:
    content:
      CSharp: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.Dispose(System.Boolean)
- uid: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  href: System.Diagnostics.Process.yml
  name: GetProcessById(int, string)
  fullName: System.Diagnostics.Process.GetProcessById(int, string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 874
  syntax:
    content:
      CSharp: public static Process GetProcessById(int processId, string machineName)
    parameters:
    - id: processId
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: machineName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
- uid: System.Diagnostics.Process.GetProcessById(System.Int32)
  href: System.Diagnostics.Process.yml
  name: GetProcessById(int)
  fullName: System.Diagnostics.Process.GetProcessById(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 890
  syntax:
    content:
      CSharp: public static Process GetProcessById(int processId)
    parameters:
    - id: processId
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.GetProcessById(System.Int32)
- uid: System.Diagnostics.Process.GetProcessesByName(System.String)
  href: System.Diagnostics.Process.yml
  name: GetProcessesByName(string)
  fullName: System.Diagnostics.Process.GetProcessesByName(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 903
  syntax:
    content:
      CSharp: public static Process[] GetProcessesByName(string processName)
    parameters:
    - id: processName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      type:
        id: System.Array
        name: Process[]
        isExternal: true
  id: System.Diagnostics.Process.GetProcessesByName(System.String)
- uid: System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
  href: System.Diagnostics.Process.yml
  name: GetProcessesByName(string, string)
  fullName: System.Diagnostics.Process.GetProcessesByName(string, string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 914
  syntax:
    content:
      CSharp: public static Process[] GetProcessesByName(string processName, string machineName)
    parameters:
    - id: processName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: machineName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      type:
        id: System.Array
        name: Process[]
        isExternal: true
  id: System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
- uid: System.Diagnostics.Process.GetProcesses
  href: System.Diagnostics.Process.yml
  name: GetProcesses()
  fullName: System.Diagnostics.Process.GetProcesses()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 943
  syntax:
    content:
      CSharp: public static Process[] GetProcesses()
    parameters: []
    return:
      type:
        id: System.Array
        name: Process[]
        isExternal: true
  id: System.Diagnostics.Process.GetProcesses
- uid: System.Diagnostics.Process.GetProcesses(System.String)
  href: System.Diagnostics.Process.yml
  name: GetProcesses(string)
  fullName: System.Diagnostics.Process.GetProcesses(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 955
  syntax:
    content:
      CSharp: public static Process[] GetProcesses(string machineName)
    parameters:
    - id: machineName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      type:
        id: System.Array
        name: Process[]
        isExternal: true
  id: System.Diagnostics.Process.GetProcesses(System.String)
- uid: System.Diagnostics.Process.GetCurrentProcess
  href: System.Diagnostics.Process.yml
  name: GetCurrentProcess()
  fullName: System.Diagnostics.Process.GetCurrentProcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 986
  syntax:
    content:
      CSharp: public static Process GetCurrentProcess()
    parameters: []
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.GetCurrentProcess
- uid: System.Diagnostics.Process.OnExited
  href: System.Diagnostics.Process.yml
  name: OnExited()
  fullName: System.Diagnostics.Process.OnExited()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 996
  syntax:
    content:
      CSharp: protected void OnExited()
    parameters: []
  id: System.Diagnostics.Process.OnExited
- uid: System.Diagnostics.Process.Refresh
  href: System.Diagnostics.Process.yml
  name: Refresh()
  fullName: System.Diagnostics.Process.Refresh()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1032
  syntax:
    content:
      CSharp: public void Refresh()
    parameters: []
  id: System.Diagnostics.Process.Refresh
- uid: System.Diagnostics.Process.Start
  href: System.Diagnostics.Process.yml
  name: Start()
  fullName: System.Diagnostics.Process.Start()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1098
  syntax:
    content:
      CSharp: public bool Start()
    parameters: []
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.Start
- uid: System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)
  href: System.Diagnostics.Process.yml
  name: Start(string, string, SecureString, string)
  fullName: System.Diagnostics.Process.Start(string, string, System.Security.SecureString, string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1130
  syntax:
    content:
      CSharp: public static Process Start(string fileName, string userName, SecureString password, string domain)
    parameters:
    - id: fileName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: userName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: password
      type:
        id: System.Security.SecureString
        name: SecureString
        isExternal: true
    - id: domain
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)
- uid: System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)
  href: System.Diagnostics.Process.yml
  name: Start(string, string, string, SecureString, string)
  fullName: System.Diagnostics.Process.Start(string, string, string, System.Security.SecureString, string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1139
  syntax:
    content:
      CSharp: public static Process Start(string fileName, string arguments, string userName, SecureString password, string domain)
    parameters:
    - id: fileName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: arguments
      type:
        id: System.String
        name: string
        isExternal: true
    - id: userName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: password
      type:
        id: System.Security.SecureString
        name: SecureString
        isExternal: true
    - id: domain
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)
- uid: System.Diagnostics.Process.Start(System.String)
  href: System.Diagnostics.Process.yml
  name: Start(string)
  fullName: System.Diagnostics.Process.Start(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1155
  syntax:
    content:
      CSharp: public static Process Start(string fileName)
    parameters:
    - id: fileName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.Start(System.String)
- uid: System.Diagnostics.Process.Start(System.String,System.String)
  href: System.Diagnostics.Process.yml
  name: Start(string, string)
  fullName: System.Diagnostics.Process.Start(string, string)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1168
  syntax:
    content:
      CSharp: public static Process Start(string fileName, string arguments)
    parameters:
    - id: fileName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: arguments
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.Start(System.String,System.String)
- uid: System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  href: System.Diagnostics.Process.yml
  name: Start(ProcessStartInfo)
  fullName: System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1181
  syntax:
    content:
      CSharp: public static Process Start(ProcessStartInfo startInfo)
    parameters:
    - id: startInfo
      type:
        id: System.Diagnostics.ProcessStartInfo
        name: ProcessStartInfo
        href: System.Diagnostics.ProcessStartInfo.yml
    return:
      id: Process
      type:
        id: System.Diagnostics.Process
        name: Process
        href: System.Diagnostics.Process.yml
  id: System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
- uid: System.Diagnostics.Process.ToString
  href: System.Diagnostics.Process.yml
  name: ToString()
  fullName: System.Diagnostics.Process.ToString()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1215
  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
  id: System.Diagnostics.Process.ToString
- uid: System.Diagnostics.Process.WaitForExit
  href: System.Diagnostics.Process.yml
  name: WaitForExit()
  fullName: System.Diagnostics.Process.WaitForExit()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1234
  syntax:
    content:
      CSharp: public void WaitForExit()
    parameters: []
  id: System.Diagnostics.Process.WaitForExit
- uid: System.Diagnostics.Process.WaitForExit(System.Int32)
  href: System.Diagnostics.Process.yml
  name: WaitForExit(int)
  fullName: System.Diagnostics.Process.WaitForExit(int)
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1243
  summary: >-
    Instructs the Process component to wait the specified number of milliseconds for

    the associated process to exit.
  syntax:
    content:
      CSharp: public bool WaitForExit(int milliseconds)
    parameters:
    - id: milliseconds
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.Process.WaitForExit(System.Int32)
- uid: System.Diagnostics.Process.BeginOutputReadLine
  href: System.Diagnostics.Process.yml
  name: BeginOutputReadLine()
  fullName: System.Diagnostics.Process.BeginOutputReadLine()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1261
  syntax:
    content:
      CSharp: public void BeginOutputReadLine()
    parameters: []
  id: System.Diagnostics.Process.BeginOutputReadLine
- uid: System.Diagnostics.Process.BeginErrorReadLine
  href: System.Diagnostics.Process.yml
  name: BeginErrorReadLine()
  fullName: System.Diagnostics.Process.BeginErrorReadLine()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1299
  syntax:
    content:
      CSharp: public void BeginErrorReadLine()
    parameters: []
  id: System.Diagnostics.Process.BeginErrorReadLine
- uid: System.Diagnostics.Process.CancelOutputRead
  href: System.Diagnostics.Process.yml
  name: CancelOutputRead()
  fullName: System.Diagnostics.Process.CancelOutputRead()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1336
  syntax:
    content:
      CSharp: public void CancelOutputRead()
    parameters: []
  id: System.Diagnostics.Process.CancelOutputRead
- uid: System.Diagnostics.Process.CancelErrorRead
  href: System.Diagnostics.Process.yml
  name: CancelErrorRead()
  fullName: System.Diagnostics.Process.CancelErrorRead()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1356
  syntax:
    content:
      CSharp: public void CancelErrorRead()
    parameters: []
  id: System.Diagnostics.Process.CancelErrorRead
- uid: System.Diagnostics.Process.Dispose
  href: System.Diagnostics.Process.yml
  name: Dispose()
  fullName: System.Diagnostics.Process.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1392
  syntax:
    content:
      CSharp: public void Dispose()
    parameters: []
  id: System.Diagnostics.Process.Dispose
- uid: System.Diagnostics.Process.EnterDebugMode
  href: System.Diagnostics.Process.yml
  name: EnterDebugMode()
  fullName: System.Diagnostics.Process.EnterDebugMode()
  type: Method
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 21
  summary: >-
    Puts a Process component in state to interact with operating system processes that run in a

    special mode by enabling the native property SeDebugPrivilege on the current thread.
  syntax:
    content:
      CSharp: public static void EnterDebugMode()
    parameters: []
  id: System.Diagnostics.Process.EnterDebugMode
- uid: System.Diagnostics.Process.LeaveDebugMode
  href: System.Diagnostics.Process.yml
  name: LeaveDebugMode()
  fullName: System.Diagnostics.Process.LeaveDebugMode()
  type: Method
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 30
  summary: >-
    Takes a Process component out of the state that lets it interact with operating system processes

    that run in a special mode.
  syntax:
    content:
      CSharp: public static void LeaveDebugMode()
    parameters: []
  id: System.Diagnostics.Process.LeaveDebugMode
- uid: System.Diagnostics.Process.Kill
  href: System.Diagnostics.Process.yml
  name: Kill()
  fullName: System.Diagnostics.Process.Kill()
  type: Method
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 36
  summary: Stops the associated process immediately.
  syntax:
    content:
      CSharp: public void Kill()
    parameters: []
  id: System.Diagnostics.Process.Kill
- uid: System.Diagnostics.Process.MainModule
  href: System.Diagnostics.Process.yml
  name: MainModule
  fullName: System.Diagnostics.Process.MainModule
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 118
  summary: Gets the main module for the associated process.
  syntax:
    content:
      CSharp: public ProcessModule MainModule { get; }
    parameters:
    - id: MainModule
      type:
        id: System.Diagnostics.ProcessModule
        name: ProcessModule
        href: System.Diagnostics.ProcessModule.yml
  id: System.Diagnostics.Process.MainModule
- uid: System.Diagnostics.Process.PrivilegedProcessorTime
  href: System.Diagnostics.Process.yml
  name: PrivilegedProcessorTime
  fullName: System.Diagnostics.Process.PrivilegedProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 195
  summary: Gets the amount of time the process has spent running code inside the operating system core.
  syntax:
    content:
      CSharp: public TimeSpan PrivilegedProcessorTime { get; }
    parameters:
    - id: PrivilegedProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.Process.PrivilegedProcessorTime
- uid: System.Diagnostics.Process.StartTime
  href: System.Diagnostics.Process.yml
  name: StartTime
  fullName: System.Diagnostics.Process.StartTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 201
  summary: Gets the time the associated process was started.
  syntax:
    content:
      CSharp: public DateTime StartTime { get; }
    parameters:
    - id: StartTime
      type:
        id: System.DateTime
        name: DateTime
        isExternal: true
  id: System.Diagnostics.Process.StartTime
- uid: System.Diagnostics.Process.TotalProcessorTime
  href: System.Diagnostics.Process.yml
  name: TotalProcessorTime
  fullName: System.Diagnostics.Process.TotalProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 211
  summary: >-
    Gets the amount of time the associated process has spent utilizing the CPU.

    It is the sum of the [System.Diagnostics.Process.UserProcessorTime](System.Diagnostics.Process.yml) and

    [System.Diagnostics.Process.PrivilegedProcessorTime](System.Diagnostics.Process.yml).
  syntax:
    content:
      CSharp: public TimeSpan TotalProcessorTime { get; }
    parameters:
    - id: TotalProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.Process.TotalProcessorTime
- uid: System.Diagnostics.Process.UserProcessorTime
  href: System.Diagnostics.Process.yml
  name: UserProcessorTime
  fullName: System.Diagnostics.Process.UserProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs
    startLine: 220
  summary: >-
    Gets the amount of time the associated process has spent running code

    inside the application portion of the process (not the operating system core).
  syntax:
    content:
      CSharp: public TimeSpan UserProcessorTime { get; }
    parameters:
    - id: UserProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.Process.UserProcessorTime
