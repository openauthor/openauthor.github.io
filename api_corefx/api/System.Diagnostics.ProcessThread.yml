items:
- uid: System.Diagnostics.ProcessThread
  href: System.Diagnostics.ProcessThread.yml
  name: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  source:
    remote: &o1
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 8
  syntax:
    content:
      CSharp: public class ProcessThread
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Diagnostics.ProcessThread
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.WaitReason
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.BasePriority
  href: System.Diagnostics.ProcessThread.yml
  name: BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  source:
    remote: &o0
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 35
  syntax:
    content:
      CSharp: public int BasePriority { get; }
    parameters:
    - id: BasePriority
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.ProcessThread.BasePriority
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  href: System.Diagnostics.ProcessThread.yml
  name: CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 45
  syntax:
    content:
      CSharp: public int CurrentPriority { get; }
    parameters:
    - id: CurrentPriority
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id
  href: System.Diagnostics.ProcessThread.yml
  name: Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 53
  syntax:
    content:
      CSharp: public int Id { get; }
    parameters:
    - id: Id
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  href: System.Diagnostics.ProcessThread.yml
  name: PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 62
  syntax:
    content:
      CSharp: public bool PriorityBoostEnabled { get; set; }
    parameters:
    - id: PriorityBoostEnabled
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Diagnostics.ProcessThread.PriorityBoostEnabled
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  href: System.Diagnostics.ProcessThread.yml
  name: PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 84
  syntax:
    content:
      CSharp: public ThreadPriorityLevel PriorityLevel { get; set; }
    parameters:
    - id: PriorityLevel
      type:
        id: System.Diagnostics.ThreadPriorityLevel
        name: ThreadPriorityLevel
        href: System.Diagnostics.ThreadPriorityLevel.yml
  id: System.Diagnostics.ProcessThread.PriorityLevel
- uid: System.Diagnostics.ProcessThread.StartAddress
  href: System.Diagnostics.ProcessThread.yml
  name: StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 105
  syntax:
    content:
      CSharp: public IntPtr StartAddress { get; }
    parameters:
    - id: StartAddress
      type:
        id: System.IntPtr
        name: IntPtr
        isExternal: true
  id: System.Diagnostics.ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.ThreadState
  href: System.Diagnostics.ProcessThread.yml
  name: ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 113
  syntax:
    content:
      CSharp: public ThreadState ThreadState { get; }
    parameters:
    - id: ThreadState
      type:
        id: System.Diagnostics.ThreadState
        name: ThreadState
        href: System.Diagnostics.ThreadState.yml
  id: System.Diagnostics.ProcessThread.ThreadState
- uid: System.Diagnostics.ProcessThread.WaitReason
  href: System.Diagnostics.ProcessThread.yml
  name: WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  source:
    remote: *o0
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 121
  syntax:
    content:
      CSharp: public ThreadWaitReason WaitReason { get; }
    parameters:
    - id: WaitReason
      type:
        id: System.Diagnostics.ThreadWaitReason
        name: ThreadWaitReason
        href: System.Diagnostics.ThreadWaitReason.yml
  id: System.Diagnostics.ProcessThread.WaitReason
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  href: System.Diagnostics.ProcessThread.yml
  name: IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 11
  summary: Sets the processor that this thread would ideally like to run on.
  syntax:
    content:
      CSharp: public int IdealProcessor { set; }
    parameters:
    - id: IdealProcessor
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Diagnostics.ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  href: System.Diagnostics.ProcessThread.yml
  name: ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 29
  summary: >-
    Resets the ideal processor so there is no ideal processor for this thread (e.g.

    any processor is ideal).
  syntax:
    content:
      CSharp: public void ResetIdealProcessor()
    parameters: []
  id: System.Diagnostics.ProcessThread.ResetIdealProcessor
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  href: System.Diagnostics.ProcessThread.yml
  name: ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 101
  summary: >-
    Sets which processors the associated thread is allowed to be scheduled to run on.

    Each processor is represented as a bit: bit 0 is processor one, bit 1 is processor

    two, etc.  For example, the value 1 means run on processor one, 2 means run on

    processor two, 3 means run on processor one or two.
  syntax:
    content:
      CSharp: public IntPtr ProcessorAffinity { set; }
    parameters:
    - id: ProcessorAffinity
      type:
        id: System.IntPtr
        name: IntPtr
        isExternal: true
  id: System.Diagnostics.ProcessThread.ProcessorAffinity
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  href: System.Diagnostics.ProcessThread.yml
  name: PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 119
  summary: >-
    Returns the amount of time the thread has spent running code inside the operating

    system core.
  syntax:
    content:
      CSharp: public TimeSpan PrivilegedProcessorTime { get; }
    parameters:
    - id: PrivilegedProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
- uid: System.Diagnostics.ProcessThread.StartTime
  href: System.Diagnostics.ProcessThread.yml
  name: StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 125
  summary: Returns the time the associated thread was started.
  syntax:
    content:
      CSharp: public DateTime StartTime { get; }
    parameters:
    - id: StartTime
      type:
        id: System.DateTime
        name: DateTime
        isExternal: true
  id: System.Diagnostics.ProcessThread.StartTime
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  href: System.Diagnostics.ProcessThread.yml
  name: TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 135
  summary: >-
    Returns the amount of time the associated thread has spent utilizing the CPU.

    It is the sum of the System.Diagnostics.ProcessThread.UserProcessorTime and

    System.Diagnostics.ProcessThread.PrivilegedProcessorTime.
  syntax:
    content:
      CSharp: public TimeSpan TotalProcessorTime { get; }
    parameters:
    - id: TotalProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  href: System.Diagnostics.ProcessThread.yml
  name: UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  source:
    remote: *o1
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs
    startLine: 144
  summary: >-
    Returns the amount of time the associated thread has spent running code

    inside the application (not the operating system core).
  syntax:
    content:
      CSharp: public TimeSpan UserProcessorTime { get; }
    parameters:
    - id: UserProcessorTime
      type:
        id: System.TimeSpan
        name: TimeSpan
        isExternal: true
  id: System.Diagnostics.ProcessThread.UserProcessorTime
