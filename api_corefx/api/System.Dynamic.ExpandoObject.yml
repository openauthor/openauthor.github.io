items:
- uid: System.Dynamic.ExpandoObject
  href: System.Dynamic.ExpandoObject.yml
  name: ExpandoObject
  fullName: System.Dynamic.ExpandoObject
  type: Class
  source:
    remote: &o0
      path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 16
  summary: Represents an object with members that can be dynamically added and removed at runtime.
  syntax:
    content:
      CSharp: 'public sealed class ExpandoObject : IDynamicMetaObjectProvider, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable, INotifyPropertyChanged'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Dynamic.ExpandoObject
  children:
  - System.Dynamic.ExpandoObject.#ctor
  - System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(Expression)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  - System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  - System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator
- uid: System.Dynamic.ExpandoObject.#ctor
  href: System.Dynamic.ExpandoObject.yml
  name: ExpandoObject()
  fullName: System.Dynamic.ExpandoObject.ExpandoObject()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 33
  summary: Creates a new ExpandoObject with no members.
  syntax:
    content:
      CSharp: public ExpandoObject()
    parameters: []
  id: System.Dynamic.ExpandoObject.#ctor
- uid: System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(Expression)
  href: System.Dynamic.ExpandoObject.yml
  name: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: System.Dynamic.ExpandoObject.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 282
  syntax:
    content:
      CSharp: DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type:
        id: Expression
        name: Expression
        isExternal: true
    return:
      id: DynamicMetaObject
      type:
        id: System.Dynamic.DynamicMetaObject
        name: DynamicMetaObject
        href: System.Dynamic.DynamicMetaObject.yml
  id: System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(Expression)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.Keys
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 605
  syntax:
    content:
      CSharp: ICollection<string> IDictionary<string, object>.Keys { get; }
    parameters:
    - id: System.Collections.Generic.IDictionary<System.String,System.Object>.Keys
      type:
        id: System.Collections.Generic.ICollection{System.String}
        name: ICollection<string>
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.Values
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 613
  syntax:
    content:
      CSharp: ICollection<object> IDictionary<string, object>.Values { get; }
    parameters:
    - id: System.Collections.Generic.IDictionary<System.String,System.Object>.Values
      type:
        id: System.Collections.Generic.ICollection{System.Object}
        name: ICollection<object>
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.this[string]
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.this[string]
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 621
  syntax:
    content:
      CSharp: object IDictionary<string, object>.this[string key] { get; set; }
    parameters:
    - id: System.Collections.Generic.IDictionary<System.String,System.Object>.this[]
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.Add(string, object)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.Add(string, object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 640
  syntax:
    content:
      CSharp: void IDictionary<string, object>.Add(string key, object value)
    parameters:
    - id: key
      type:
        id: System.String
        name: string
        isExternal: true
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.ContainsKey(string)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.ContainsKey(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 645
  syntax:
    content:
      CSharp: bool IDictionary<string, object>.ContainsKey(string key)
    parameters:
    - id: key
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.Remove(string)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.Remove(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 654
  syntax:
    content:
      CSharp: bool IDictionary<string, object>.Remove(string key)
    parameters:
    - id: key
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
  href: System.Dynamic.ExpandoObject.yml
  name: IDictionary<string, object>.TryGetValue(string, out object)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IDictionary<string, object>.TryGetValue(string, out object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 661
  syntax:
    content:
      CSharp: bool IDictionary<string, object>.TryGetValue(string key, out object value)
    parameters:
    - id: key
      type:
        id: System.String
        name: string
        isExternal: true
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.Count
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 669
  syntax:
    content:
      CSharp: int ICollection<KeyValuePair<string, object>>.Count { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.IsReadOnly
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 677
  syntax:
    content:
      CSharp: bool ICollection<KeyValuePair<string, object>>.IsReadOnly { get; }
    parameters:
    - id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object>)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Add(System.Collections.Generic.KeyValuePair<string, object>)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 682
  syntax:
    content:
      CSharp: void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{System.String,System.Object}
        name: KeyValuePair<string, object>
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.Clear()
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 687
  syntax:
    content:
      CSharp: void ICollection<KeyValuePair<string, object>>.Clear()
    parameters: []
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object>)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Contains(System.Collections.Generic.KeyValuePair<string, object>)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 712
  syntax:
    content:
      CSharp: bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{System.String,System.Object}
        name: KeyValuePair<string, object>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[], int)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.CopyTo(System.Collections.Generic.KeyValuePair<string, object>[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 723
  syntax:
    content:
      CSharp: void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)
    parameters:
    - id: array
      type:
        id: System.Array
        name: KeyValuePair<string, object>[]
        isExternal: true
    - id: arrayIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  href: System.Dynamic.ExpandoObject.yml
  name: ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object>)
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Remove(System.Collections.Generic.KeyValuePair<string, object>)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 738
  syntax:
    content:
      CSharp: bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type:
        id: System.Collections.Generic.KeyValuePair{System.String,System.Object}
        name: KeyValuePair<string, object>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
- uid: System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  href: System.Dynamic.ExpandoObject.yml
  name: IEnumerable<KeyValuePair<string, object>>.GetEnumerator()
  fullName: System.Dynamic.ExpandoObject.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 746
  syntax:
    content:
      CSharp: IEnumerator<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>>.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
        name: IEnumerator<KeyValuePair<string, object>>
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
- uid: System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator
  href: System.Dynamic.ExpandoObject.yml
  name: IEnumerable.GetEnumerator()
  fullName: System.Dynamic.ExpandoObject.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/ExpandoObject.cs
    startLine: 752
  syntax:
    content:
      CSharp: IEnumerator IEnumerable.GetEnumerator()
    parameters: []
    return:
      id: IEnumerator
      type:
        id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
  id: System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator
