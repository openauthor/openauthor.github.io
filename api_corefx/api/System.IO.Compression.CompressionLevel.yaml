id: System.IO.Compression.CompressionLevel
href: System.IO.Compression.CompressionLevel.yaml
name:
  CSharp: CompressionLevel
qualifiedName:
  CSharp: System.IO.Compression.CompressionLevel
type: Enum
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.IO.Compression/src/System/IO/Compression/CompressionLevel.cs
  startLine: 11
summary: Defines a tradeoff between fast vs. strong compression. The specific meaning depends of the Deflater implementation.
syntax:
  content:
    CSharp: public enum CompressionLevel
inheritance:
- id: System.Enum
  name: System.Enum
  isExternal: true
items:
- id: System.IO.Compression.CompressionLevel.Optimal
  href: System.IO.Compression.CompressionLevel.yaml
  name:
    CSharp: Optimal
  qualifiedName:
    CSharp: System.IO.Compression.CompressionLevel.Optimal
  type: Field
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/CompressionLevel.cs
    startLine: 13
  syntax:
    content:
      CSharp: Optimal = 0
- id: System.IO.Compression.CompressionLevel.Fastest
  href: System.IO.Compression.CompressionLevel.yaml
  name:
    CSharp: Fastest
  qualifiedName:
    CSharp: System.IO.Compression.CompressionLevel.Fastest
  type: Field
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/CompressionLevel.cs
    startLine: 14
  syntax:
    content:
      CSharp: Fastest = 1
- id: System.IO.Compression.CompressionLevel.NoCompression
  href: System.IO.Compression.CompressionLevel.yaml
  name:
    CSharp: NoCompression
  qualifiedName:
    CSharp: System.IO.Compression.CompressionLevel.NoCompression
  type: Field
  source:
    remote: *o0
    path: src/System.IO.Compression/src/System/IO/Compression/CompressionLevel.cs
    startLine: 15
  syntax:
    content:
      CSharp: NoCompression = 2
