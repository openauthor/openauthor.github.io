items:
- uid: System.IO.UnmanagedMemoryStream
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream
  fullName: System.IO.UnmanagedMemoryStream
  type: Class
  source:
    remote: &o0
      path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 72
  summary: Stream over a memory pointer or over a SafeBuffer
  syntax:
    content:
      CSharp: 'public class UnmanagedMemoryStream : Stream, IDisposable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.MarshalByRefObject
    name: MarshalByRefObject
    isExternal: true
  - id: System.IO.Stream
    name: Stream
    isExternal: true
  id: System.IO.UnmanagedMemoryStream
  children:
  - System.IO.UnmanagedMemoryStream.#ctor
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.CanRead
  - System.IO.UnmanagedMemoryStream.CanSeek
  - System.IO.UnmanagedMemoryStream.CanWrite
  - System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryStream.Flush
  - System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.Length
  - System.IO.UnmanagedMemoryStream.Capacity
  - System.IO.UnmanagedMemoryStream.Position
  - System.IO.UnmanagedMemoryStream.PositionPointer
  - System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.ReadByte
  - System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  - System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
- uid: System.IO.UnmanagedMemoryStream.#ctor
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream()
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream()
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 103
  summary: Creates a closed stream.
  syntax:
    content:
      CSharp: '[System.Security.SecuritySafeCritical] // auto-generated protected UnmanagedMemoryStream()'
    parameters: []
  id: System.IO.UnmanagedMemoryStream.#ctor
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream(SafeBuffer, long, long)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer, long, long)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 119
  summary: Creates a stream over a SafeBuffer.
  syntax:
    content:
      CSharp: '[System.Security.SecuritySafeCritical] // auto-generated public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length)'
    parameters:
    - id: buffer
      type:
        id: System.Runtime.InteropServices.SafeBuffer
        name: SafeBuffer
        isExternal: true
    - id: offset
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream(SafeBuffer, long, long, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer, long, long, System.IO.FileAccess)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 128
  summary: Creates a stream over a SafeBuffer.
  syntax:
    content:
      CSharp: '[System.Security.SecuritySafeCritical] // auto-generated public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length, FileAccess access)'
    parameters:
    - id: buffer
      type:
        id: System.Runtime.InteropServices.SafeBuffer
        name: SafeBuffer
        isExternal: true
    - id: offset
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: access
      type:
        id: System.IO.FileAccess
        name: FileAccess
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Initialize(SafeBuffer, long, long, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer, long, long, System.IO.FileAccess)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 141
  summary: Subclasses must call this method (or the other overload) to properly initialize all instance fields.
  syntax:
    content:
      CSharp: protected void Initialize(SafeBuffer buffer, long offset, long length, FileAccess access)
    parameters:
    - id: buffer
      type:
        id: System.Runtime.InteropServices.SafeBuffer
        name: SafeBuffer
        isExternal: true
    - id: offset
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: access
      type:
        id: System.IO.FileAccess
        name: FileAccess
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream(byte*, long)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(byte*, long)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 210
  summary: Creates a stream over a byte*.
  syntax:
    content:
      CSharp: '[System.Security.SecurityCritical] // auto-generated [CLSCompliant(false)] public unsafe UnmanagedMemoryStream(byte *pointer, long length)'
    parameters:
    - id: pointer
      type:
        name: byte*
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  href: System.IO.UnmanagedMemoryStream.yml
  name: UnmanagedMemoryStream(byte*, long, long, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(byte*, long, long, System.IO.FileAccess)
  type: Constructor
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 220
  summary: Creates a stream over a byte*.
  syntax:
    content:
      CSharp: '[System.Security.SecurityCritical] // auto-generated [CLSCompliant(false)] public unsafe UnmanagedMemoryStream(byte *pointer, long length, long capacity, FileAccess access)'
    parameters:
    - id: pointer
      type:
        name: byte*
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: capacity
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: access
      type:
        id: System.IO.FileAccess
        name: FileAccess
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Initialize(byte*, long, long, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(byte*, long, long, System.IO.FileAccess)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 230
  summary: Subclasses must call this method (or the other overload) to properly initialize all instance fields.
  syntax:
    content:
      CSharp: protected void Initialize(byte *pointer, long length, long capacity, FileAccess access)
    parameters:
    - id: pointer
      type:
        name: byte*
        isExternal: true
    - id: length
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: capacity
      type:
        id: System.Int64
        name: long
        isExternal: true
    - id: access
      type:
        id: System.IO.FileAccess
        name: FileAccess
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
- uid: System.IO.UnmanagedMemoryStream.CanRead
  href: System.IO.UnmanagedMemoryStream.yml
  name: CanRead
  fullName: System.IO.UnmanagedMemoryStream.CanRead
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 269
  summary: Returns true if the stream can be read; otherwise returns false.
  syntax:
    content:
      CSharp: public override bool CanRead { [Pure] get; }
    parameters:
    - id: CanRead
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.CanRead
- uid: System.IO.UnmanagedMemoryStream.CanSeek
  href: System.IO.UnmanagedMemoryStream.yml
  name: CanSeek
  fullName: System.IO.UnmanagedMemoryStream.CanSeek
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 278
  summary: Returns true if the stream can seek; otherwise returns false.
  syntax:
    content:
      CSharp: public override bool CanSeek { [Pure] get; }
    parameters:
    - id: CanSeek
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.CanSeek
- uid: System.IO.UnmanagedMemoryStream.CanWrite
  href: System.IO.UnmanagedMemoryStream.yml
  name: CanWrite
  fullName: System.IO.UnmanagedMemoryStream.CanWrite
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 287
  summary: Returns true if the stream can be written to; otherwise returns false.
  syntax:
    content:
      CSharp: public override bool CanWrite { [Pure] get; }
    parameters:
    - id: CanWrite
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.CanWrite
- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Dispose(bool)
  fullName: System.IO.UnmanagedMemoryStream.Dispose(bool)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 297
  summary: Closes the stream. The stream's memory needs to be dealt with separately.
  syntax:
    content:
      CSharp: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
- uid: System.IO.UnmanagedMemoryStream.Flush
  href: System.IO.UnmanagedMemoryStream.yml
  name: Flush()
  fullName: System.IO.UnmanagedMemoryStream.Flush()
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 312
  summary: Since it's a memory stream, this method does nothing.
  syntax:
    content:
      CSharp: public override void Flush()
    parameters: []
  id: System.IO.UnmanagedMemoryStream.Flush
- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  href: System.IO.UnmanagedMemoryStream.yml
  name: FlushAsync(CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 322
  summary: Since it's a memory stream, this method does nothing specific.
  syntax:
    content:
      CSharp: public override Task FlushAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
    return:
      id: Task
      type:
        id: System.Threading.Tasks.Task
        name: Task
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.Length
  href: System.IO.UnmanagedMemoryStream.yml
  name: Length
  fullName: System.IO.UnmanagedMemoryStream.Length
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 341
  summary: Number of bytes in the stream.
  syntax:
    content:
      CSharp: public override long Length { get; }
    parameters:
    - id: Length
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Length
- uid: System.IO.UnmanagedMemoryStream.Capacity
  href: System.IO.UnmanagedMemoryStream.yml
  name: Capacity
  fullName: System.IO.UnmanagedMemoryStream.Capacity
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 353
  summary: Number of bytes that can be written to the stream.
  syntax:
    content:
      CSharp: public long Capacity { get; }
    parameters:
    - id: Capacity
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Capacity
- uid: System.IO.UnmanagedMemoryStream.Position
  href: System.IO.UnmanagedMemoryStream.yml
  name: Position
  fullName: System.IO.UnmanagedMemoryStream.Position
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 365
  summary: ReadByte will read byte at the Position in the stream
  syntax:
    content:
      CSharp: public override long Position { get; [System.Security.SecuritySafeCritical] // auto-generated set; }
    parameters:
    - id: Position
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Position
- uid: System.IO.UnmanagedMemoryStream.PositionPointer
  href: System.IO.UnmanagedMemoryStream.yml
  name: PositionPointer
  fullName: System.IO.UnmanagedMemoryStream.PositionPointer
  type: Property
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 396
  summary: Pointer to memory at the current Position in the stream.
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public unsafe byte *PositionPointer { [System.Security.SecurityCritical] // auto-generated_required get; [System.Security.SecurityCritical] // auto-generated_required set; }'
    parameters:
    - id: PositionPointer
      type:
        name: byte*
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.PositionPointer
- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Read(byte[], int, int)
  fullName: System.IO.UnmanagedMemoryStream.Read(byte[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 430
  summary: Reads bytes from stream and puts them into the buffer
  syntax:
    content:
      CSharp: public override int Read(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type:
        id: System.Array
        name: byte[]
        isExternal: true
      description: Buffer to read the bytes to.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Starting index in the buffer.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Maximum number of bytes to read.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Number of bytes actually read.
  id: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  href: System.IO.UnmanagedMemoryStream.yml
  name: ReadAsync(byte[], int, int, CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.ReadAsync(byte[], int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 500
  summary: Reads bytes from stream and puts them into the buffer
  syntax:
    content:
      CSharp: public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    parameters:
    - id: buffer
      type:
        id: System.Array
        name: byte[]
        isExternal: true
      description: Buffer to read the bytes to.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Starting index in the buffer.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Maximum number of bytes to read.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: Token that can be used to cancell this operation.
    return:
      id: Task
      type:
        id: System.Threading.Tasks.Task{System.Int32}
        name: Task<int>
        isExternal: true
      description: Task that can be used to access the number of bytes actually read.
  id: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.ReadByte
  href: System.IO.UnmanagedMemoryStream.yml
  name: ReadByte()
  fullName: System.IO.UnmanagedMemoryStream.ReadByte()
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 532
  summary: Returns the byte at the stream current Position and advances the Position.
  syntax:
    content:
      CSharp: public override int ReadByte()
    parameters: []
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.ReadByte
- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Seek(long, SeekOrigin)
  fullName: System.IO.UnmanagedMemoryStream.Seek(long, System.IO.SeekOrigin)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 580
  summary: Advanced the Position to specifice location in the stream.
  syntax:
    content:
      CSharp: public override long Seek(long offset, SeekOrigin loc)
    parameters:
    - id: offset
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: Offset from the loc parameter.
    - id: loc
      type:
        id: System.IO.SeekOrigin
        name: SeekOrigin
        isExternal: true
      description: Origin for the offset parameter.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  href: System.IO.UnmanagedMemoryStream.yml
  name: SetLength(long)
  fullName: System.IO.UnmanagedMemoryStream.SetLength(long)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 618
  summary: Sets the Length of the stream.
  syntax:
    content:
      CSharp: public override void SetLength(long value)
    parameters:
    - id: value
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  href: System.IO.UnmanagedMemoryStream.yml
  name: Write(byte[], int, int)
  fullName: System.IO.UnmanagedMemoryStream.Write(byte[], int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 654
  summary: Writes buffer into the stream
  syntax:
    content:
      CSharp: public override void Write(byte[] buffer, int offset, int count)
    parameters:
    - id: buffer
      type:
        id: System.Array
        name: byte[]
        isExternal: true
      description: Buffer that will be written.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Starting index in the buffer.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Number of bytes to write.
  id: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  href: System.IO.UnmanagedMemoryStream.yml
  name: WriteAsync(byte[], int, int, CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.WriteAsync(byte[], int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 745
  summary: Writes buffer into the stream. The operation completes synchronously.
  syntax:
    content:
      CSharp: public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    parameters:
    - id: buffer
      type:
        id: System.Array
        name: byte[]
        isExternal: true
      description: Buffer that will be written.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Starting index in the buffer.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Number of bytes to write.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: Token that can be used to cancell the operation.
    return:
      id: Task
      type:
        id: System.Threading.Tasks.Task
        name: Task
        isExternal: true
      description: Task that can be awaited
  id: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  href: System.IO.UnmanagedMemoryStream.yml
  name: WriteByte(byte)
  fullName: System.IO.UnmanagedMemoryStream.WriteByte(byte)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.UnmanagedMemoryStream/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 776
  summary: Writes a byte to the stream and advances the current Position.
  syntax:
    content:
      CSharp: public override void WriteByte(byte value)
    parameters:
    - id: value
      type:
        id: System.Byte
        name: byte
        isExternal: true
  id: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
