items:
- uid: System.Linq.Expressions.BinaryExpression
  href: System.Linq.Expressions.BinaryExpression.yml
  name: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 14
  summary: Represents an expression that has a binary operator.
  syntax:
    content:
      CSharp: 'public class BinaryExpression : Expression'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.Linq.Expressions.Expression
    name: Expression
    href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.BinaryExpression
  children:
  - System.Linq.Expressions.BinaryExpression.CanReduce
  - System.Linq.Expressions.BinaryExpression.Right
  - System.Linq.Expressions.BinaryExpression.Left
  - System.Linq.Expressions.BinaryExpression.Method
  - System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.BinaryExpression.Reduce
  - System.Linq.Expressions.BinaryExpression.Conversion
  - System.Linq.Expressions.BinaryExpression.IsLifted
  - System.Linq.Expressions.BinaryExpression.IsLiftedToNull
  - System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
- uid: System.Linq.Expressions.BinaryExpression.CanReduce
  href: System.Linq.Expressions.BinaryExpression.yml
  name: CanReduce
  fullName: System.Linq.Expressions.BinaryExpression.CanReduce
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 29
  summary: Gets a value that indicates whether the expression tree node can be reduced.
  syntax:
    content:
      CSharp: public override bool CanReduce { get; }
    parameters:
    - id: CanReduce
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Expressions.BinaryExpression.CanReduce
- uid: System.Linq.Expressions.BinaryExpression.Right
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Right
  fullName: System.Linq.Expressions.BinaryExpression.Right
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 64
  summary: Gets the right operand of the binary operation.
  syntax:
    content:
      CSharp: public Expression Right { get; }
    parameters:
    - id: Right
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.BinaryExpression.Right
- uid: System.Linq.Expressions.BinaryExpression.Left
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Left
  fullName: System.Linq.Expressions.BinaryExpression.Left
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 72
  summary: Gets the left operand of the binary operation.
  syntax:
    content:
      CSharp: public Expression Left { get; }
    parameters:
    - id: Left
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.BinaryExpression.Left
- uid: System.Linq.Expressions.BinaryExpression.Method
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Method
  fullName: System.Linq.Expressions.BinaryExpression.Method
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 80
  summary: Gets the implementing method for the binary operation.
  syntax:
    content:
      CSharp: public MethodInfo Method { get; }
    parameters:
    - id: Method
      type:
        id: System.Reflection.MethodInfo
        name: MethodInfo
        isExternal: true
  id: System.Linq.Expressions.BinaryExpression.Method
- uid: System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Update(Expression, LambdaExpression, Expression)
  fullName: System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 104
  summary: >-
    Creates a new expression that is like this one, but using the

    supplied children. If all of the children are the same, it will

    return this expression.
  syntax:
    content:
      CSharp: public BinaryExpression Update(Expression left, LambdaExpression conversion, Expression right)
    parameters:
    - id: left
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
      description: The [System.Linq.Expressions.BinaryExpression.Left](System.Linq.Expressions.BinaryExpression.yml) property of the result.
    - id: conversion
      type:
        id: System.Linq.Expressions.LambdaExpression
        name: LambdaExpression
        href: System.Linq.Expressions.LambdaExpression.yml
      description: The [System.Linq.Expressions.BinaryExpression.Conversion](System.Linq.Expressions.BinaryExpression.yml) property of the result.
    - id: right
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
      description: The [System.Linq.Expressions.BinaryExpression.Right](System.Linq.Expressions.BinaryExpression.yml) property of the result.
    return:
      id: BinaryExpression
      type:
        id: System.Linq.Expressions.BinaryExpression
        name: BinaryExpression
        href: System.Linq.Expressions.BinaryExpression.yml
      description: This expression if no children changed, or an expression with the updated children.
  id: System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
- uid: System.Linq.Expressions.BinaryExpression.Reduce
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Reduce()
  fullName: System.Linq.Expressions.BinaryExpression.Reduce()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 131
  summary: >-
    Reduces the binary expression node to a simpler expression.

    If CanReduce returns true, this should return a valid expression.

    This method is allowed to return another node which itself

    must be reduced.
  syntax:
    content:
      CSharp: public override Expression Reduce()
    parameters: []
    return:
      id: Expression
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
      description: The reduced expression.
  id: System.Linq.Expressions.BinaryExpression.Reduce
- uid: System.Linq.Expressions.BinaryExpression.Conversion
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Conversion
  fullName: System.Linq.Expressions.BinaryExpression.Conversion
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 306
  summary: Gets the type conversion function that is used by a coalescing or compound assignment operation.
  syntax:
    content:
      CSharp: public LambdaExpression Conversion { get; }
    parameters:
    - id: Conversion
      type:
        id: System.Linq.Expressions.LambdaExpression
        name: LambdaExpression
        href: System.Linq.Expressions.LambdaExpression.yml
  id: System.Linq.Expressions.BinaryExpression.Conversion
- uid: System.Linq.Expressions.BinaryExpression.IsLifted
  href: System.Linq.Expressions.BinaryExpression.yml
  name: IsLifted
  fullName: System.Linq.Expressions.BinaryExpression.IsLifted
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 319
  summary: Gets a value that indicates whether the expression tree node represents a lifted call to an operator.
  syntax:
    content:
      CSharp: public bool IsLifted { get; }
    parameters:
    - id: IsLifted
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Expressions.BinaryExpression.IsLifted
- uid: System.Linq.Expressions.BinaryExpression.IsLiftedToNull
  href: System.Linq.Expressions.BinaryExpression.yml
  name: IsLiftedToNull
  fullName: System.Linq.Expressions.BinaryExpression.IsLiftedToNull
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 339
  summary: Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.
  syntax:
    content:
      CSharp: public bool IsLiftedToNull { get; }
    parameters:
    - id: IsLiftedToNull
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Expressions.BinaryExpression.IsLiftedToNull
- uid: System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  href: System.Linq.Expressions.BinaryExpression.yml
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 350
  summary: Dispatches to the specific visit method for this node type.
  syntax:
    content:
      CSharp: protected internal override Expression Accept(ExpressionVisitor visitor)
    parameters:
    - id: visitor
      type:
        id: System.Linq.Expressions.ExpressionVisitor
        name: ExpressionVisitor
        href: System.Linq.Expressions.ExpressionVisitor.yml
    return:
      id: Expression
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
