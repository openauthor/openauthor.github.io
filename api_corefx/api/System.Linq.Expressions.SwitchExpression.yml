items:
- uid: System.Linq.Expressions.SwitchExpression
  href: System.Linq.Expressions.SwitchExpression.yml
  name: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 15
  summary: Represents a control expression that handles multiple selections by passing control to a [System.Linq.Expressions.SwitchCase](System.Linq.Expressions.SwitchCase.yml).
  syntax:
    content:
      CSharp: 'public sealed class SwitchExpression : Expression'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.Linq.Expressions.Expression
    name: Expression
    href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.SwitchExpression
  children:
  - System.Linq.Expressions.SwitchExpression.Type
  - System.Linq.Expressions.SwitchExpression.NodeType
  - System.Linq.Expressions.SwitchExpression.SwitchValue
  - System.Linq.Expressions.SwitchExpression.Cases
  - System.Linq.Expressions.SwitchExpression.DefaultBody
  - System.Linq.Expressions.SwitchExpression.Comparison
  - System.Linq.Expressions.SwitchExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)
- uid: System.Linq.Expressions.SwitchExpression.Type
  href: System.Linq.Expressions.SwitchExpression.yml
  name: Type
  fullName: System.Linq.Expressions.SwitchExpression.Type
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 37
  summary: Gets the static type of the expression that this [System.Linq.Expressions.Expression](System.Linq.Expressions.Expression.yml) represents.
  syntax:
    content:
      CSharp: public sealed override Type Type { get; }
    parameters:
    - id: Type
      type:
        id: System.Type
        name: Type
        isExternal: true
  id: System.Linq.Expressions.SwitchExpression.Type
- uid: System.Linq.Expressions.SwitchExpression.NodeType
  href: System.Linq.Expressions.SwitchExpression.yml
  name: NodeType
  fullName: System.Linq.Expressions.SwitchExpression.NodeType
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 47
  summary: >-
    Returns the node type of this Expression. Extension nodes should return

    ExpressionType.Extension when overriding this method.
  syntax:
    content:
      CSharp: public sealed override ExpressionType NodeType { get; }
    parameters:
    - id: NodeType
      type:
        id: System.Linq.Expressions.ExpressionType
        name: ExpressionType
        href: System.Linq.Expressions.ExpressionType.yml
  id: System.Linq.Expressions.SwitchExpression.NodeType
- uid: System.Linq.Expressions.SwitchExpression.SwitchValue
  href: System.Linq.Expressions.SwitchExpression.yml
  name: SwitchValue
  fullName: System.Linq.Expressions.SwitchExpression.SwitchValue
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 55
  summary: Gets the test for the switch.
  syntax:
    content:
      CSharp: public Expression SwitchValue { get; }
    parameters:
    - id: SwitchValue
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.SwitchExpression.SwitchValue
- uid: System.Linq.Expressions.SwitchExpression.Cases
  href: System.Linq.Expressions.SwitchExpression.yml
  name: Cases
  fullName: System.Linq.Expressions.SwitchExpression.Cases
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 63
  summary: Gets the collection of [System.Linq.Expressions.SwitchCase](System.Linq.Expressions.SwitchCase.yml) objects for the switch.
  syntax:
    content:
      CSharp: public ReadOnlyCollection<SwitchCase> Cases { get; }
    parameters:
    - id: Cases
      type:
        id: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.SwitchCase}
        name: ReadOnlyCollection<SwitchCase>
        isExternal: true
  id: System.Linq.Expressions.SwitchExpression.Cases
- uid: System.Linq.Expressions.SwitchExpression.DefaultBody
  href: System.Linq.Expressions.SwitchExpression.yml
  name: DefaultBody
  fullName: System.Linq.Expressions.SwitchExpression.DefaultBody
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 71
  summary: Gets the test for the switch.
  syntax:
    content:
      CSharp: public Expression DefaultBody { get; }
    parameters:
    - id: DefaultBody
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.SwitchExpression.DefaultBody
- uid: System.Linq.Expressions.SwitchExpression.Comparison
  href: System.Linq.Expressions.SwitchExpression.yml
  name: Comparison
  fullName: System.Linq.Expressions.SwitchExpression.Comparison
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 79
  summary: Gets the equality comparison method, if any.
  syntax:
    content:
      CSharp: public MethodInfo Comparison { get; }
    parameters:
    - id: Comparison
      type:
        id: System.Reflection.MethodInfo
        name: MethodInfo
        isExternal: true
  id: System.Linq.Expressions.SwitchExpression.Comparison
- uid: System.Linq.Expressions.SwitchExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  href: System.Linq.Expressions.SwitchExpression.yml
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.SwitchExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 87
  summary: Dispatches to the specific visit method for this node type.
  syntax:
    content:
      CSharp: protected internal override Expression Accept(ExpressionVisitor visitor)
    parameters:
    - id: visitor
      type:
        id: System.Linq.Expressions.ExpressionVisitor
        name: ExpressionVisitor
        href: System.Linq.Expressions.ExpressionVisitor.yml
    return:
      id: Expression
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
  id: System.Linq.Expressions.SwitchExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
- uid: System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)
  href: System.Linq.Expressions.SwitchExpression.yml
  name: Update(Expression, IEnumerable<SwitchCase>, Expression)
  fullName: System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 114
  summary: >-
    Creates a new expression that is like this one, but using the

    supplied children. If all of the children are the same, it will

    return this expression.
  syntax:
    content:
      CSharp: public SwitchExpression Update(Expression switchValue, IEnumerable<SwitchCase> cases, Expression defaultBody)
    parameters:
    - id: switchValue
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
      description: The [System.Linq.Expressions.SwitchExpression.SwitchValue](System.Linq.Expressions.SwitchExpression.yml) property of the result.
    - id: cases
      type:
        id: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
        name: IEnumerable<SwitchCase>
        isExternal: true
      description: The [System.Linq.Expressions.SwitchExpression.Cases](System.Linq.Expressions.SwitchExpression.yml) property of the result.
    - id: defaultBody
      type:
        id: System.Linq.Expressions.Expression
        name: Expression
        href: System.Linq.Expressions.Expression.yml
      description: The [System.Linq.Expressions.SwitchExpression.DefaultBody](System.Linq.Expressions.SwitchExpression.yml) property of the result.
    return:
      id: SwitchExpression
      type:
        id: System.Linq.Expressions.SwitchExpression
        name: SwitchExpression
        href: System.Linq.Expressions.SwitchExpression.yml
      description: This expression if no children changed, or an expression with the updated children.
  id: System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)
