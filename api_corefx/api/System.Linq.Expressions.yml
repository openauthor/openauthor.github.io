items:
- uid: System.Linq.Expressions
  href: System.Linq.Expressions.yml
  name: Expressions
  fullName: System.Linq.Expressions
  type: Namespace
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs
    startLine: 9
  id: System.Linq.Expressions
  children:
  - System.Linq.Expressions.DynamicExpression
  - System.Linq.Expressions.DynamicExpressionVisitor
  - System.Linq.Expressions.BinaryExpression
  - System.Linq.Expressions.Expression
  - System.Linq.Expressions.BlockExpression
  - System.Linq.Expressions.CatchBlock
  - System.Linq.Expressions.ConditionalExpression
  - System.Linq.Expressions.ConstantExpression
  - System.Linq.Expressions.DebugInfoExpression
  - System.Linq.Expressions.DefaultExpression
  - System.Linq.Expressions.ElementInit
  - System.Linq.Expressions.ExpressionType
  - System.Linq.Expressions.ExpressionVisitor
  - System.Linq.Expressions.GotoExpressionKind
  - System.Linq.Expressions.GotoExpression
  - System.Linq.Expressions.IArgumentProvider
  - System.Linq.Expressions.IDynamicExpression
  - System.Linq.Expressions.IndexExpression
  - System.Linq.Expressions.InvocationExpression
  - System.Linq.Expressions.LabelExpression
  - System.Linq.Expressions.LabelTarget
  - System.Linq.Expressions.LambdaExpression
  - System.Linq.Expressions.Expression`1
  - System.Linq.Expressions.ListInitExpression
  - System.Linq.Expressions.LoopExpression
  - System.Linq.Expressions.MemberAssignment
  - System.Linq.Expressions.MemberBindingType
  - System.Linq.Expressions.MemberBinding
  - System.Linq.Expressions.MemberExpression
  - System.Linq.Expressions.MemberInitExpression
  - System.Linq.Expressions.MemberListBinding
  - System.Linq.Expressions.MemberMemberBinding
  - System.Linq.Expressions.MethodCallExpression
  - System.Linq.Expressions.NewArrayExpression
  - System.Linq.Expressions.NewExpression
  - System.Linq.Expressions.ParameterExpression
  - System.Linq.Expressions.RuntimeVariablesExpression
  - System.Linq.Expressions.SwitchCase
  - System.Linq.Expressions.SwitchExpression
  - System.Linq.Expressions.SymbolDocumentInfo
  - System.Linq.Expressions.TryExpression
  - System.Linq.Expressions.TypeBinaryExpression
  - System.Linq.Expressions.UnaryExpression
references:
- uid: System.Linq.Expressions.DynamicExpression
  href: System.Linq.Expressions.DynamicExpression.yml
  name: DynamicExpression
  type: Class
  summary: Represents a dynamic operation.
- uid: System.Linq.Expressions.DynamicExpressionVisitor
  href: System.Linq.Expressions.DynamicExpressionVisitor.yml
  name: DynamicExpressionVisitor
  type: Class
- uid: System.Linq.Expressions.BinaryExpression
  href: System.Linq.Expressions.BinaryExpression.yml
  name: BinaryExpression
  type: Class
  summary: Represents an expression that has a binary operator.
- uid: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Expression
  type: Class
  summary: The base type for all nodes in Expression Trees.
- uid: System.Linq.Expressions.BlockExpression
  href: System.Linq.Expressions.BlockExpression.yml
  name: BlockExpression
  type: Class
  summary: Represents a block that contains a sequence of expressions where variables can be defined.
- uid: System.Linq.Expressions.CatchBlock
  href: System.Linq.Expressions.CatchBlock.yml
  name: CatchBlock
  type: Class
  summary: >-
    Represents a catch statement in a try block.

    This must have the same return type (i.e., the type of [CatchBlock.Body]()) as the try block it is associated with.
- uid: System.Linq.Expressions.ConditionalExpression
  href: System.Linq.Expressions.ConditionalExpression.yml
  name: ConditionalExpression
  type: Class
  summary: Represents an expression that has a conditional operator.
- uid: System.Linq.Expressions.ConstantExpression
  href: System.Linq.Expressions.ConstantExpression.yml
  name: ConstantExpression
  type: Class
  summary: Represents an expression that has a constant value.
- uid: System.Linq.Expressions.DebugInfoExpression
  href: System.Linq.Expressions.DebugInfoExpression.yml
  name: DebugInfoExpression
  type: Class
  summary: >-
    Emits or clears a sequence point for debug information.



    This allows the debugger to highlight the correct source code when

    debugging.
- uid: System.Linq.Expressions.DefaultExpression
  href: System.Linq.Expressions.DefaultExpression.yml
  name: DefaultExpression
  type: Class
  summary: Represents the default value of a type or an empty expression.
- uid: System.Linq.Expressions.ElementInit
  href: System.Linq.Expressions.ElementInit.yml
  name: ElementInit
  type: Class
  summary: Represents the initialization of a list.
- uid: System.Linq.Expressions.ExpressionType
  href: System.Linq.Expressions.ExpressionType.yml
  name: ExpressionType
  type: Enum
  summary: Describes the node types for the nodes of an expression tree.
- uid: System.Linq.Expressions.ExpressionVisitor
  href: System.Linq.Expressions.ExpressionVisitor.yml
  name: ExpressionVisitor
  type: Class
  summary: Represents a visitor or rewriter for expression trees.
- uid: System.Linq.Expressions.GotoExpressionKind
  href: System.Linq.Expressions.GotoExpressionKind.yml
  name: GotoExpressionKind
  type: Enum
  summary: Specifies what kind of jump this [System.Linq.Expressions.GotoExpression](System.Linq.Expressions.GotoExpression.yml) represents.
- uid: System.Linq.Expressions.GotoExpression
  href: System.Linq.Expressions.GotoExpression.yml
  name: GotoExpression
  type: Class
  summary: Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.
- uid: System.Linq.Expressions.IArgumentProvider
  href: System.Linq.Expressions.IArgumentProvider.yml
  name: IArgumentProvider
  type: Interface
  summary: >-
    Provides an internal interface for accessing the arguments that multiple tree

    nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression,

    and InexExpression).



    This enables two optimizations which reduce the size of the trees.  The first is it enables

    the nodes to hold onto an IList of T instead of a ReadOnlyCollection.  This saves the cost

    of allocating the ReadOnlyCollection for each node.  The second is that it enables specialized

    subclasses to be created which hold onto a specific number of arguments.  For example Block2,

    Block3, Block4.  These nodes can therefore avoid allocating both a ReadOnlyCollection and an

    array for storing their elements saving 32 bytes per node.



    Meanwhile the nodes can continue to expose the original LINQ properties of ReadOnlyCollections.  They

    do this by re-using 1 field for storing both the array or an element that would normally be stored

    in the array.



    For the array case the collection is typed to IList of T instead of ReadOnlyCollection of T.

    When the node is initially constructed it is an array.  When the compiler accesses the members it

    uses this interface.  If a user accesses the members the array is promoted to a ReadOnlyCollection.



    For the object case we store the 1st argument in a field typed to object and when the node is initially

    constructed this holds directly onto the Expression.  When the compiler accesses the members

    it again uses this interface and the accessor for the 1st argument uses Expression.ReturnObject to

    return the object which handles the Expression or ReadOnlyCollection case.  When the user accesses

    the ReadOnlyCollection then the object field is updated to hold directly onto the ReadOnlyCollection.



    It is important that the Expressions consistently return the same ReadOnlyCollection otherwise the

    re-writer will be broken and it would be a breaking change from LINQ v1.  The problem is that currently

    users can rely on object identity to tell if the node has changed.  Storing the readonly collection in

    an overloaded field enables us to both reduce memory usage as well as maintain compatibility and an

    easy to use external API.
- uid: System.Linq.Expressions.IDynamicExpression
  href: System.Linq.Expressions.IDynamicExpression.yml
  name: IDynamicExpression
  type: Interface
- uid: System.Linq.Expressions.IndexExpression
  href: System.Linq.Expressions.IndexExpression.yml
  name: IndexExpression
  type: Class
  summary: Represents indexing a property or array.
- uid: System.Linq.Expressions.InvocationExpression
  href: System.Linq.Expressions.InvocationExpression.yml
  name: InvocationExpression
  type: Class
  summary: Represents an expression that applies a delegate or lambda expression to a list of argument expressions.
- uid: System.Linq.Expressions.LabelExpression
  href: System.Linq.Expressions.LabelExpression.yml
  name: LabelExpression
  type: Class
  summary: >-
    Represents a label, which can be placed in any [System.Linq.Expressions.Expression](System.Linq.Expressions.Expression.yml) context. If

    it is jumped to, it will get the value provided by the corresponding

    [System.Linq.Expressions.GotoExpression](System.Linq.Expressions.GotoExpression.yml). Otherwise, it gets the value in [System.Linq.Expressions.LabelExpression.DefaultValue](System.Linq.Expressions.LabelExpression.yml). If the

    [System.Linq.Expressions.LabelExpression.Type](System.Linq.Expressions.LabelExpression.yml) equals System.Void, no value should be provided.
- uid: System.Linq.Expressions.LabelTarget
  href: System.Linq.Expressions.LabelTarget.yml
  name: LabelTarget
  type: Class
  summary: Used to denote the target of a [System.Linq.Expressions.GotoExpression](System.Linq.Expressions.GotoExpression.yml).
- uid: System.Linq.Expressions.LambdaExpression
  href: System.Linq.Expressions.LambdaExpression.yml
  name: LambdaExpression
  type: Class
  summary: >-
    Creates a [System.Linq.Expressions.LambdaExpression](System.Linq.Expressions.LambdaExpression.yml) node.

    This captures a block of code that is similar to a .NET method body.
- uid: System.Linq.Expressions.Expression`1
  href: System.Linq.Expressions.Expression`1.yml
  name: Expression<TDelegate>
  type: Class
  summary: >-
    Defines a [System.Linq.Expressions.Expression`1](System.Linq.Expressions.Expression`1.yml) node.

    This captures a block of code that is similar to a .NET method body.
- uid: System.Linq.Expressions.ListInitExpression
  href: System.Linq.Expressions.ListInitExpression.yml
  name: ListInitExpression
  type: Class
  summary: Represents a constructor call that has a collection initializer.
- uid: System.Linq.Expressions.LoopExpression
  href: System.Linq.Expressions.LoopExpression.yml
  name: LoopExpression
  type: Class
  summary: Represents an infinite loop. It can be exited with "break".
- uid: System.Linq.Expressions.MemberAssignment
  href: System.Linq.Expressions.MemberAssignment.yml
  name: MemberAssignment
  type: Class
  summary: Represents assignment to a member of an object.
- uid: System.Linq.Expressions.MemberBindingType
  href: System.Linq.Expressions.MemberBindingType.yml
  name: MemberBindingType
  type: Enum
  summary: Describes the binding types that are used in MemberInitExpression objects.
- uid: System.Linq.Expressions.MemberBinding
  href: System.Linq.Expressions.MemberBinding.yml
  name: MemberBinding
  type: Class
  summary: Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.
- uid: System.Linq.Expressions.MemberExpression
  href: System.Linq.Expressions.MemberExpression.yml
  name: MemberExpression
  type: Class
  summary: Represents accessing a field or property.
- uid: System.Linq.Expressions.MemberInitExpression
  href: System.Linq.Expressions.MemberInitExpression.yml
  name: MemberInitExpression
  type: Class
  summary: Represents calling a constructor and initializing one or more members of the new object.
- uid: System.Linq.Expressions.MemberListBinding
  href: System.Linq.Expressions.MemberListBinding.yml
  name: MemberListBinding
  type: Class
  summary: Represents initializing the elements of a collection member of a newly created object.
- uid: System.Linq.Expressions.MemberMemberBinding
  href: System.Linq.Expressions.MemberMemberBinding.yml
  name: MemberMemberBinding
  type: Class
  summary: Represents initializing members of a member of a newly created object.
- uid: System.Linq.Expressions.MethodCallExpression
  href: System.Linq.Expressions.MethodCallExpression.yml
  name: MethodCallExpression
  type: Class
  summary: Represents a call to either static or an instance method.
- uid: System.Linq.Expressions.NewArrayExpression
  href: System.Linq.Expressions.NewArrayExpression.yml
  name: NewArrayExpression
  type: Class
  summary: Represents creating a new array and possibly initializing the elements of the new array.
- uid: System.Linq.Expressions.NewExpression
  href: System.Linq.Expressions.NewExpression.yml
  name: NewExpression
  type: Class
  summary: Represents a constructor call.
- uid: System.Linq.Expressions.ParameterExpression
  href: System.Linq.Expressions.ParameterExpression.yml
  name: ParameterExpression
  type: Class
  summary: Represents a named parameter expression.
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  href: System.Linq.Expressions.RuntimeVariablesExpression.yml
  name: RuntimeVariablesExpression
  type: Class
  summary: >-
    An expression that provides runtime read/write access to variables.

    Needed to implement "eval" in some dynamic languages.

    Evaluates to an instance of [System.Collections.Generic.IList`1]() when executed.
- uid: System.Linq.Expressions.SwitchCase
  href: System.Linq.Expressions.SwitchCase.yml
  name: SwitchCase
  type: Class
  summary: Represents one case of a [System.Linq.Expressions.SwitchExpression](System.Linq.Expressions.SwitchExpression.yml).
- uid: System.Linq.Expressions.SwitchExpression
  href: System.Linq.Expressions.SwitchExpression.yml
  name: SwitchExpression
  type: Class
  summary: Represents a control expression that handles multiple selections by passing control to a [System.Linq.Expressions.SwitchCase](System.Linq.Expressions.SwitchCase.yml).
- uid: System.Linq.Expressions.SymbolDocumentInfo
  href: System.Linq.Expressions.SymbolDocumentInfo.yml
  name: SymbolDocumentInfo
  type: Class
  summary: >-
    Stores information needed to emit debugging symbol information for a

    source file, in particular the file name and unique language identifier.
- uid: System.Linq.Expressions.TryExpression
  href: System.Linq.Expressions.TryExpression.yml
  name: TryExpression
  type: Class
  summary: >-
    Represents a try/catch/finally/fault block.



    The body is protected by the try block.

    The handlers consist of a set of [System.Linq.Expressions.CatchBlock](System.Linq.Expressions.CatchBlock.yml)s that can either be catch or filters.

    The fault runs if an exception is thrown.

    The finally runs regardless of how control exits the body.

    Only one of fault or finally can be supplied.

    The return type of the try block must match the return type of any associated catch statements.
- uid: System.Linq.Expressions.TypeBinaryExpression
  href: System.Linq.Expressions.TypeBinaryExpression.yml
  name: TypeBinaryExpression
  type: Class
  summary: Represents an operation between an expression and a type.
- uid: System.Linq.Expressions.UnaryExpression
  href: System.Linq.Expressions.UnaryExpression.yml
  name: UnaryExpression
  type: Class
  summary: Represents an expression that has a unary operator.
