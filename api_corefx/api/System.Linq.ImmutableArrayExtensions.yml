items:
- uid: System.Linq.ImmutableArrayExtensions
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ImmutableArrayExtensions
  fullName: System.Linq.ImmutableArrayExtensions
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 17
  summary: LINQ extension method overrides that offer greater efficiency for [System.Collections.Immutable.ImmutableArray`1](System.Collections.Immutable.ImmutableArray`1.yml) than the standard LINQ methods
  syntax:
    content:
      CSharp: public class ImmutableArrayExtensions
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Linq.ImmutableArrayExtensions
  children:
  - System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
- uid: System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Select<T, TResult>(ImmutableArray<T>, Func<T, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.Select<T, TResult>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 28
  summary: Projects each element of a sequence into a new form.
  syntax:
    content:
      CSharp: public static IEnumerable<TResult> Select<T, TResult>(ImmutableArray<T> immutableArray, Func<T, TResult> selector)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: The immutable array.
    - id: selector
      type:
        id: System.Func{``0,``1}
        name: Func<T, TResult>
        isExternal: true
      description: The selector.
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TResult>
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
- uid: System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.SelectMany<TSource, TCollection, TResult>(System.Collections.Immutable.ImmutableArray<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 56
  summary: >-
    Projects each element of a sequence to an [System.Collections.Generic.IEnumerable`1](),

    flattens the resulting sequences into one sequence, and invokes a result

    selector function on each element therein.
  syntax:
    content:
      CSharp: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(ImmutableArray<TSource> immutableArray, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TSource>
        href: System.Collections.Immutable.ImmutableArray{``0}
      description: The immutable array.
    - id: collectionSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
        name: Func<TSource, IEnumerable<TCollection>>
        isExternal: true
      description: A transform function to apply to each element of the input sequence.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``2}
        name: Func<TSource, TCollection, TResult>
        isExternal: true
      description: A transform function to apply to each element of the intermediate sequence.
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``2}
        name: IEnumerable<TResult>
        isExternal: true
      description: >-
        An [System.Collections.Generic.IEnumerable`1]() whose elements are the result

        of invoking the one-to-many transform function  on each

        element of  and then mapping each of those sequence elements and their

        corresponding source element to a result element.
  id: System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Where<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Where<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 88
  summary: Filters a sequence of values based on a predicate.
  syntax:
    content:
      CSharp: public static IEnumerable<T> Where<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<T>
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 104
  summary: Gets a value indicating whether any elements are in this collection.
  syntax:
    content:
      CSharp: public static bool Any<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 117
  summary: >-
    Gets a value indicating whether any elements are in this collection

    that match a given condition.
  syntax:
    content:
      CSharp: public static bool Any<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
      description: The predicate.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: All<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.All<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 144
  summary: >-
    Gets a value indicating whether all elements in this collection

    match a given condition.
  syntax:
    content:
      CSharp: public static bool All<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
      description: The predicate.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
  id: System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 166
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content:
      CSharp: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, IEqualityComparer<TBase> comparer = null)where TDerived : TBase'
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<TBase>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TDerived>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TBase>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Generic.IEnumerable<TDerived>, System.Collections.Generic.IEqualityComparer<TBase>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 202
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content:
      CSharp: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, IEnumerable<TDerived> items, IEqualityComparer<TBase> comparer = null)where TDerived : TBase'
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<TBase>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: items
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TDerived>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TBase>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SequenceEqual<TDerived, TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase, TBase, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.SequenceEqual<TDerived, TBase>(System.Collections.Immutable.ImmutableArray<TBase>, System.Collections.Immutable.ImmutableArray<TDerived>, System.Func<TBase, TBase, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 237
  summary: Determines whether two sequences are equal according to an equality comparer.
  syntax:
    content:
      CSharp: 'public static bool SequenceEqual<TDerived, TBase>(ImmutableArray<TBase> immutableArray, ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate)where TDerived : TBase'
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<TBase>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: items
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<TDerived>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``1,``1,System.Boolean}
        name: Func<TBase, TBase, bool>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<T>(ImmutableArray<T>, Func<T, T, T>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, T, T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 269
  summary: Applies an accumulator function over a sequence.
  syntax:
    content:
      CSharp: public static T Aggregate<T>(ImmutableArray<T> immutableArray, Func<T, T, T> func)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: func
      type:
        id: System.Func{``0,``0,``0}
        name: Func<T, T, T>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<TAccumulate, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 293
  summary: Applies an accumulator function over a sequence.
  syntax:
    content:
      CSharp: public static TAccumulate Aggregate<TAccumulate, T>(ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
    - id: func
      type:
        id: System.Func{``0,``1,``0}
        name: Func<TAccumulate, T, TAccumulate>
        isExternal: true
    return:
      id: TAccumulate
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
  id: System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Aggregate<TAccumulate, TResult, T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ImmutableArrayExtensions.Aggregate<TAccumulate, TResult, T>(System.Collections.Immutable.ImmutableArray<T>, TAccumulate, System.Func<TAccumulate, T, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 313
  summary: Applies an accumulator function over a sequence.
  syntax:
    content:
      CSharp: public static TResult Aggregate<TAccumulate, TResult, T>(ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``2}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``2}
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
    - id: func
      type:
        id: System.Func{``0,``2,``0}
        name: Func<TAccumulate, T, TAccumulate>
        isExternal: true
    - id: resultSelector
      type:
        id: System.Func{``0,``1}
        name: Func<TAccumulate, TResult>
        isExternal: true
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
  id: System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
- uid: System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ElementAt<T>(ImmutableArray<T>, int)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAt<T>(System.Collections.Immutable.ImmutableArray<T>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 325
  summary: Returns the element at a specified index in a sequence.
  syntax:
    content:
      CSharp: public static T ElementAt<T>(ImmutableArray<T> immutableArray, int index)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
- uid: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ElementAtOrDefault<T>(ImmutableArray<T>, int)
  fullName: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 335
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  syntax:
    content:
      CSharp: public static T ElementAtOrDefault<T>(ImmutableArray<T> immutableArray, int index)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 350
  summary: Returns the first element in a sequence that satisfies a specified condition.
  syntax:
    content:
      CSharp: public static T First<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 372
  summary: Returns the first element in a sequence that satisfies a specified condition.
  syntax:
    content:
      CSharp: public static T First<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 387
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content:
      CSharp: public static T FirstOrDefault<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 397
  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content:
      CSharp: public static T FirstOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 418
  summary: Returns the last element of a sequence.
  syntax:
    content:
      CSharp: public static T Last<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 432
  summary: Returns the last element of a sequence that satisfies a specified condition.
  syntax:
    content:
      CSharp: public static T Last<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 454
  summary: Returns the last element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content:
      CSharp: public static T LastOrDefault<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 465
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content:
      CSharp: public static T LastOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Single<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 486
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  syntax:
    content:
      CSharp: public static T Single<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Single<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.Single<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 497
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  syntax:
    content:
      CSharp: public static T Single<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SingleOrDefault<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 531
  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content:
      CSharp: public static T SingleOrDefault<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: SingleOrDefault<T>(ImmutableArray<T>, Func<T, bool>)
  fullName: System.Linq.ImmutableArrayExtensions.SingleOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 542
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  syntax:
    content:
      CSharp: public static T SingleOrDefault<T>(ImmutableArray<T> immutableArray, Func<T, bool> predicate)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<T, bool>
        isExternal: true
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 574
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, T> ToDictionary<TKey, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: keySelector
      type:
        id: System.Func{``1,``0}
        name: Func<T, TKey>
        isExternal: true
      description: The key selector.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``0,``1}
        name: Dictionary<TKey, T>
        isExternal: true
      description: The newly initialized dictionary.
  id: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 590
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``2}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``2}
    - id: keySelector
      type:
        id: System.Func{``2,``0}
        name: Func<T, TKey>
        isExternal: true
      description: The key selector.
    - id: elementSelector
      type:
        id: System.Func{``2,``1}
        name: Func<T, TElement>
        isExternal: true
      description: The element selector.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``0,``1}
        name: Dictionary<TKey, TElement>
        isExternal: true
      description: The newly initialized dictionary.
  id: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, T>(ImmutableArray<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 605
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, T> ToDictionary<TKey, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``1}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``1}
    - id: keySelector
      type:
        id: System.Func{``1,``0}
        name: Func<T, TKey>
        isExternal: true
      description: The key selector.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: The comparer to initialize the dictionary with.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``0,``1}
        name: Dictionary<TKey, T>
        isExternal: true
      description: The newly initialized dictionary.
  id: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToDictionary<TKey, TElement, T>(ImmutableArray<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ImmutableArrayExtensions.ToDictionary<TKey, TElement, T>(System.Collections.Immutable.ImmutableArray<T>, System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 630
  summary: Creates a dictionary based on the contents of this array.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``2}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``2}
    - id: keySelector
      type:
        id: System.Func{``2,``0}
        name: Func<T, TKey>
        isExternal: true
      description: The key selector.
    - id: elementSelector
      type:
        id: System.Func{``2,``1}
        name: Func<T, TElement>
        isExternal: true
      description: The element selector.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: The comparer to initialize the dictionary with.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``0,``1}
        name: Dictionary<TKey, TElement>
        isExternal: true
      description: The newly initialized dictionary.
  id: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  href: System.Linq.ImmutableArrayExtensions.yml
  name: ToArray<T>(ImmutableArray<T>)
  fullName: System.Linq.ImmutableArrayExtensions.ToArray<T>(System.Collections.Immutable.ImmutableArray<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 651
  summary: Copies the contents of this array to a mutable array.
  syntax:
    content:
      CSharp: public static T[] ToArray<T>(ImmutableArray<T> immutableArray)
    parameters:
    - id: immutableArray
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}
        name: ImmutableArray<T>
        href: System.Collections.Immutable.ImmutableArray{``0}
    return:
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The newly instantiated array.
  id: System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: First<T>(Builder)
  fullName: System.Linq.ImmutableArrayExtensions.First<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 671
  summary: Returns the first element in the collection.
  syntax:
    content:
      CSharp: public static T First<T>(Builder builder)
    parameters:
    - id: builder
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: FirstOrDefault<T>(Builder)
  fullName: System.Linq.ImmutableArrayExtensions.FirstOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 687
  summary: Returns the first element in the collection, or the default value if the collection is empty.
  syntax:
    content:
      CSharp: public static T FirstOrDefault<T>(Builder builder)
    parameters:
    - id: builder
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Last<T>(Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Last<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 699
  summary: Returns the last element in the collection.
  syntax:
    content:
      CSharp: public static T Last<T>(Builder builder)
    parameters:
    - id: builder
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: LastOrDefault<T>(Builder)
  fullName: System.Linq.ImmutableArrayExtensions.LastOrDefault<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 715
  summary: Returns the last element in the collection, or the default value if the collection is empty.
  syntax:
    content:
      CSharp: public static T LastOrDefault<T>(Builder builder)
    parameters:
    - id: builder
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
    return:
      id: T
      type:
        id: T
        name: T
        href: T
  id: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
  href: System.Linq.ImmutableArrayExtensions.yml
  name: Any<T>(Builder)
  fullName: System.Linq.ImmutableArrayExtensions.Any<T>(System.Collections.Immutable.ImmutableArray<T>.Builder)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Immutable/src/System/Linq/ImmutableArrayExtensions.cs
    startLine: 726
  summary: Returns a value indicating whether this collection contains any elements.
  syntax:
    content:
      CSharp: public static bool Any<T>(Builder builder)
    parameters:
    - id: builder
      type:
        id: System.Collections.Immutable.ImmutableArray{``0}.Builder
        name: Builder
        href: System.Collections.Immutable.ImmutableArray{``0}.Builder
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)
