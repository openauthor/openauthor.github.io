items:
- uid: System.Linq.ParallelEnumerable
  href: System.Linq.ParallelEnumerable.yml
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 54
  summary: >-
    Provides a set of methods for querying objects that implement

    ParallelQuery{TSource}.  This is the parallel equivalent of

    @!:System.Linq.Enumerable-.
  syntax:
    content:
      CSharp: public class ParallelEnumerable
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Linq.ParallelEnumerable
  children:
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  - System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  - System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  - System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  - System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  - System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  - System.Linq.ParallelEnumerable.Empty``1
  - System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  - System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 89
  summary: Enables parallelization of a query.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> AsParallel<TSource>(IEnumerable<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: >-
        An [System.Collections.Generic.IEnumerable`1]()

        to convert to a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml).
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        The source as a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) to bind to

        ParallelEnumerable extension methods.
  id: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel<TSource>(Partitioner<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 114
  summary: >-
    Enables parallelization of a query, as sourced by a partitioner

    responsible for splitting the input sequence into partitions.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> AsParallel<TSource>(Partitioner<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: A partitioner over the input sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The  as a ParallelQuery to bind to ParallelEnumerable extension methods.
  id: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
- uid: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsOrdered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 144
  summary: >-
    Enables treatment of a data source as if it was ordered, overriding the default of unordered.

    AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range,

    and ParallelEnumerable.Repeat.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> AsOrdered<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The input sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The source sequence which will maintain ordering in the query.
  id: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  href: System.Linq.ParallelEnumerable.yml
  name: AsOrdered(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 188
  summary: >-
    Enables treatment of a data source as if it was ordered, overriding the default of unordered.

    AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range,

    and ParallelEnumerable.Repeat.
  syntax:
    content:
      CSharp: public static ParallelQuery AsOrdered(ParallelQuery source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery
        name: ParallelQuery
        href: System.Linq.ParallelQuery.yml
      description: The input sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery
        name: ParallelQuery
        href: System.Linq.ParallelQuery.yml
      description: The source sequence which will maintain ordering in the query.
  id: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
- uid: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsUnordered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 217
  summary: Allows an intermediate query to be treated as if no ordering is implied among the elements.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> AsUnordered<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The input sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The source sequence with arbitrary order.
  id: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  href: System.Linq.ParallelEnumerable.yml
  name: AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 239
  summary: Enables parallelization of a query.
  syntax:
    content:
      CSharp: public static ParallelQuery AsParallel(IEnumerable source)
    parameters:
    - id: source
      type:
        id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
      description: >-
        An [System.Collections.Generic.IEnumerable`1]() to convert

        to a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml).
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery
        name: ParallelQuery
        href: System.Linq.ParallelQuery.yml
      description: >-
        The source as a ParallelQuery to bind to

        ParallelEnumerable extension methods.
  id: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsSequential<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 266
  summary: >-
    Converts a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) into an

    [System.Collections.Generic.IEnumerable`1]() to force sequential

    evaluation of the query.
  syntax:
    content:
      CSharp: public static IEnumerable<TSource> AsSequential<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) to convert to an [System.Collections.Generic.IEnumerable`1]().
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: >-
        The source as an [System.Collections.Generic.IEnumerable`1]()

        to bind to sequential extension methods.
  id: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, int)
  fullName: System.Linq.ParallelEnumerable.WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 325
  summary: >-
    Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently

    executing tasks that will be used to process the query.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(ParallelQuery<TSource> source, int degreeOfParallelism)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A ParallelQuery on which to set the limit on the degrees of parallelism.
    - id: degreeOfParallelism
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The degree of parallelism for the query.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.
  id: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
- uid: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  href: System.Linq.ParallelEnumerable.yml
  name: WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)
  fullName: System.Linq.ParallelEnumerable.WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 357
  summary: Sets the [System.Threading.CancellationToken]() to associate with the query.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> WithCancellation<TSource>(ParallelQuery<TSource> source, CancellationToken cancellationToken)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A ParallelQuery on which to set the option.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: CancellationToken
        isExternal: true
      description: A cancellation token.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        ParallelQuery representing the same query as source, but with the [System.Threading.CancellationToken]()

        registered.
  id: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
- uid: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  href: System.Linq.ParallelEnumerable.yml
  name: WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)
  fullName: System.Linq.ParallelEnumerable.WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 401
  summary: Sets the execution mode of the query.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> WithExecutionMode<TSource>(ParallelQuery<TSource> source, ParallelExecutionMode executionMode)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A ParallelQuery on which to set the option.
    - id: executionMode
      type:
        id: System.Linq.ParallelExecutionMode
        name: ParallelExecutionMode
        href: System.Linq.ParallelExecutionMode.yml
      description: The mode in which to execute the query.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        ParallelQuery representing the same query as source, but with the

        [System.Linq.ParallelExecutionMode](System.Linq.ParallelExecutionMode.yml) registered.
  id: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
- uid: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  href: System.Linq.ParallelEnumerable.yml
  name: WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)
  fullName: System.Linq.ParallelEnumerable.WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 433
  summary: Sets the merge options for this query, which specify how the query will buffer output.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> WithMergeOptions<TSource>(ParallelQuery<TSource> source, ParallelMergeOptions mergeOptions)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A ParallelQuery on which to set the option.
    - id: mergeOptions
      type:
        id: System.Linq.ParallelMergeOptions
        name: ParallelMergeOptions
        href: System.Linq.ParallelMergeOptions.yml
      description: The merge options to set for this query.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        ParallelQuery representing the same query as source, but with the

        [System.Linq.ParallelMergeOptions](System.Linq.ParallelMergeOptions.yml) registered.
  id: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
- uid: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: Range(int, int)
  fullName: System.Linq.ParallelEnumerable.Range(int, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 467
  summary: Generates a parallel sequence of integral numbers within a specified range.
  syntax:
    content:
      CSharp: public static ParallelQuery<int> Range(int start, int count)
    parameters:
    - id: start
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The value of the first integer in the sequence.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of sequential integers to generate.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{System.Int32}
        name: ParallelQuery<int>
        href: System.Linq.ParallelQuery{System.Int32}
      description: >-
        An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in

        Visual Basic that contains a range of sequential integral numbers.
  id: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
- uid: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: Repeat<TResult>(TResult, int)
  fullName: System.Linq.ParallelEnumerable.Repeat<TResult>(TResult, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 487
  summary: Generates a parallel sequence that contains one repeated value.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Repeat<TResult>(TResult element, int count)
    parameters:
    - id: element
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The value to be repeated.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of times to repeat the value in the generated sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains a repeated value.
  id: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
- uid: System.Linq.ParallelEnumerable.Empty``1
  href: System.Linq.ParallelEnumerable.yml
  name: Empty<TResult>()
  fullName: System.Linq.ParallelEnumerable.Empty<TResult>()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 504
  summary: Returns an empty ParallelQuery{TResult} that has the specified type argument.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Empty<TResult>()
    parameters: []
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``0}
      description: An empty sequence whose type argument is .
  id: System.Linq.ParallelEnumerable.Empty``1
- uid: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)
  fullName: System.Linq.ParallelEnumerable.ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 545
  summary: Invokes in parallel the specified action for each element in the .
  syntax:
    content:
      CSharp: public static void ForAll<TSource>(ParallelQuery<TSource> source, Action<TSource> action)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        The [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) whose elements will be processed by

        .
    - id: action
      type:
        id: System.Action{``0}
        name: Action<TSource>
        isExternal: true
      description: An Action to invoke on each element.
  id: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 577
  summary: Filters in parallel a sequence of values based on a predicate.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Where<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to filter.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence that contains elements from the input sequence that satisfy

        the condition.
  id: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, int, bool>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 595
  summary: Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Where<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to filter.
    - id: predicate
      type:
        id: System.Func{``0,System.Int32,System.Boolean}
        name: Func<TSource, int, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements from the input sequence that satisfy the condition.
  id: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 620
  summary: Projects in parallel each element of a sequence into a new form.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Select<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TResult>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``1}
      description: >-
        A sequence whose elements are the result of invoking the transform function on each

        element of .
  id: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, int, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 641
  summary: Projects in parallel each element of a sequence into a new form by incorporating the element's index.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Select<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, int, TResult> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type:
        id: System.Func{``0,System.Int32,``1}
        name: Func<TSource, int, TResult>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``1}
      description: >-
        A sequence whose elements are the result of invoking the transform function on each

        element of .
  id: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 671
  summary: Merges in parallel two sequences by using the specified predicate function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst> first, ParallelQuery<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TFirst>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to zip.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TSecond>
        href: System.Linq.ParallelQuery{``1}
      description: The second sequence to zip.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``2}
        name: Func<TFirst, TSecond, TResult>
        isExternal: true
      description: A function to create a result element from two matching elements.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: >-
        A sequence that has elements of type  that are obtained by performing

        resultSelector pairwise on two sequences. If the sequence lengths are unequal, this truncates

        to the length of the shorter sequence.
  id: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 699
  summary: >-
    This Zip overload should never be called.

    This method is marked as obsolete and always throws

    [System.NotSupportedException]() when invoked.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TFirst>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TSecond>
        isExternal: true
      description: This parameter is not used.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``2}
        name: Func<TFirst, TSecond, TResult>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 732
  summary: >-
    Correlates in parallel the elements of two sequences based on matching keys.

    The default equality comparer is used to compare keys.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to join.
    - id: inner
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TInner>
        href: System.Linq.ParallelQuery{``1}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element of

        the first sequence.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element of

        the second sequence.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``3}
        name: Func<TOuter, TInner, TResult>
        isExternal: true
      description: A function to create a result element from two matching elements.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A sequence that has elements of type  that are obtained by performing

        an inner join on two sequences.
  id: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 761
  summary: >-
    This Join overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when invoked.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
      description: This parameter is not used.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``3}
        name: Func<TOuter, TInner, TResult>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 792
  summary: >-
    Correlates in parallel the elements of two sequences based on matching keys.

    A specified IEqualityComparer{T} is used to compare keys.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to join.
    - id: inner
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TInner>
        href: System.Linq.ParallelQuery{``1}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``3}
        name: Func<TOuter, TInner, TResult>
        isExternal: true
      description: A function to create a result element from two matching elements.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to hash and compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A sequence that has elements of type  that are obtained by performing

        an inner join on two sequences.
  id: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 828
  summary: >-
    This Join overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when invoked.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
      description: This parameter is not used.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``3}
        name: Func<TOuter, TInner, TResult>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 864
  summary: >-
    Correlates in parallel the elements of two sequences based on equality of keys and groups the results.

    The default equality comparer is used to compare keys.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to join.
    - id: inner
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TInner>
        href: System.Linq.ParallelQuery{``1}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}
        name: Func<TOuter, IEnumerable<TInner>, TResult>
        isExternal: true
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A sequence that has elements of type  that are obtained by performing

        a grouped join on two sequences.
  id: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 894
  summary: >-
    This GroupJoin overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
      description: This parameter is not used.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: resultSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}
        name: Func<TOuter, IEnumerable<TInner>, TResult>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 926
  summary: >-
    Correlates in parallel the elements of two sequences based on key equality and groups the results.

    A specified IEqualityComparer{T} is used to compare keys.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to join.
    - id: inner
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TInner>
        href: System.Linq.ParallelQuery{``1}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the first sequence.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: >-
        A function to extract the join key from each element

        of the second sequence.
    - id: resultSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}
        name: Func<TOuter, IEnumerable<TInner>, TResult>
        isExternal: true
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to hash and compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A sequence that has elements of type  that are obtained by performing

        a grouped join on two sequences.
  id: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 963
  summary: >-
    This GroupJoin overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TOuter>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
      description: This parameter is not used.
    - id: outerKeySelector
      type:
        id: System.Func{``0,``2}
        name: Func<TOuter, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: innerKeySelector
      type:
        id: System.Func{``1,``2}
        name: Func<TInner, TKey>
        isExternal: true
      description: This parameter is not used.
    - id: resultSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}
        name: Func<TOuter, IEnumerable<TInner>, TResult>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 991
  summary: >-
    Projects in parallel each element of a sequence to an IEnumerable{T}

    and flattens the resulting sequences into one sequence.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to project.
    - id: selector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
        name: Func<TSource, IEnumerable<TResult>>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``1}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function on each element of the input sequence.
  id: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, int, IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1014
  summary: >-
    Projects in parallel each element of a sequence to an IEnumerable{T}, and flattens the resulting

    sequences into one sequence. The index of each source element is used in the projected form of

    that element.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to project.
    - id: selector
      type:
        id: System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}
        name: Func<TSource, int, IEnumerable<TResult>>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``1}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``1}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function on each element of the input sequence.
  id: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1043
  summary: >-
    Projects each element of a sequence to an IEnumerable{T},

    flattens the resulting sequences into one sequence, and invokes a result selector

    function on each element therein.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to project.
    - id: collectionSelector
      type:
        id: System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
        name: Func<TSource, IEnumerable<TCollection>>
        isExternal: true
      description: >-
        A transform function to apply to each source element;

        the second parameter of the function represents the index of the source element.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``2}
        name: Func<TSource, TCollection, TResult>
        isExternal: true
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function  on each element of  and then mapping

        each of those sequence elements and their corresponding source element to a result element.
  id: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, int, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1079
  summary: >-
    Projects each element of a sequence to an IEnumerable{T}, flattens the resulting

    sequences into one sequence, and invokes a result selector function on each element

    therein. The index of each source element is used in the intermediate projected

    form of that element.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to project.
    - id: collectionSelector
      type:
        id: System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}
        name: Func<TSource, int, IEnumerable<TCollection>>
        isExternal: true
      description: >-
        A transform function to apply to each source element;

        the second parameter of the function represents the index of the source element.
    - id: resultSelector
      type:
        id: System.Func{``0,``1,``2}
        name: Func<TSource, TCollection, TResult>
        isExternal: true
      description: >-
        A function to create a result element from an element from

        the first sequence and a collection of matching elements from the second sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: >-
        A sequence whose elements are the result of invoking the one-to-many transform

        function  on each element of  and then mapping

        each of those sequence elements and their corresponding source element to a

        result element.
  id: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1114
  summary: Sorts in parallel the elements of a sequence in ascending order according to a key.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to order.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        according to a key.
  id: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1142
  summary: Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to order.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
      description: An IComparer{TKey} to compare keys.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted according

        to a key.
  id: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1169
  summary: Sorts in parallel the elements of a sequence in descending order according to a key.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to order.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  id: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1196
  summary: Sorts the elements of a sequence in descending order by using a specified comparer.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to order.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
      description: An IComparer{TKey} to compare keys.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted descending

        according to a key.
  id: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1226
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence

    in ascending order according to a key.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} than

        contains elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are

        sorted according to a key.
  id: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1257
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in

    ascending order by using a specified comparer.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} that contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
      description: An IComparer{TKey} to compare keys.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        according to a key.
  id: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1287
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in

    descending order, according to a key.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} than contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  id: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1318
  summary: >-
    Performs in parallel a subsequent ordering of the elements in a sequence in descending

    order by using a specified comparer.
  syntax:
    content:
      CSharp: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} than contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
      description: An IComparer{TKey} to compare keys.
    return:
      id: OrderedParallelQuery
      type:
        id: System.Linq.OrderedParallelQuery{``0}
        name: OrderedParallelQuery<TSource>
        href: System.Linq.OrderedParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  id: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1342
  summary: Groups in parallel the elements of a sequence according to a specified key selector function.
  syntax:
    content:
      CSharp: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource}than contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{IGrouping{``1,``0}}
        name: ParallelQuery<IGrouping<TKey, TSource>>
        href: System.Linq.ParallelQuery{IGrouping{``1,``0}}
      description: >-
        An OrderedParallelQuery{TSource}whose elements are sorted

        descending according to a key.
  id: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1362
  summary: Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
  syntax:
    content:
      CSharp: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        An OrderedParallelQuery{TSource} than contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IComparer{TSource} to compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{IGrouping{``1,``0}}
        name: ParallelQuery<IGrouping<TKey, TSource>>
        href: System.Linq.ParallelQuery{IGrouping{``1,``0}}
      description: >-
        An OrderedParallelQuery{TSource} whose elements are sorted

        descending according to a key.
  id: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1389
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key selector function and

    projects the elements for each group by using a specified function.
  syntax:
    content:
      CSharp: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        An OrderedParallelQuery<(Of <(TElement>)>) than contains

        elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: A function to map each source element to an element in an  IGrouping.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{IGrouping{``1,``2}}
        name: ParallelQuery<IGrouping<TKey, TElement>>
        href: System.Linq.ParallelQuery{IGrouping{``1,``2}}
      description: >-
        A ParallelQuery<IGrouping<TKey, TElement>> in C# or

        ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping

        generic object contains a collection of objects of type  and a key.
  id: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1416
  summary: >-
    Groups in parallel the elements of a sequence according to a key selector function.

    The keys are compared by using a comparer and each group's elements are projected by

    using a specified function.
  syntax:
    content:
      CSharp: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: An OrderedParallelQuery{TSource}than contains elements to sort.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from an element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: A function to map each source element to an element in an  IGrouping.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IComparer{TSource} to compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{IGrouping{``1,``2}}
        name: ParallelQuery<IGrouping<TKey, TElement>>
        href: System.Linq.ParallelQuery{IGrouping{``1,``2}}
      description: >-
        A ParallelQuery{IGrouping{TKey, TElement}} in C# or

        ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping

        generic object contains a collection of objects of type  and a key.
  id: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1455
  summary: >-
    Groups in parallel the elements of a sequence according to a specified

    key selector function and creates a result value from each group and its key.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements to group.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract the key for each element.
    - id: resultSelector
      type:
        id: System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}
        name: Func<TKey, IEnumerable<TSource>, TResult>
        isExternal: true
      description: A function to create a result value from each group.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: >-
        A collection of elements of type  where each element represents a

        projection over a group and its key.
  id: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1487
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key selector function

    and creates a result value from each group and its key. The keys are compared

    by using a specified comparer.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements to group.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract the key for each element.
    - id: resultSelector
      type:
        id: System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}
        name: Func<TKey, IEnumerable<TSource>, TResult>
        isExternal: true
      description: A function to create a result value from each group.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer{TKey} to compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``2}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``2}
      description: >-
        An ParallelQuery<IGrouping<TKey, TResult>> in C# or

        ParallelQuery(Of IGrouping(Of TKey, TResult)) in Visual Basic where each

        IGrouping<(Of <(TKey, TResult>)>) object contains a collection of objects

        of type  and a key.
  id: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1517
  summary: >-
    Groups in parallel the elements of a sequence according to a specified key

    selector function and creates a result value from each group and its key.

    The elements of each group are projected by using a specified function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements to group.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract the key for each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: >-
        A function to map each source element to an element in an

        IGrouping<TKey, TElement>.
    - id: resultSelector
      type:
        id: System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}
        name: Func<TKey, IEnumerable<TElement>, TResult>
        isExternal: true
      description: A function to create a result value from each group.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A collection of elements of type  where each element represents a

        projection over a group and its key.
  id: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1548
  summary: >-
    Groups the elements of a sequence according to a specified key selector function and

    creates a result value from each group and its key. Key values are compared by using a

    specified comparer, and the elements of each group are projected by using a specified function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements to group.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract the key for each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: >-
        A function to map each source element to an element in an

        IGrouping{Key, TElement}.
    - id: resultSelector
      type:
        id: System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}
        name: Func<TKey, IEnumerable<TElement>, TResult>
        isExternal: true
      description: A function to create a result value from each group.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer{TKey} to compare keys.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``3}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``3}
      description: >-
        A collection of elements of type  where each element represents a

        projection over a group and its key.
  id: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1672
  summary: Applies in parallel an accumulator function over a sequence.
  syntax:
    content:
      CSharp: public static TSource Aggregate<TSource>(ParallelQuery<TSource> source, Func<TSource, TSource, TSource> func)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to aggregate over.
    - id: func
      type:
        id: System.Func{``0,``0,``0}
        name: Func<TSource, TSource, TSource>
        isExternal: true
      description: An accumulator function to be invoked on each element.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The final accumulator value.
  id: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
- uid: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1719
  summary: >-
    Applies in parallel an accumulator function over a sequence.

    The specified seed value is used as the initial accumulator value.
  syntax:
    content:
      CSharp: public static TAccumulate Aggregate<TSource, TAccumulate>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to aggregate over.
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
      description: The initial accumulator value.
    - id: func
      type:
        id: System.Func{``1,``0,``1}
        name: Func<TAccumulate, TSource, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on each element.
    return:
      id: TAccumulate
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
      description: The final accumulator value.
  id: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1758
  summary: >-
    Applies in parallel an accumulator function over a sequence. The specified

    seed value is used as the initial accumulator value, and the specified

    function is used to select the result value.
  syntax:
    content:
      CSharp: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to aggregate over.
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
      description: The initial accumulator value.
    - id: func
      type:
        id: System.Func{``1,``0,``1}
        name: Func<TAccumulate, TSource, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on each element.
    - id: resultSelector
      type:
        id: System.Func{``1,``2}
        name: Func<TAccumulate, TResult>
        isExternal: true
      description: >-
        A function to transform the final accumulator value

        into the result value.
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The transformed final accumulator value.
  id: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1821
  summary: >-
    Applies in parallel an accumulator function over a sequence. This overload is not

    available in the sequential implementation.
  syntax:
    content:
      CSharp: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to aggregate over.
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
      description: The initial accumulator value.
    - id: updateAccumulatorFunc
      type:
        id: System.Func{``1,``0,``1}
        name: Func<TAccumulate, TSource, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on each element in a partition.
    - id: combineAccumulatorsFunc
      type:
        id: System.Func{``1,``1,``1}
        name: Func<TAccumulate, TAccumulate, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on the yielded element from each partition.
    - id: resultSelector
      type:
        id: System.Func{``1,``2}
        name: Func<TAccumulate, TResult>
        isExternal: true
      description: A function to transform the final accumulator value into the result value.
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The transformed final accumulator value.
  id: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1874
  summary: >-
    Applies in parallel an accumulator function over a sequence.  This overload is not

    available in the sequential implementation.
  syntax:
    content:
      CSharp: public static TResult Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to aggregate over.
    - id: seedFactory
      type:
        id: System.Func{``1}
        name: Func<TAccumulate>
        isExternal: true
      description: A function that returns the initial accumulator value.
    - id: updateAccumulatorFunc
      type:
        id: System.Func{``1,``0,``1}
        name: Func<TAccumulate, TSource, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on each element in a partition.
    - id: combineAccumulatorsFunc
      type:
        id: System.Func{``1,``1,``1}
        name: Func<TAccumulate, TAccumulate, TAccumulate>
        isExternal: true
      description: An accumulator function to be invoked on the yielded element from each partition.
    - id: resultSelector
      type:
        id: System.Func{``1,``2}
        name: Func<TAccumulate, TResult>
        isExternal: true
      description: A function to transform the final accumulator value into the result value.
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The transformed final accumulator value.
  id: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Count<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1914
  summary: Returns the number of elements in a parallel sequence.
  syntax:
    content:
      CSharp: public static int Count<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements to be counted.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements in the input sequence.
  id: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Count<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1958
  summary: >-
    Returns a number that represents how many elements in the specified

    parallel sequence satisfy a condition.
  syntax:
    content:
      CSharp: public static int Count<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements to be counted.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: >-
        A number that represents how many elements in the sequence satisfy the condition

        in the predicate function.
  id: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: LongCount<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1987
  summary: Returns an Int64 that represents the total number of elements in a parallel sequence.
  syntax:
    content:
      CSharp: public static long LongCount<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements to be counted.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The number of elements in the input sequence.
  id: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2027
  summary: Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.
  syntax:
    content:
      CSharp: public static long LongCount<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements to be counted.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: >-
        A number that represents how many elements in the sequence satisfy the condition

        in the predicate function.
  id: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<int>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2056
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static int Sum(ParallelQuery<int> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int32}
        name: ParallelQuery<int>
        href: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to calculate the sum of.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<int?>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2078
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static int ? Sum(ParallelQuery<int ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
        name: ParallelQuery<int?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to calculate the sum of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<long>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2100
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static long Sum(ParallelQuery<long> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int64}
        name: ParallelQuery<long>
        href: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to calculate the sum of.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<long?>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2122
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static long ? Sum(ParallelQuery<long ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
        name: ParallelQuery<long?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to calculate the sum of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<float>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2142
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static float Sum(ParallelQuery<float> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Single}
        name: ParallelQuery<float>
        href: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to calculate the sum of.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<float?>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2162
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static float ? Sum(ParallelQuery<float ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Single}}
        name: ParallelQuery<float?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to calculate the sum of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<double>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2182
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static double Sum(ParallelQuery<double> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Double}
        name: ParallelQuery<double>
        href: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to calculate the sum of.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<double?>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2202
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static double ? Sum(ParallelQuery<double ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Double}}
        name: ParallelQuery<double?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to calculate the sum of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2224
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static decimal Sum(ParallelQuery<decimal> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Decimal}
        name: ParallelQuery<decimal>
        href: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to calculate the sum of.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum(ParallelQuery<decimal?>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2246
  summary: Computes in parallel the sum of a sequence of values.
  syntax:
    content:
      CSharp: public static decimal ? Sum(ParallelQuery<decimal ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
        name: ParallelQuery<decimal?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to calculate the sum of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, int>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2270
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static int Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Int32}
        name: Func<TSource, int>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, int?>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2294
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static int ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int32}}
        name: Func<TSource, int?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, long>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2318
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static long Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Int64}
        name: Func<TSource, long>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, long?>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2342
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static long ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int64}}
        name: Func<TSource, long?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, float>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2364
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static float Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Single}
        name: Func<TSource, float>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, float?>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2386
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static float ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Single}}
        name: Func<TSource, float?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, double>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2408
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Double}
        name: Func<TSource, double>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, double?>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2430
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Double}}
        name: Func<TSource, double?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2454
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static decimal Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Decimal}
        name: Func<TSource, decimal>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, decimal?>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2478
  summary: >-
    Computes in parallel the sum of the sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static decimal ? Sum<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to calculate the sum of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Decimal}}
        name: Func<TSource, decimal?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The sum of the values in the sequence.
  id: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<int>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2514
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static int Min(ParallelQuery<int> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int32}
        name: ParallelQuery<int>
        href: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<int?>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2534
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static int ? Min(ParallelQuery<int ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
        name: ParallelQuery<int?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<long>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2557
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static long Min(ParallelQuery<long> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int64}
        name: ParallelQuery<long>
        href: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<long?>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2577
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static long ? Min(ParallelQuery<long ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
        name: ParallelQuery<long?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<float>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2600
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static float Min(ParallelQuery<float> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Single}
        name: ParallelQuery<float>
        href: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<float?>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2620
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static float ? Min(ParallelQuery<float ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Single}}
        name: ParallelQuery<float?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<double>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2643
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static double Min(ParallelQuery<double> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Double}
        name: ParallelQuery<double>
        href: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<double?>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2663
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static double ? Min(ParallelQuery<double ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Double}}
        name: ParallelQuery<double?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<decimal>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2686
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static decimal Min(ParallelQuery<decimal> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Decimal}
        name: ParallelQuery<decimal>
        href: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min(ParallelQuery<decimal?>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2706
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static decimal ? Min(ParallelQuery<decimal ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
        name: ParallelQuery<decimal?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the minimum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2730
  summary: Returns the minimum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static TSource Min<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, int>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2756
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static int Min<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Int32}
        name: Func<TSource, int>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, int?>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2778
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static int ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int32}}
        name: Func<TSource, int?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, long>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2803
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static long Min<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Int64}
        name: Func<TSource, long>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, long?>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2825
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static long ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int64}}
        name: Func<TSource, long?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, float>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2850
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static float Min<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Single}
        name: Func<TSource, float>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, float?>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2872
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static float ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Single}}
        name: Func<TSource, float?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, double>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2897
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static double Min<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Double}
        name: Func<TSource, double>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, double?>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2919
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static double ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Double}}
        name: Func<TSource, double?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, decimal>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2944
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static decimal Min<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Decimal}
        name: Func<TSource, decimal>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, decimal?>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2966
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static decimal ? Min<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Decimal}}
        name: Func<TSource, decimal?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2992
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the minimum value.
  syntax:
    content:
      CSharp: public static TResult Min<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TResult>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The minimum value in the sequence.
  id: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<int>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3018
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static int Max(ParallelQuery<int> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int32}
        name: ParallelQuery<int>
        href: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<int?>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3038
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static int ? Max(ParallelQuery<int ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
        name: ParallelQuery<int?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<long>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3061
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static long Max(ParallelQuery<long> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int64}
        name: ParallelQuery<long>
        href: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<long?>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3081
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static long ? Max(ParallelQuery<long ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
        name: ParallelQuery<long?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<float>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3104
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static float Max(ParallelQuery<float> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Single}
        name: ParallelQuery<float>
        href: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<float?>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3124
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static float ? Max(ParallelQuery<float ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Single}}
        name: ParallelQuery<float?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<double>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3147
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static double Max(ParallelQuery<double> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Double}
        name: ParallelQuery<double>
        href: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<double?>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3167
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static double ? Max(ParallelQuery<double ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Double}}
        name: ParallelQuery<double?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<decimal>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3190
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static decimal Max(ParallelQuery<decimal> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Decimal}
        name: ParallelQuery<decimal>
        href: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max(ParallelQuery<decimal?>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3210
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static decimal ? Max(ParallelQuery<decimal ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
        name: ParallelQuery<decimal?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the maximum value of.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3233
  summary: Returns the maximum value in a parallel sequence of values.
  syntax:
    content:
      CSharp: public static TSource Max<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, int>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3259
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static int Max<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Int32}
        name: Func<TSource, int>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, int?>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3281
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static int ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int32}}
        name: Func<TSource, int?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, long>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3306
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static long Max<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Int64}
        name: Func<TSource, long>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, long?>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3328
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static long ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int64}}
        name: Func<TSource, long?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, float>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3353
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static float Max<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Single}
        name: Func<TSource, float>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, float?>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3375
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static float ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Single}}
        name: Func<TSource, float?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, double>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3400
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static double Max<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Double}
        name: Func<TSource, double>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, double?>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3422
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static double ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Double}}
        name: Func<TSource, double?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, decimal>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3447
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static decimal Max<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Decimal}
        name: Func<TSource, decimal>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, decimal?>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3469
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static decimal ? Max<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Decimal}}
        name: Func<TSource, decimal?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3495
  summary: >-
    Invokes in parallel a transform function on each element of a

    sequence and returns the maximum value.
  syntax:
    content:
      CSharp: public static TResult Max<TSource, TResult>(ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TResult>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
      description: The maximum value in the sequence.
  id: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<int>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3523
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double Average(ParallelQuery<int> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int32}
        name: ParallelQuery<int>
        href: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<int?>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3545
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double ? Average(ParallelQuery<int ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
        name: ParallelQuery<int?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<long>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3570
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double Average(ParallelQuery<long> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Int64}
        name: ParallelQuery<long>
        href: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<long?>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3592
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double ? Average(ParallelQuery<long ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
        name: ParallelQuery<long?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<float>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3615
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static float Average(ParallelQuery<float> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Single}
        name: ParallelQuery<float>
        href: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<float?>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3635
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static float ? Average(ParallelQuery<float ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Single}}
        name: ParallelQuery<float?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<double>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3658
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double Average(ParallelQuery<double> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Double}
        name: ParallelQuery<double>
        href: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<double?>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3678
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static double ? Average(ParallelQuery<double ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Double}}
        name: ParallelQuery<double?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Double}}
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<decimal>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3701
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static decimal Average(ParallelQuery<decimal> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Decimal}
        name: ParallelQuery<decimal>
        href: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average(ParallelQuery<decimal?>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3721
  summary: Computes in parallel the average of a sequence of values.
  syntax:
    content:
      CSharp: public static decimal ? Average(ParallelQuery<decimal ? > source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
        name: ParallelQuery<decimal?>
        href: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values that are used to calculate an average.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, int>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3749
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Int32}
        name: Func<TSource, int>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, int?>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3773
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int32}}
        name: Func<TSource, int?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, long>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3800
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Int64}
        name: Func<TSource, long>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, long?>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3824
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Int64}}
        name: Func<TSource, long?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, float>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3849
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static float Average<TSource>(ParallelQuery<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Single}
        name: Func<TSource, float>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, float?>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3871
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static float ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Single}}
        name: Func<TSource, float?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, double>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3896
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double Average<TSource>(ParallelQuery<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Double}
        name: Func<TSource, double>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, double?>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3918
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Double}}
        name: Func<TSource, double?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, decimal>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3943
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static decimal Average<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Decimal}
        name: Func<TSource, decimal>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  href: System.Linq.ParallelEnumerable.yml
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, decimal?>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3965
  summary: >-
    Computes in parallel the average of a sequence of values that are obtained

    by invoking a transform function on each element of the input sequence.
  syntax:
    content:
      CSharp: public static decimal ? Average<TSource>(ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type:
        id: System.Func{``0,System.Nullable{System.Decimal}}
        name: Func<TSource, decimal?>
        isExternal: true
      description: A transform function to apply to each element.
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
      description: The average of the sequence of values.
  id: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Any<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3992
  summary: Determines in parallel whether any element of a sequence satisfies a condition.
  syntax:
    content:
      CSharp: public static bool Any<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: An IEnumerable whose elements to apply the predicate to.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
  id: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Any<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4015
  summary: Determines whether a parallel sequence contains any elements.
  syntax:
    content:
      CSharp: public static bool Any<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The IEnumerable to check for emptiness.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the source sequence contains any elements; otherwise, false.
  id: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: All<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4044
  summary: Determines in parallel whether all elements of a sequence satisfy a condition.
  syntax:
    content:
      CSharp: public static bool All<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements to apply the predicate to.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if all elements in the source sequence pass the test in the specified predicate; otherwise, false.
  id: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  href: System.Linq.ParallelEnumerable.yml
  name: Contains<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4075
  summary: >-
    Determines in parallel whether a sequence contains a specified element

    by using the default equality comparer.
  syntax:
    content:
      CSharp: public static bool Contains<TSource>(ParallelQuery<TSource> source, TSource value)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence in which to locate a value.
    - id: value
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The value to locate in the sequence.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  id: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4100
  summary: >-
    Determines in parallel whether a sequence contains a specified element by using a

    specified IEqualityComparer{T}.
  syntax:
    content:
      CSharp: public static bool Contains<TSource>(ParallelQuery<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence in which to locate a value.
    - id: value
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The value to locate in the sequence.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An equality comparer to compare values.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  id: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: Take<TSource>(ParallelQuery<TSource>, int)
  fullName: System.Linq.ParallelEnumerable.Take<TSource>(System.Linq.ParallelQuery<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4129
  summary: Returns a specified number of contiguous elements from the start of a parallel sequence.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Take<TSource>(ParallelQuery<TSource> source, int count)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to return.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the specified number of elements from the start of the input sequence.
  id: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4161
  summary: Returns elements from a parallel sequence as long as a specified condition is true.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> TakeWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence that contains the elements from the input sequence that occur before

        the element at which the test no longer passes.
  id: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, int, bool>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4186
  summary: >-
    Returns elements from a parallel sequence as long as a specified condition is true.

    The element's index is used in the logic of the predicate function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> TakeWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: predicate
      type:
        id: System.Func{``0,System.Int32,System.Boolean}
        name: Func<TSource, int, bool>
        isExternal: true
      description: >-
        A function to test each source element for a condition; the second parameter of the

        function represents the index of the source element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence that contains elements from the input sequence that occur before

        the element at which the test no longer passes.
  id: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: Skip<TSource>(ParallelQuery<TSource>, int)
  fullName: System.Linq.ParallelEnumerable.Skip<TSource>(System.Linq.ParallelQuery<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4211
  summary: Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Skip<TSource>(ParallelQuery<TSource> source, int count)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The number of elements to skip before returning the remaining elements.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the elements that occur after the specified index in the input sequence.
  id: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4243
  summary: >-
    Bypasses elements in a parallel sequence as long as a specified

    condition is true and then returns the remaining elements.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> SkipWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence that contains the elements from the input sequence starting at

        the first element in the linear series that does not pass the test specified by

        predicate.
  id: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, int, bool>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, int, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4270
  summary: >-
    Bypasses elements in a parallel sequence as long as a specified condition is true and

    then returns the remaining elements. The element's index is used in the logic of

    the predicate function.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> SkipWhile<TSource>(ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return elements from.
    - id: predicate
      type:
        id: System.Func{``0,System.Int32,System.Boolean}
        name: Func<TSource, int, bool>
        isExternal: true
      description: >-
        A function to test each source element for a condition; the

        second parameter of the function represents the index of the source element.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence that contains the elements from the input sequence starting at the

        first element in the linear series that does not pass the test specified by

        predicate.
  id: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4296
  summary: Concatenates two parallel sequences.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Concat<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The first sequence to concatenate.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to concatenate to the first sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the concatenated elements of the two input sequences.
  id: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4318
  summary: >-
    This Concat overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Concat<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4348
  summary: >-
    Determines whether two parallel sequences are equal by comparing the elements by using

    the default equality comparer for their type.
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to compare to second.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to compare to the first input sequence.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the two source sequences are of equal length and their corresponding elements

        are equal according to the default equality comparer for their type; otherwise, false.
  id: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4370
  summary: >-
    This SequenceEqual overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4397
  summary: >-
    Determines whether two parallel sequences are equal by comparing their elements by

    using a specified IEqualityComparer{T}.
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to compare to .
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to compare to the first input sequence.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to use to compare elements.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        true if the two source sequences are of equal length and their corresponding

        elements are equal according to the default equality comparer for their type; otherwise, false.
  id: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4491
  summary: >-
    This SequenceEqual overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Distinct<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4511
  summary: >-
    Returns distinct elements from a parallel sequence by using the

    default equality comparer to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Distinct<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to remove duplicate elements from.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains distinct elements from the source sequence.
  id: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4528
  summary: >-
    Returns distinct elements from a parallel sequence by using a specified

    IEqualityComparer{T} to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Distinct<TSource>(ParallelQuery<TSource> source, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to remove duplicate elements from.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare values.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains distinct elements from the source sequence.
  id: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4550
  summary: Produces the set union of two parallel sequences by using the default equality comparer.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements form the first set for the union.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements form the second set for the union.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the elements from both input sequences, excluding duplicates.
  id: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4571
  summary: >-
    This Union overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4589
  summary: Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements form the first set for the union.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements form the second set for the union.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare values.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the elements from both input sequences, excluding duplicates.
  id: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4614
  summary: >-
    This Union overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Union<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4640
  summary: >-
    Produces the set intersection of two parallel sequences by using the

    default equality comparer to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements that also appear in  will be returned.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements that also appear in the first sequence will be returned.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  id: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4661
  summary: >-
    This Intersect overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4684
  summary: >-
    Produces the set intersection of two parallel sequences by using

    the specified IEqualityComparer{T} to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements that also appear in  will be returned.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose distinct elements that also appear in the first sequence will be returned.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare values.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  id: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4709
  summary: >-
    This Intersect overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Intersect<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4737
  summary: >-
    Produces the set difference of two parallel sequences by using

    the default equality comparer to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements that are not also in  will be returned.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence whose elements that also occur in the first sequence will cause those

        elements to be removed from the returned sequence.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the set difference of the elements of two sequences.
  id: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4758
  summary: >-
    This Except overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4780
  summary: >-
    Produces the set difference of two parallel sequences by using the

    specified IEqualityComparer{T} to compare values.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements that are not also in  will be returned.
    - id: second
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: >-
        A sequence whose elements that also occur in the first sequence will cause those elements

        to be removed from the returned sequence.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare values.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains the set difference of the elements of two sequences.
  id: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4805
  summary: >-
    This Except overload should never be called.

    This method is marked as obsolete and always throws [System.NotSupportedException]() when called.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Except<TSource>(ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    parameters:
    - id: first
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This parameter is not used.
    - id: second
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: This parameter is not used.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
      description: This parameter is not used.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: This overload always throws a [System.NotSupportedException]().
  id: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: AsEnumerable<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4831
  summary: >-
    Converts a [System.Linq.ParallelQuery`1](System.Linq.ParallelQuery`1.yml) into an

    [System.Collections.Generic.IEnumerable`1]() to force sequential

    evaluation of the query.
  syntax:
    content:
      CSharp: public static IEnumerable<TSource> AsEnumerable<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to type as [System.Collections.Generic.IEnumerable`1]().
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: The input sequence types as [System.Collections.Generic.IEnumerable`1]().
  id: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: ToArray<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4856
  summary: Creates an array from a ParallelQuery{T}.
  syntax:
    content:
      CSharp: public static TSource[] ToArray<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create an array from.
    return:
      type:
        id: System.Array
        name: TSource[]
        isExternal: true
      description: An array that contains the elements from the input sequence.
  id: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: ToList<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToList<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4890
  summary: Creates a List{T} from an ParallelQuery{T}.
  syntax:
    content:
      CSharp: public static List<TSource> ToList<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create a List<(Of <(T>)>) from.
    return:
      id: List
      type:
        id: System.Collections.Generic.List{``0}
        name: List<TSource>
        isExternal: true
      description: A List<(Of <(T>)>) that contains elements from the input sequence.
  id: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4972
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to

    a specified key selector function.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create a Dictionary<(Of <(TKey, TValue>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``1,``0}
        name: Dictionary<TKey, TSource>
        isExternal: true
      description: A Dictionary<(Of <(TKey, TValue>)>) that contains keys and values.
  id: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5001
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a

    specified key selector function and key comparer.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create a Dictionary<(Of <(TKey, TValue>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare keys.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``1,``0}
        name: Dictionary<TKey, TSource>
        isExternal: true
      description: A Dictionary<(Of <(TKey, TValue>)>) that contains keys and values.
  id: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5070
  summary: >-
    Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to specified

    key selector and element selector functions.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create a Dictionary<(Of <(TKey, TValue>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: A transform function to produce a result element value from each element.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``1,``2}
        name: Dictionary<TKey, TElement>
        isExternal: true
      description: >-
        A Dictionary<(Of <(TKey, TValue>)>) that contains values of type

        selected from the input sequence
  id: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5105
  summary: >-
    Creates a Dictionary{TKey,TValue from a ParallelQuery{T} according to a

    specified key selector function, a comparer, and an element selector function.
  syntax:
    content:
      CSharp: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to create a Dictionary<(Of <(TKey, TValue>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: >-
        A transform function to produce a result element

        value from each element.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare keys.
    return:
      id: Dictionary
      type:
        id: System.Collections.Generic.Dictionary{``1,``2}
        name: Dictionary<TKey, TElement>
        isExternal: true
      description: >-
        A Dictionary<(Of <(TKey, TValue>)>) that contains values of type

        selected from the input sequence
  id: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5169
  summary: Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function.
  syntax:
    content:
      CSharp: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to create a Lookup<(Of <(TKey, TElement>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    return:
      id: ILookup
      type:
        id: ILookup{``1,``0}
        name: ILookup<TKey, TSource>
        isExternal: true
      description: A Lookup<(Of <(TKey, TElement>)>) that contains keys and values.
  id: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5194
  summary: >-
    Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified

    key selector function and key comparer.
  syntax:
    content:
      CSharp: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to create a Lookup<(Of <(TKey, TElement>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare keys.
    return:
      id: ILookup
      type:
        id: ILookup{``1,``0}
        name: ILookup<TKey, TSource>
        isExternal: true
      description: A Lookup<(Of <(TKey, TElement>)>) that contains keys and values.
  id: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5248
  summary: >-
    Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to specified

    key selector and element selector functions.
  syntax:
    content:
      CSharp: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to create a Lookup<(Of <(TKey, TElement>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: A transform function to produce a result element value from each element.
    return:
      id: ILookup
      type:
        id: ILookup{``1,``2}
        name: ILookup<TKey, TElement>
        isExternal: true
      description: >-
        A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement

        selected from the input sequence.
  id: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.ParallelEnumerable.yml
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5280
  summary: >-
    Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to

    a specified key selector function, a comparer and an element selector function.
  syntax:
    content:
      CSharp: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to create a Lookup<(Of <(TKey, TElement>)>) from.
    - id: keySelector
      type:
        id: System.Func{``0,``1}
        name: Func<TSource, TKey>
        isExternal: true
      description: A function to extract a key from each element.
    - id: elementSelector
      type:
        id: System.Func{``0,``2}
        name: Func<TSource, TElement>
        isExternal: true
      description: A transform function to produce a result element value from each element.
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
      description: An IEqualityComparer<(Of <(T>)>) to compare keys.
    return:
      id: ILookup
      type:
        id: ILookup{``1,``2}
        name: ILookup<TKey, TElement>
        isExternal: true
      description: >-
        A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement selected

        from the input sequence.
  id: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Reverse<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5327
  summary: Inverts the order of the elements in a parallel sequence.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> Reverse<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence of values to reverse.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence whose elements correspond to those of the input sequence in reverse order.
  id: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  href: System.Linq.ParallelEnumerable.yml
  name: OfType<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.OfType<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5348
  summary: Filters the elements of a ParallelQuery based on a specified type.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> OfType<TResult>(ParallelQuery source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery
        name: ParallelQuery
        href: System.Linq.ParallelQuery.yml
      description: The sequence whose elements to filter.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains elements from the input sequence of type .
  id: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
- uid: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  href: System.Linq.ParallelEnumerable.yml
  name: Cast<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.Cast<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5366
  summary: Converts the elements of a ParallelQuery to the specified type.
  syntax:
    content:
      CSharp: public static ParallelQuery<TResult> Cast<TResult>(ParallelQuery source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery
        name: ParallelQuery
        href: System.Linq.ParallelQuery.yml
      description: The sequence that contains the elements to be converted.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TResult>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains each element of the source sequence converted to the specified type.
  id: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: First<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5450
  summary: Returns the first element of a parallel sequence.
  syntax:
    content:
      CSharp: public static TSource First<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the first element of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The first element in the specified sequence.
  id: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: First<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5493
  summary: Returns the first element in a parallel sequence that satisfies a specified condition.
  syntax:
    content:
      CSharp: public static TSource First<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return an element from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The first element in the sequence that passes the test in the specified predicate function.
  id: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5532
  summary: >-
    Returns the first element of a parallel sequence, or a default value if the

    sequence contains no elements.
  syntax:
    content:
      CSharp: public static TSource FirstOrDefault<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the first element of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: default(TSource) if  is empty; otherwise, the first element in .
  id: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5578
  summary: >-
    Returns the first element of the parallel sequence that satisfies a condition or a

    default value if no such element is found.
  syntax:
    content:
      CSharp: public static TSource FirstOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return an element from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: >-
        default(TSource) if  is empty or if no element passes the test

        specified by predicate; otherwise, the first element in  that

        passes the test specified by predicate.
  id: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Last<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5626
  summary: Returns the last element of a parallel sequence.
  syntax:
    content:
      CSharp: public static TSource Last<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the last element from.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The value at the last position in the source sequence.
  id: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Last<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5669
  summary: Returns the last element of a parallel sequence that satisfies a specified condition.
  syntax:
    content:
      CSharp: public static TSource Last<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return an element from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The last element in the sequence that passes the test in the specified predicate function.
  id: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: LastOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5710
  summary: >-
    Returns the last element of a parallel sequence, or a default value if the

    sequence contains no elements.
  syntax:
    content:
      CSharp: public static TSource LastOrDefault<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return an element from.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: default() if the source sequence is empty; otherwise, the last element in the sequence.
  id: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5752
  summary: >-
    Returns the last element of a parallel sequence that satisfies a condition, or

    a default value if no such element is found.
  syntax:
    content:
      CSharp: public static TSource LastOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return an element from.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test each element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: >-
        default() if the sequence is empty or if no elements pass the test in the

        predicate function; otherwise, the last element that passes the test in the predicate function.
  id: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: Single<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5800
  summary: >-
    Returns the only element of a parallel sequence, and throws an exception if there is not

    exactly one element in the sequence.
  syntax:
    content:
      CSharp: public static TSource Single<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the single element of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The single element of the input sequence.
  id: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: Single<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5829
  summary: >-
    Returns the only element of a parallel sequence that satisfies a specified condition,

    and throws an exception if more than one such element exists.
  syntax:
    content:
      CSharp: public static TSource Single<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the single element of.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test an element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The single element of the input sequence that satisfies a condition.
  id: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5856
  summary: >-
    Returns the only element of a parallel sequence, or a default value if the sequence is

    empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content:
      CSharp: public static TSource SingleOrDefault<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the single element of.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: >-
        The single element of the input sequence, or default() if the

        sequence contains no elements.
  id: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  href: System.Linq.ParallelEnumerable.yml
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, bool>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, bool>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5886
  summary: >-
    Returns the only element of a parallel sequence that satisfies a specified condition

    or a default value if no such element exists; this method throws an exception

    if more than one element satisfies the condition.
  syntax:
    content:
      CSharp: public static TSource SingleOrDefault<TSource>(ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the single element of.
    - id: predicate
      type:
        id: System.Func{``0,System.Boolean}
        name: Func<TSource, bool>
        isExternal: true
      description: A function to test an element for a condition.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: >-
        The single element of the input sequence that satisfies the condition, or

        default() if no such element is found.
  id: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  href: System.Linq.ParallelEnumerable.yml
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5911
  summary: >-
    Returns the elements of the specified parallel sequence or the type parameter's

    default value in a singleton collection if the sequence is empty.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(ParallelQuery<TSource> source)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return a default value for if it is empty.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains default(TSource) if  is empty; otherwise, .
  id: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  href: System.Linq.ParallelEnumerable.yml
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5929
  summary: >-
    Returns the elements of the specified parallel sequence or the specified value

    in a singleton collection if the sequence is empty.
  syntax:
    content:
      CSharp: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(ParallelQuery<TSource> source, TSource defaultValue)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: The sequence to return the specified value for if it is empty.
    - id: defaultValue
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The value to return if the sequence is empty.
    return:
      id: ParallelQuery
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence that contains defaultValue if  is empty; otherwise, .
  id: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
- uid: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: ElementAt<TSource>(ParallelQuery<TSource>, int)
  fullName: System.Linq.ParallelEnumerable.ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5960
  summary: Returns the element at a specified index in a parallel sequence.
  syntax:
    content:
      CSharp: public static TSource ElementAt<TSource>(ParallelQuery<TSource> source, int index)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to return an element from.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index of the element to retrieve.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: The element at the specified position in the source sequence.
  id: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
- uid: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  href: System.Linq.ParallelEnumerable.yml
  name: ElementAtOrDefault<TSource>(ParallelQuery<TSource>, int)
  fullName: System.Linq.ParallelEnumerable.ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5999
  summary: >-
    Returns the element at a specified index in a parallel sequence or a default value if the

    index is out of range.
  syntax:
    content:
      CSharp: public static TSource ElementAtOrDefault<TSource>(ParallelQuery<TSource> source, int index)
    parameters:
    - id: source
      type:
        id: System.Linq.ParallelQuery{``0}
        name: ParallelQuery<TSource>
        href: System.Linq.ParallelQuery{``0}
      description: A sequence to return an element from.
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The zero-based index of the element to retrieve.
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
      description: >-
        default(TSource) if the index is outside the bounds of the source sequence;

        otherwise, the element at the specified position in the source sequence.
  id: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
