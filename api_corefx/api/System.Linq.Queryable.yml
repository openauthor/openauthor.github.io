items:
- uid: System.Linq.Queryable
  href: System.Linq.Queryable.yml
  name: Queryable
  fullName: System.Linq.Queryable
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 10
  syntax:
    content:
      CSharp: public class Queryable
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Linq.Queryable
  children:
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.OfType``1(IQueryable)
  - System.Linq.Queryable.Cast``1(IQueryable)
  - System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
  - System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
  - System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Take``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Skip``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
  - System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.Distinct``1(IQueryable{``0})
  - System.Linq.Queryable.Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.First``1(IQueryable{``0})
  - System.Linq.Queryable.First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Last``1(IQueryable{``0})
  - System.Linq.Queryable.Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LastOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Single``1(IQueryable{``0})
  - System.Linq.Queryable.Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0})
  - System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.ElementAt``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.ElementAtOrDefault``1(IQueryable{``0},System.Int32)
  - System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0})
  - System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Reverse``1(IQueryable{``0})
  - System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Any``1(IQueryable{``0})
  - System.Linq.Queryable.Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Count``1(IQueryable{``0})
  - System.Linq.Queryable.Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LongCount``1(IQueryable{``0})
  - System.Linq.Queryable.LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Min``1(IQueryable{``0})
  - System.Linq.Queryable.Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Max``1(IQueryable{``0})
  - System.Linq.Queryable.Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Sum(IQueryable{System.Int32})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Sum(IQueryable{System.Int64})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Sum(IQueryable{System.Single})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Sum(IQueryable{System.Double})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Sum(IQueryable{System.Decimal})
  - System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Average(IQueryable{System.Int32})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Average(IQueryable{System.Int64})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Average(IQueryable{System.Single})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Average(IQueryable{System.Double})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Average(IQueryable{System.Decimal})
  - System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
  - System.Linq.Queryable.Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
  - System.Linq.Queryable.Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 12
  syntax:
    content:
      CSharp: public static IQueryable<TElement> AsQueryable<TElement>(IEnumerable<TElement> source)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TElement>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TElement>
        isExternal: true
  id: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  href: System.Linq.Queryable.yml
  name: AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 21
  syntax:
    content:
      CSharp: public static IQueryable AsQueryable(IEnumerable source)
    parameters:
    - id: source
      type:
        id: System.Collections.IEnumerable
        name: IEnumerable
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable
        name: IQueryable
        isExternal: true
  id: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 33
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, int, bool>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 47
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Int32,System.Boolean}}
        name: Expression<Func<TSource, int, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Where``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
- uid: System.Linq.Queryable.OfType``1(IQueryable)
  href: System.Linq.Queryable.yml
  name: OfType<TResult>(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(IQueryable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 61
  syntax:
    content:
      CSharp: public static IQueryable<TResult> OfType<TResult>(IQueryable source)
    parameters:
    - id: source
      type:
        id: IQueryable
        name: IQueryable
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.OfType``1(IQueryable)
- uid: System.Linq.Queryable.Cast``1(IQueryable)
  href: System.Linq.Queryable.yml
  name: Cast<TResult>(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(IQueryable)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 73
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Cast<TResult>(IQueryable source)
    parameters:
    - id: source
      type:
        id: IQueryable
        name: IQueryable
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Cast``1(IQueryable)
- uid: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 85
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Select<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``1}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
  href: System.Linq.Queryable.yml
  name: Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, int, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, int, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 99
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Select<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, TResult>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int32,``1}}
        name: Expression<Func<TSource, int, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``1}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Select``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,``1}})
- uid: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 113
  syntax:
    content:
      CSharp: public static IQueryable<TResult> SelectMany<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
        name: Expression<Func<TSource, IEnumerable<TResult>>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``1}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
- uid: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, int, IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 127
  syntax:
    content:
      CSharp: public static IQueryable<TResult> SelectMany<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, IEnumerable<TResult>>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}}
        name: Expression<Func<TSource, int, IEnumerable<TResult>>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``1}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.SelectMany``2(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
- uid: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, int, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>>>, Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 141
  syntax:
    content:
      CSharp: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(IQueryable<TSource> source, Expression<Func<TSource, int, IEnumerable<TCollection>>> collectionSelector, Expression<Func<TSource, TCollection, TResult>> resultSelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: collectionSelector
      type:
        id: Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}}
        name: Expression<Func<TSource, int, IEnumerable<TCollection>>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,``1,``2}}
        name: Expression<Func<TSource, TCollection, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``2}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
- uid: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
  href: System.Linq.Queryable.yml
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>, Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 157
  syntax:
    content:
      CSharp: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(IQueryable<TSource> source, Expression<Func<TSource, IEnumerable<TCollection>>> collectionSelector, Expression<Func<TSource, TCollection, TResult>> resultSelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: collectionSelector
      type:
        id: Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
        name: Expression<Func<TSource, IEnumerable<TCollection>>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,``1,``2}}
        name: Expression<Func<TSource, TCollection, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``2}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.SelectMany``3(IQueryable{``0},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},Expression{System.Func{``0,``1,``2}})
- uid: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
  href: System.Linq.Queryable.yml
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, TInner, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 180
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)
    parameters:
    - id: outer
      type:
        id: IQueryable{``0}
        name: IQueryable<TOuter>
        isExternal: true
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
    - id: outerKeySelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TOuter, TKey>>
        isExternal: true
    - id: innerKeySelector
      type:
        id: Expression{System.Func{``1,``2}}
        name: Expression<Func<TInner, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,``1,``3}}
        name: Expression<Func<TOuter, TInner, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}})
- uid: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.Queryable.yml
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 206
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: IQueryable{``0}
        name: IQueryable<TOuter>
        isExternal: true
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
    - id: outerKeySelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TOuter, TKey>>
        isExternal: true
    - id: innerKeySelector
      type:
        id: Expression{System.Func{``1,``2}}
        name: Expression<Func<TInner, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,``1,``3}}
        name: Expression<Func<TOuter, TInner, TResult>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Join``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  href: System.Linq.Queryable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 233
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    parameters:
    - id: outer
      type:
        id: IQueryable{``0}
        name: IQueryable<TOuter>
        isExternal: true
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
    - id: outerKeySelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TOuter, TKey>>
        isExternal: true
    - id: innerKeySelector
      type:
        id: Expression{System.Func{``1,``2}}
        name: Expression<Func<TInner, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}}
        name: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
- uid: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  href: System.Linq.Queryable.yml
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, Expression<System.Func<TOuter, TKey>>, Expression<System.Func<TInner, TKey>>, Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 258
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type:
        id: IQueryable{``0}
        name: IQueryable<TOuter>
        isExternal: true
    - id: inner
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TInner>
        isExternal: true
    - id: outerKeySelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TOuter, TKey>>
        isExternal: true
    - id: innerKeySelector
      type:
        id: Expression{System.Func{``1,``2}}
        name: Expression<Func<TInner, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}}
        name: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``2}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupJoin``4(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``2}},Expression{System.Func{``1,``2}},Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 284
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  href: System.Linq.Queryable.yml
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 298
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.OrderBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 312
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  href: System.Linq.Queryable.yml
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 326
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.OrderByDescending``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 340
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  href: System.Linq.Queryable.yml
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 354
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.ThenBy``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 368
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  href: System.Linq.Queryable.yml
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 382
  syntax:
    content:
      CSharp: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IComparer{``1}
        name: IComparer<TKey>
        isExternal: true
    return:
      id: IOrderedQueryable
      type:
        id: IOrderedQueryable{``0}
        name: IOrderedQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.ThenByDescending``2(IOrderedQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Queryable.Take``1(IQueryable{``0},System.Int32)
  href: System.Linq.Queryable.yml
  name: Take<TSource>(IQueryable<TSource>, int)
  fullName: System.Linq.Queryable.Take<TSource>(IQueryable<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 396
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Take<TSource>(IQueryable<TSource> source, int count)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Take``1(IQueryable{``0},System.Int32)
- uid: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 408
  syntax:
    content:
      CSharp: public static IQueryable<TSource> TakeWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, int, bool>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 422
  syntax:
    content:
      CSharp: public static IQueryable<TSource> TakeWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Int32,System.Boolean}}
        name: Expression<Func<TSource, int, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.TakeWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
- uid: System.Linq.Queryable.Skip``1(IQueryable{``0},System.Int32)
  href: System.Linq.Queryable.yml
  name: Skip<TSource>(IQueryable<TSource>, int)
  fullName: System.Linq.Queryable.Skip<TSource>(IQueryable<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 436
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Skip<TSource>(IQueryable<TSource> source, int count)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Skip``1(IQueryable{``0},System.Int32)
- uid: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 448
  syntax:
    content:
      CSharp: public static IQueryable<TSource> SkipWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource, int, bool>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 462
  syntax:
    content:
      CSharp: public static IQueryable<TSource> SkipWhile<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Int32,System.Boolean}}
        name: Expression<Func<TSource, int, bool>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.SkipWhile``1(IQueryable{``0},Expression{System.Func{``0,System.Int32,System.Boolean}})
- uid: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 476
  syntax:
    content:
      CSharp: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{IGrouping{``1,``0}}
        name: IQueryable<IGrouping<TKey, TSource>>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 490
  syntax:
    content:
      CSharp: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: elementSelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TSource, TElement>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{IGrouping{``1,``2}}
        name: IQueryable<IGrouping<TKey, TElement>>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}})
- uid: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 506
  syntax:
    content:
      CSharp: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{IGrouping{``1,``0}}
        name: IQueryable<IGrouping<TKey, TSource>>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``2(IQueryable{``0},Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 520
  syntax:
    content:
      CSharp: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: elementSelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TSource, TElement>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{IGrouping{``1,``2}}
        name: IQueryable<IGrouping<TKey, TElement>>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 536
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: elementSelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TSource, TElement>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}}
        name: Expression<Func<TKey, IEnumerable<TElement>, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 554
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}}
        name: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``2}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
- uid: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 570
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}}
        name: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``2}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``3(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  href: System.Linq.Queryable.yml
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TSource, TElement>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TKey>>, Expression<System.Func<TSource, TElement>>, Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 586
  syntax:
    content:
      CSharp: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: keySelector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TKey>>
        isExternal: true
    - id: elementSelector
      type:
        id: Expression{System.Func{``0,``2}}
        name: Expression<Func<TSource, TElement>>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}}
        name: Expression<Func<TKey, IEnumerable<TElement>, TResult>>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``1}
        name: IEqualityComparer<TKey>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``3}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.GroupBy``4(IQueryable{``0},Expression{System.Func{``0,``1}},Expression{System.Func{``0,``2}},Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Queryable.Distinct``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Distinct<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 604
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Distinct<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Distinct``1(IQueryable{``0})
- uid: System.Linq.Queryable.Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 616
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Distinct<TSource>(IQueryable<TSource> source, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Distinct``1(IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Concat<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 628
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Concat<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Concat``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
  href: System.Linq.Queryable.yml
  name: Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst, TSecond, TResult>>)
  fullName: System.Linq.Queryable.Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, Expression<System.Func<TFirst, TSecond, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 642
  syntax:
    content:
      CSharp: public static IQueryable<TResult> Zip<TFirst, TSecond, TResult>(IQueryable<TFirst> source1, IEnumerable<TSecond> source2, Expression<Func<TFirst, TSecond, TResult>> resultSelector)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TFirst>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``1}
        name: IEnumerable<TSecond>
        isExternal: true
    - id: resultSelector
      type:
        id: Expression{System.Func{``0,``1,``2}}
        name: Expression<Func<TFirst, TSecond, TResult>>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``2}
        name: IQueryable<TResult>
        isExternal: true
  id: System.Linq.Queryable.Zip``3(IQueryable{``0},System.Collections.Generic.IEnumerable{``1},Expression{System.Func{``0,``1,``2}})
- uid: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 658
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Union<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 672
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Union<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Union``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 690
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Intersect<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 704
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Intersect<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Intersect``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 722
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Except<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 736
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Except<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Except``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.First``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: First<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 754
  syntax:
    content:
      CSharp: public static TSource First<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.First``1(IQueryable{``0})
- uid: System.Linq.Queryable.First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: First<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 766
  syntax:
    content:
      CSharp: public static TSource First<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.First``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 780
  syntax:
    content:
      CSharp: public static TSource FirstOrDefault<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0})
- uid: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 792
  syntax:
    content:
      CSharp: public static TSource FirstOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.FirstOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.Last``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Last<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 806
  syntax:
    content:
      CSharp: public static TSource Last<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Last``1(IQueryable{``0})
- uid: System.Linq.Queryable.Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Last<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 818
  syntax:
    content:
      CSharp: public static TSource Last<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Last``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 832
  syntax:
    content:
      CSharp: public static TSource LastOrDefault<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0})
- uid: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 844
  syntax:
    content:
      CSharp: public static TSource LastOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.LastOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.Single``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Single<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 858
  syntax:
    content:
      CSharp: public static TSource Single<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Single``1(IQueryable{``0})
- uid: System.Linq.Queryable.Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Single<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 870
  syntax:
    content:
      CSharp: public static TSource Single<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Single``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 884
  syntax:
    content:
      CSharp: public static TSource SingleOrDefault<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0})
- uid: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 896
  syntax:
    content:
      CSharp: public static TSource SingleOrDefault<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.SingleOrDefault``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.ElementAt``1(IQueryable{``0},System.Int32)
  href: System.Linq.Queryable.yml
  name: ElementAt<TSource>(IQueryable<TSource>, int)
  fullName: System.Linq.Queryable.ElementAt<TSource>(IQueryable<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 910
  syntax:
    content:
      CSharp: public static TSource ElementAt<TSource>(IQueryable<TSource> source, int index)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.ElementAt``1(IQueryable{``0},System.Int32)
- uid: System.Linq.Queryable.ElementAtOrDefault``1(IQueryable{``0},System.Int32)
  href: System.Linq.Queryable.yml
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, int)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, int)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 924
  syntax:
    content:
      CSharp: public static TSource ElementAtOrDefault<TSource>(IQueryable<TSource> source, int index)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.ElementAtOrDefault``1(IQueryable{``0},System.Int32)
- uid: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 936
  syntax:
    content:
      CSharp: public static IQueryable<TSource> DefaultIfEmpty<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0})
- uid: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0},``0)
  href: System.Linq.Queryable.yml
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 948
  syntax:
    content:
      CSharp: public static IQueryable<TSource> DefaultIfEmpty<TSource>(IQueryable<TSource> source, TSource defaultValue)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: defaultValue
      type:
        id: TSource
        name: TSource
        href: TSource
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.DefaultIfEmpty``1(IQueryable{``0},``0)
- uid: System.Linq.Queryable.Contains``1(IQueryable{``0},``0)
  href: System.Linq.Queryable.yml
  name: Contains<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>, TSource)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 960
  syntax:
    content:
      CSharp: public static bool Contains<TSource>(IQueryable<TSource> source, TSource item)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: item
      type:
        id: TSource
        name: TSource
        href: TSource
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.Contains``1(IQueryable{``0},``0)
- uid: System.Linq.Queryable.Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 972
  syntax:
    content:
      CSharp: public static bool Contains<TSource>(IQueryable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: item
      type:
        id: TSource
        name: TSource
        href: TSource
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.Contains``1(IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.Reverse``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Reverse<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Reverse<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 984
  syntax:
    content:
      CSharp: public static IQueryable<TSource> Reverse<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: IQueryable
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
  id: System.Linq.Queryable.Reverse``1(IQueryable{``0})
- uid: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  href: System.Linq.Queryable.yml
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 996
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  href: System.Linq.Queryable.yml
  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1010
  syntax:
    content:
      CSharp: public static bool SequenceEqual<TSource>(IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source1
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: source2
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
    - id: comparer
      type:
        id: System.Collections.Generic.IEqualityComparer{``0}
        name: IEqualityComparer<TSource>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.SequenceEqual``1(IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Queryable.Any``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Any<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1028
  syntax:
    content:
      CSharp: public static bool Any<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.Any``1(IQueryable{``0})
- uid: System.Linq.Queryable.Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Any<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1040
  syntax:
    content:
      CSharp: public static bool Any<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.Any``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: All<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.All<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1054
  syntax:
    content:
      CSharp: public static bool All<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Linq.Queryable.All``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.Count``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Count<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1068
  syntax:
    content:
      CSharp: public static int Count<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Linq.Queryable.Count``1(IQueryable{``0})
- uid: System.Linq.Queryable.Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: Count<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1080
  syntax:
    content:
      CSharp: public static int Count<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Linq.Queryable.Count``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.LongCount``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: LongCount<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1094
  syntax:
    content:
      CSharp: public static long LongCount<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Linq.Queryable.LongCount``1(IQueryable{``0})
- uid: System.Linq.Queryable.LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
  href: System.Linq.Queryable.yml
  name: LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1106
  syntax:
    content:
      CSharp: public static long LongCount<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: predicate
      type:
        id: Expression{System.Func{``0,System.Boolean}}
        name: Expression<Func<TSource, bool>>
        isExternal: true
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Linq.Queryable.LongCount``1(IQueryable{``0},Expression{System.Func{``0,System.Boolean}})
- uid: System.Linq.Queryable.Min``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Min<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Min<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1120
  syntax:
    content:
      CSharp: public static TSource Min<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Min``1(IQueryable{``0})
- uid: System.Linq.Queryable.Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: Min<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Min<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1132
  syntax:
    content:
      CSharp: public static TResult Min<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TResult>>
        isExternal: true
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
  id: System.Linq.Queryable.Min``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.Max``1(IQueryable{``0})
  href: System.Linq.Queryable.yml
  name: Max<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Max<TSource>(IQueryable<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1146
  syntax:
    content:
      CSharp: public static TSource Max<TSource>(IQueryable<TSource> source)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Max``1(IQueryable{``0})
- uid: System.Linq.Queryable.Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
  href: System.Linq.Queryable.yml
  name: Max<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Max<TSource, TResult>(IQueryable<TSource>, Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1158
  syntax:
    content:
      CSharp: public static TResult Max<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,``1}}
        name: Expression<Func<TSource, TResult>>
        isExternal: true
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
  id: System.Linq.Queryable.Max``2(IQueryable{``0},Expression{System.Func{``0,``1}})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Int32})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<int>)
  fullName: System.Linq.Queryable.Sum(IQueryable<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1172
  syntax:
    content:
      CSharp: public static int Sum(IQueryable<int> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Int32}
        name: IQueryable<int>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Int32})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int32}})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<int?>)
  fullName: System.Linq.Queryable.Sum(IQueryable<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1184
  syntax:
    content:
      CSharp: public static int ? Sum(IQueryable<int ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Int32}}
        name: IQueryable<int?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int32}})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Int64})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<long>)
  fullName: System.Linq.Queryable.Sum(IQueryable<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1196
  syntax:
    content:
      CSharp: public static long Sum(IQueryable<long> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Int64}
        name: IQueryable<long>
        isExternal: true
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Int64})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int64}})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<long?>)
  fullName: System.Linq.Queryable.Sum(IQueryable<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1208
  syntax:
    content:
      CSharp: public static long ? Sum(IQueryable<long ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Int64}}
        name: IQueryable<long?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Int64}})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Single})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<float>)
  fullName: System.Linq.Queryable.Sum(IQueryable<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1220
  syntax:
    content:
      CSharp: public static float Sum(IQueryable<float> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Single}
        name: IQueryable<float>
        isExternal: true
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Single})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Single}})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<float?>)
  fullName: System.Linq.Queryable.Sum(IQueryable<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1232
  syntax:
    content:
      CSharp: public static float ? Sum(IQueryable<float ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Single}}
        name: IQueryable<float?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Single}})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Double})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<double>)
  fullName: System.Linq.Queryable.Sum(IQueryable<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1244
  syntax:
    content:
      CSharp: public static double Sum(IQueryable<double> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Double}
        name: IQueryable<double>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Double})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Double}})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<double?>)
  fullName: System.Linq.Queryable.Sum(IQueryable<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1256
  syntax:
    content:
      CSharp: public static double ? Sum(IQueryable<double ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Double}}
        name: IQueryable<double?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Double}})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Decimal})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<decimal>)
  fullName: System.Linq.Queryable.Sum(IQueryable<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1268
  syntax:
    content:
      CSharp: public static decimal Sum(IQueryable<decimal> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Decimal}
        name: IQueryable<decimal>
        isExternal: true
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Decimal})
- uid: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Decimal}})
  href: System.Linq.Queryable.yml
  name: Sum(IQueryable<decimal?>)
  fullName: System.Linq.Queryable.Sum(IQueryable<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1280
  syntax:
    content:
      CSharp: public static decimal ? Sum(IQueryable<decimal ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Decimal}}
        name: IQueryable<decimal?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
  id: System.Linq.Queryable.Sum(IQueryable{System.Nullable{System.Decimal}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1292
  syntax:
    content:
      CSharp: public static int Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int32}}
        name: Expression<Func<TSource, int>>
        isExternal: true
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1306
  syntax:
    content:
      CSharp: public static int ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Int32}}}
        name: Expression<Func<TSource, int?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int32}
        name: int?
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, long>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1320
  syntax:
    content:
      CSharp: public static long Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int64}}
        name: Expression<Func<TSource, long>>
        isExternal: true
    return:
      id: Int64
      type:
        id: System.Int64
        name: long
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, long?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1334
  syntax:
    content:
      CSharp: public static long ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Int64}}}
        name: Expression<Func<TSource, long?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Int64}
        name: long?
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, float>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1348
  syntax:
    content:
      CSharp: public static float Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Single}}
        name: Expression<Func<TSource, float>>
        isExternal: true
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, float?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1362
  syntax:
    content:
      CSharp: public static float ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Single}}}
        name: Expression<Func<TSource, float?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, double>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1376
  syntax:
    content:
      CSharp: public static double Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Double}}
        name: Expression<Func<TSource, double>>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, double?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1390
  syntax:
    content:
      CSharp: public static double ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Double}}}
        name: Expression<Func<TSource, double?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, decimal>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1404
  syntax:
    content:
      CSharp: public static decimal Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Decimal}}
        name: Expression<Func<TSource, decimal>>
        isExternal: true
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
- uid: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  href: System.Linq.Queryable.yml
  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, decimal?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1418
  syntax:
    content:
      CSharp: public static decimal ? Sum<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Decimal}}}
        name: Expression<Func<TSource, decimal?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
  id: System.Linq.Queryable.Sum``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
- uid: System.Linq.Queryable.Average(IQueryable{System.Int32})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<int>)
  fullName: System.Linq.Queryable.Average(IQueryable<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1432
  syntax:
    content:
      CSharp: public static double Average(IQueryable<int> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Int32}
        name: IQueryable<int>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Int32})
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int32}})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<int?>)
  fullName: System.Linq.Queryable.Average(IQueryable<int?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1444
  syntax:
    content:
      CSharp: public static double ? Average(IQueryable<int ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Int32}}
        name: IQueryable<int?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int32}})
- uid: System.Linq.Queryable.Average(IQueryable{System.Int64})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<long>)
  fullName: System.Linq.Queryable.Average(IQueryable<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1456
  syntax:
    content:
      CSharp: public static double Average(IQueryable<long> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Int64}
        name: IQueryable<long>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Int64})
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int64}})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<long?>)
  fullName: System.Linq.Queryable.Average(IQueryable<long?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1468
  syntax:
    content:
      CSharp: public static double ? Average(IQueryable<long ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Int64}}
        name: IQueryable<long?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Int64}})
- uid: System.Linq.Queryable.Average(IQueryable{System.Single})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<float>)
  fullName: System.Linq.Queryable.Average(IQueryable<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1480
  syntax:
    content:
      CSharp: public static float Average(IQueryable<float> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Single}
        name: IQueryable<float>
        isExternal: true
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Single})
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Single}})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<float?>)
  fullName: System.Linq.Queryable.Average(IQueryable<float?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1492
  syntax:
    content:
      CSharp: public static float ? Average(IQueryable<float ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Single}}
        name: IQueryable<float?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Single}})
- uid: System.Linq.Queryable.Average(IQueryable{System.Double})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<double>)
  fullName: System.Linq.Queryable.Average(IQueryable<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1504
  syntax:
    content:
      CSharp: public static double Average(IQueryable<double> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Double}
        name: IQueryable<double>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Double})
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Double}})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<double?>)
  fullName: System.Linq.Queryable.Average(IQueryable<double?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1516
  syntax:
    content:
      CSharp: public static double ? Average(IQueryable<double ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Double}}
        name: IQueryable<double?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Double}})
- uid: System.Linq.Queryable.Average(IQueryable{System.Decimal})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<decimal>)
  fullName: System.Linq.Queryable.Average(IQueryable<decimal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1528
  syntax:
    content:
      CSharp: public static decimal Average(IQueryable<decimal> source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Decimal}
        name: IQueryable<decimal>
        isExternal: true
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Decimal})
- uid: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Decimal}})
  href: System.Linq.Queryable.yml
  name: Average(IQueryable<decimal?>)
  fullName: System.Linq.Queryable.Average(IQueryable<decimal?>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1540
  syntax:
    content:
      CSharp: public static decimal ? Average(IQueryable<decimal ? > source)
    parameters:
    - id: source
      type:
        id: IQueryable{System.Nullable{System.Decimal}}
        name: IQueryable<decimal?>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
  id: System.Linq.Queryable.Average(IQueryable{System.Nullable{System.Decimal}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1552
  syntax:
    content:
      CSharp: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int32}}
        name: Expression<Func<TSource, int>>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int32}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, int?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1566
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Int32}}}
        name: Expression<Func<TSource, int?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int32}}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, float>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1580
  syntax:
    content:
      CSharp: public static float Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Single}}
        name: Expression<Func<TSource, float>>
        isExternal: true
    return:
      id: Single
      type:
        id: System.Single
        name: float
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Single}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, float?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1594
  syntax:
    content:
      CSharp: public static float ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Single}}}
        name: Expression<Func<TSource, float?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Single}
        name: float?
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Single}}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, long>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1608
  syntax:
    content:
      CSharp: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Int64}}
        name: Expression<Func<TSource, long>>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Int64}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, long?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1622
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Int64}}}
        name: Expression<Func<TSource, long?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Int64}}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, double>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1636
  syntax:
    content:
      CSharp: public static double Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Double}}
        name: Expression<Func<TSource, double>>
        isExternal: true
    return:
      id: Double
      type:
        id: System.Double
        name: double
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Double}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, double?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1650
  syntax:
    content:
      CSharp: public static double ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Double}}}
        name: Expression<Func<TSource, double?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Double}
        name: double?
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Double}}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, decimal>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1664
  syntax:
    content:
      CSharp: public static decimal Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Decimal}}
        name: Expression<Func<TSource, decimal>>
        isExternal: true
    return:
      id: Decimal
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Decimal}})
- uid: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  href: System.Linq.Queryable.yml
  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, decimal?>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1678
  syntax:
    content:
      CSharp: public static decimal ? Average<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``0,System.Nullable{System.Decimal}}}
        name: Expression<Func<TSource, decimal?>>
        isExternal: true
    return:
      id: Nullable
      type:
        id: System.Nullable{System.Decimal}
        name: decimal?
        isExternal: true
  id: System.Linq.Queryable.Average``1(IQueryable{``0},Expression{System.Func{``0,System.Nullable{System.Decimal}}})
- uid: System.Linq.Queryable.Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource, TSource, TSource>>)
  fullName: System.Linq.Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<System.Func<TSource, TSource, TSource>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1692
  syntax:
    content:
      CSharp: public static TSource Aggregate<TSource>(IQueryable<TSource> source, Expression<Func<TSource, TSource, TSource>> func)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: func
      type:
        id: Expression{System.Func{``0,``0,``0}}
        name: Expression<Func<TSource, TSource, TSource>>
        isExternal: true
    return:
      id: TSource
      type:
        id: TSource
        name: TSource
        href: TSource
  id: System.Linq.Queryable.Aggregate``1(IQueryable{``0},Expression{System.Func{``0,``0,``0}})
- uid: System.Linq.Queryable.Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate, TSource, TAccumulate>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<System.Func<TAccumulate, TSource, TAccumulate>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1706
  syntax:
    content:
      CSharp: public static TAccumulate Aggregate<TSource, TAccumulate>(IQueryable<TSource> source, TAccumulate seed, Expression<Func<TAccumulate, TSource, TAccumulate>> func)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
    - id: func
      type:
        id: Expression{System.Func{``1,``0,``1}}
        name: Expression<Func<TAccumulate, TSource, TAccumulate>>
        isExternal: true
    return:
      id: TAccumulate
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
  id: System.Linq.Queryable.Aggregate``2(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}})
- uid: System.Linq.Queryable.Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
  href: System.Linq.Queryable.yml
  name: Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate, TSource, TAccumulate>>, Expression<Func<TAccumulate, TResult>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expression<System.Func<TAccumulate, TSource, TAccumulate>>, Expression<System.Func<TAccumulate, TResult>>)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 1720
  syntax:
    content:
      CSharp: public static TResult Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource> source, TAccumulate seed, Expression<Func<TAccumulate, TSource, TAccumulate>> func, Expression<Func<TAccumulate, TResult>> selector)
    parameters:
    - id: source
      type:
        id: IQueryable{``0}
        name: IQueryable<TSource>
        isExternal: true
    - id: seed
      type:
        id: TAccumulate
        name: TAccumulate
        href: TAccumulate
    - id: func
      type:
        id: Expression{System.Func{``1,``0,``1}}
        name: Expression<Func<TAccumulate, TSource, TAccumulate>>
        isExternal: true
    - id: selector
      type:
        id: Expression{System.Func{``1,``2}}
        name: Expression<Func<TAccumulate, TResult>>
        isExternal: true
    return:
      id: TResult
      type:
        id: TResult
        name: TResult
        href: TResult
  id: System.Linq.Queryable.Aggregate``3(IQueryable{``0},``1,Expression{System.Func{``1,``0,``1}},Expression{System.Func{``1,``2}})
