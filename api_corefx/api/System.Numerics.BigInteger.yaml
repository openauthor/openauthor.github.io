id: System.Numerics.BigInteger
href: System.Numerics.BigInteger.yaml
name:
  CSharp: BigInteger
qualifiedName:
  CSharp: System.Numerics.BigInteger
type: Struct
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
  startLine: 21
syntax:
  content:
    CSharp: public struct BigInteger
inheritance:
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: System.Numerics.BigInteger.Zero
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Zero
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Zero
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 63
  syntax:
    content:
      CSharp: public static BigInteger Zero { get; }
    parameters:
    - id: Zero
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
- id: System.Numerics.BigInteger.One
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: One
  qualifiedName:
    CSharp: System.Numerics.BigInteger.One
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 68
  syntax:
    content:
      CSharp: public static BigInteger One { get; }
    parameters:
    - id: One
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
- id: System.Numerics.BigInteger.MinusOne
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: MinusOne
  qualifiedName:
    CSharp: System.Numerics.BigInteger.MinusOne
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 73
  syntax:
    content:
      CSharp: public static BigInteger MinusOne { get; }
    parameters:
    - id: MinusOne
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
- id: System.Numerics.BigInteger.IsPowerOfTwo
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: IsPowerOfTwo
  qualifiedName:
    CSharp: System.Numerics.BigInteger.IsPowerOfTwo
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 78
  syntax:
    content:
      CSharp: public bool IsPowerOfTwo { get; }
    parameters:
    - id: IsPowerOfTwo
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Numerics.BigInteger.IsZero
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: IsZero
  qualifiedName:
    CSharp: System.Numerics.BigInteger.IsZero
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 101
  syntax:
    content:
      CSharp: public bool IsZero { get; }
    parameters:
    - id: IsZero
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Numerics.BigInteger.IsOne
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: IsOne
  qualifiedName:
    CSharp: System.Numerics.BigInteger.IsOne
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 103
  syntax:
    content:
      CSharp: public bool IsOne { get; }
    parameters:
    - id: IsOne
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Numerics.BigInteger.IsEven
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: IsEven
  qualifiedName:
    CSharp: System.Numerics.BigInteger.IsEven
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 105
  syntax:
    content:
      CSharp: public bool IsEven { get; }
    parameters:
    - id: IsEven
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Numerics.BigInteger.Sign
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Sign
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Sign
  type: Property
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 107
  syntax:
    content:
      CSharp: public int Sign { get; }
    parameters:
    - id: Sign
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Numerics.BigInteger.Equals(System.Object)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 118
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.GetHashCode
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: System.Numerics.BigInteger.GetHashCode
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 127
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
- id: System.Numerics.BigInteger.Equals(Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Equals(Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 139
  syntax:
    content:
      CSharp: public bool Equals(Int64 other)
    parameters:
    - id: other
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.Equals(UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Equals(UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 157
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public bool Equals(UInt64 other)'
    parameters:
    - id: other
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 175
  syntax:
    content:
      CSharp: public bool Equals(BigInteger other)
    parameters:
    - id: other
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.CompareTo(Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: CompareTo
  qualifiedName:
    CSharp: System.Numerics.BigInteger.CompareTo(Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 195
  syntax:
    content:
      CSharp: public int CompareTo(Int64 other)
    parameters:
    - id: other
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Int32
- id: System.Numerics.BigInteger.CompareTo(UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: CompareTo
  qualifiedName:
    CSharp: System.Numerics.BigInteger.CompareTo(UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 209
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public int CompareTo(UInt64 other)'
    parameters:
    - id: other
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Int32
- id: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: CompareTo
  qualifiedName:
    CSharp: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 225
  syntax:
    content:
      CSharp: public int CompareTo(BigInteger other)
    parameters:
    - id: other
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Int32
- id: System.Numerics.BigInteger.ToByteArray
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ToByteArray
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ToByteArray
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 268
  syntax:
    content:
      CSharp: public byte[] ToByteArray()
    parameters: []
    return: {}
- id: System.Numerics.BigInteger.ToString
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ToString
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 370
  syntax:
    content:
      CSharp: public override String ToString()
    parameters: []
    return:
      id: String
- id: System.Numerics.BigInteger.ToString(IFormatProvider)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ToString(IFormatProvider)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 375
  syntax:
    content:
      CSharp: public String ToString(IFormatProvider provider)
    parameters:
    - id: provider
      type:
        id: IFormatProvider
        name: IFormatProvider
        isExternal: true
    return:
      id: String
- id: System.Numerics.BigInteger.ToString(String)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ToString(String)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 380
  syntax:
    content:
      CSharp: public String ToString(String format)
    parameters:
    - id: format
      type:
        id: String
        name: String
        isExternal: true
    return:
      id: String
- id: System.Numerics.BigInteger.ToString(String,IFormatProvider)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ToString
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ToString(String,IFormatProvider)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 385
  syntax:
    content:
      CSharp: public String ToString(String format, IFormatProvider provider)
    parameters:
    - id: format
      type:
        id: String
        name: String
        isExternal: true
    - id: provider
      type:
        id: IFormatProvider
        name: IFormatProvider
        isExternal: true
    return:
      id: String
- id: System.Numerics.BigInteger.#ctor(System.Int32)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(System.Int32)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 393
  syntax:
    content:
      CSharp: public BigInteger(int value)
    parameters:
    - id: value
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(System.UInt32)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(System.UInt32)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(System.UInt32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 405
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public BigInteger(uint value)'
    parameters:
    - id: value
      type:
        id: System.UInt32
        name: System.UInt32
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(Int64)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(Int64)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 422
  syntax:
    content:
      CSharp: public BigInteger(Int64 value)
    parameters:
    - id: value
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(UInt64)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(UInt64)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 456
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public BigInteger(UInt64 value)'
    parameters:
    - id: value
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(Single)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(Single)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(Single)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 474
  syntax:
    content:
      CSharp: public BigInteger(Single value)
    parameters:
    - id: value
      type:
        id: Single
        name: Single
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(Double)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(Double)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(Double)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 488
  syntax:
    content:
      CSharp: public BigInteger(Double value)
    parameters:
    - id: value
      type:
        id: Double
        name: Double
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(Decimal)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(Decimal)
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(Decimal)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 502
  syntax:
    content:
      CSharp: public BigInteger(Decimal value)
    parameters:
    - id: value
      type:
        id: Decimal
        name: Decimal
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.#ctor(Byte[])
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: BigInteger(Byte[])
  qualifiedName:
    CSharp: System.Numerics.BigInteger.BigInteger(Byte[])
  type: Constructor
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 537
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] // // Create a BigInteger from a little-endian twos-complement byte array // public BigInteger(Byte[] value)'
    parameters:
    - id: value
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: Void
- id: System.Numerics.BigInteger.Parse(String)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Parse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Parse(String)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 837
  syntax:
    content:
      CSharp: public static BigInteger Parse(String value)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Parse(String,NumberStyles)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Parse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Parse(String,NumberStyles)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 842
  syntax:
    content:
      CSharp: public static BigInteger Parse(String value, NumberStyles style)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    - id: style
      type:
        id: NumberStyles
        name: NumberStyles
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Parse(String,IFormatProvider)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Parse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Parse(String,IFormatProvider)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 847
  syntax:
    content:
      CSharp: public static BigInteger Parse(String value, IFormatProvider provider)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    - id: provider
      type:
        id: IFormatProvider
        name: IFormatProvider
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Parse(String,NumberStyles,IFormatProvider)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Parse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Parse(String,NumberStyles,IFormatProvider)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 852
  syntax:
    content:
      CSharp: public static BigInteger Parse(String value, NumberStyles style, IFormatProvider provider)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    - id: style
      type:
        id: NumberStyles
        name: NumberStyles
        isExternal: true
    - id: provider
      type:
        id: IFormatProvider
        name: IFormatProvider
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.TryParse(String,System.Numerics.BigInteger@)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: TryParse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.TryParse(String,System.Numerics.BigInteger@)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 857
  syntax:
    content:
      CSharp: public static Boolean TryParse(String value, out BigInteger result)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    - id: result
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.TryParse(String,NumberStyles,IFormatProvider,System.Numerics.BigInteger@)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: TryParse
  qualifiedName:
    CSharp: System.Numerics.BigInteger.TryParse(String,NumberStyles,IFormatProvider,System.Numerics.BigInteger@)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 862
  syntax:
    content:
      CSharp: public static Boolean TryParse(String value, NumberStyles style, IFormatProvider provider, out BigInteger result)
    parameters:
    - id: value
      type:
        id: String
        name: String
        isExternal: true
    - id: style
      type:
        id: NumberStyles
        name: NumberStyles
        isExternal: true
    - id: provider
      type:
        id: IFormatProvider
        name: IFormatProvider
        isExternal: true
    - id: result
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Compare
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 867
  syntax:
    content:
      CSharp: public static Int32 Compare(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Int32
- id: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Abs
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 872
  syntax:
    content:
      CSharp: public static BigInteger Abs(BigInteger value)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Add
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 877
  syntax:
    content:
      CSharp: public static BigInteger Add(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Subtract
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 882
  syntax:
    content:
      CSharp: public static BigInteger Subtract(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Multiply
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 887
  syntax:
    content:
      CSharp: public static BigInteger Multiply(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Divide
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 892
  syntax:
    content:
      CSharp: public static BigInteger Divide(BigInteger dividend, BigInteger divisor)
    parameters:
    - id: dividend
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: divisor
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Remainder
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 897
  syntax:
    content:
      CSharp: public static BigInteger Remainder(BigInteger dividend, BigInteger divisor)
    parameters:
    - id: dividend
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: divisor
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: DivRem
  qualifiedName:
    CSharp: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 902
  syntax:
    content:
      CSharp: public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, out BigInteger remainder)
    parameters:
    - id: dividend
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: divisor
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: remainder
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Negate
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 920
  syntax:
    content:
      CSharp: public static BigInteger Negate(BigInteger value)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Log
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 926
  syntax:
    content:
      CSharp: public static Double Log(BigInteger value)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Double
- id: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,Double)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Log
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,Double)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 932
  syntax:
    content:
      CSharp: public static Double Log(BigInteger value, Double baseValue)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: baseValue
      type:
        id: Double
        name: Double
        isExternal: true
    return:
      id: Double
- id: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Log10
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 966
  syntax:
    content:
      CSharp: public static Double Log10(BigInteger value)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Double
- id: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: GreatestCommonDivisor
  qualifiedName:
    CSharp: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 971
  syntax:
    content:
      CSharp: public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Max
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 988
  syntax:
    content:
      CSharp: public static BigInteger Max(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Min
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 995
  syntax:
    content:
      CSharp: public static BigInteger Min(BigInteger left, BigInteger right)
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: ModPow
  qualifiedName:
    CSharp: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1041
  syntax:
    content:
      CSharp: public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: exponent
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: modulus
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,Int32)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: Pow
  qualifiedName:
    CSharp: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1080
  syntax:
    content:
      CSharp: public static BigInteger Pow(BigInteger value, Int32 exponent)
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: exponent
      type:
        id: Int32
        name: Int32
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(Byte)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(Byte)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1164
  syntax:
    content:
      CSharp: public static implicit operator BigInteger(Byte value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: Byte
        name: Byte
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(SByte)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(SByte)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1169
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static implicit operator BigInteger(SByte value) { return new BigInteger(value); }'
    parameters:
    - id: value
      type:
        id: SByte
        name: SByte
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(Int16)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(Int16)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1175
  syntax:
    content:
      CSharp: public static implicit operator BigInteger(Int16 value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: Int16
        name: Int16
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(UInt16)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(UInt16)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1180
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static implicit operator BigInteger(UInt16 value) { return new BigInteger(value); }'
    parameters:
    - id: value
      type:
        id: UInt16
        name: UInt16
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1187
  syntax:
    content:
      CSharp: public static implicit operator BigInteger(int value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1192
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static implicit operator BigInteger(uint value) { return new BigInteger(value); }'
    parameters:
    - id: value
      type:
        id: System.UInt32
        name: System.UInt32
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1198
  syntax:
    content:
      CSharp: public static implicit operator BigInteger(long value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Implicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1203
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static implicit operator BigInteger(ulong value) { return new BigInteger(value); }'
    parameters:
    - id: value
      type:
        id: System.UInt64
        name: System.UInt64
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Explicit(Single)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(Single)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1209
  syntax:
    content:
      CSharp: public static explicit operator BigInteger(Single value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: Single
        name: Single
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Explicit(Double)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(Double)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1214
  syntax:
    content:
      CSharp: public static explicit operator BigInteger(Double value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: Double
        name: Double
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Explicit(Decimal)~System.Numerics.BigInteger
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(Decimal)~System.Numerics.BigInteger
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1219
  syntax:
    content:
      CSharp: public static explicit operator BigInteger(Decimal value) { return new BigInteger(value); }
    parameters:
    - id: value
      type:
        id: Decimal
        name: Decimal
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Byte
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Byte
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1224
  syntax:
    content:
      CSharp: public static explicit operator Byte(BigInteger value) { return checked ((byte)((int)value)); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Byte
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~SByte
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~SByte
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1229
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static explicit operator SByte(BigInteger value) { return checked ((sbyte)((int)value)); }'
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: SByte
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int16
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int16
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1235
  syntax:
    content:
      CSharp: public static explicit operator Int16(BigInteger value) { return checked ((short)((int)value)); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Int16
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt16
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt16
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1240
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static explicit operator UInt16(BigInteger value) { return checked ((ushort)((int)value)); }'
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: UInt16
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int32
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int32
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1246
  syntax:
    content:
      CSharp: public static explicit operator Int32(BigInteger value) { value.AssertValid(); if (value._bits == null) { return value._sign; // value packed into int32 sign } else if (Length(value._bits) > 1) { // more than 32 bits throw new OverflowException(SR.Overflow_Int32); } else if (value._sign > 0) { return checked ((int)value._bits[0]); } else { if (value._bits[0] > kuMaskHighBit) { // value > Int32.MinValue throw new OverflowException(SR.Overflow_Int32); } return unchecked (-(int)value._bits[0]); } }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Int32
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt32
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt32
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1271
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static explicit operator UInt32(BigInteger value) { value.AssertValid(); if (value._bits == null) { return checked ((uint)value._sign); } else if (Length(value._bits) > 1 || value._sign < 0) { throw new OverflowException(SR.Overflow_UInt32); } else { return value._bits[0]; } }'
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: UInt32
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int64
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Int64
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1289
  syntax:
    content:
      CSharp: 'public static explicit operator Int64(BigInteger value) { value.AssertValid(); if (value._bits == null) { return value._sign; } int len = Length(value._bits); if (len > 2) { throw new OverflowException(SR.Overflow_Int64); } ulong uu; if (len > 1) { uu = NumericsHelpers.MakeUlong(value._bits[1], value._bits[0]); } else { uu = (ulong)value._bits[0]; } long ll = value._sign > 0 ? (long)uu : -(long)uu; if ((ll > 0 && value._sign > 0) || (ll < 0 && value._sign < 0)) { // signs match, no overflow return ll; } throw new OverflowException(SR.Overflow_Int64); }'
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Int64
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt64
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~UInt64
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1322
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static explicit operator UInt64(BigInteger value) { value.AssertValid(); if (value._bits == null) { return checked ((ulong)value._sign); } int len = Length(value._bits); if (len > 2 || value._sign < 0) { throw new OverflowException(SR.Overflow_UInt64); } if (len > 1) { return NumericsHelpers.MakeUlong(value._bits[1], value._bits[0]); } else { return value._bits[0]; } }'
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: UInt64
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Single
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Single
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1347
  syntax:
    content:
      CSharp: public static explicit operator Single(BigInteger value) { return (Single)((Double)value); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Single
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Double
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Double
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1352
  syntax:
    content:
      CSharp: public static explicit operator Double(BigInteger value) { value.AssertValid(); if (value._bits == null) return value._sign; ulong man; int exp; int sign = +1; BigIntegerBuilder reg = new BigIntegerBuilder(value, ref sign); reg.GetApproxParts(out exp, out man); return NumericsHelpers.GetDoubleFromParts(sign, exp, man); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Double
- id: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Decimal
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Explicit
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~Decimal
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1366
  syntax:
    content:
      CSharp: public static explicit operator Decimal(BigInteger value) { value.AssertValid(); if (value._bits == null) return (Decimal)value._sign; int length = Length(value._bits); if (length > 3) throw new OverflowException(SR.Overflow_Decimal); int lo = 0, mi = 0, hi = 0; if (length > 2) hi = (Int32)value._bits[2]; if (length > 1) mi = (Int32)value._bits[1]; if (length > 0) lo = (Int32)value._bits[0]; return new Decimal(lo, mi, hi, value._sign < 0, 0); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Decimal
- id: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_BitwiseAnd
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1383
  syntax:
    content:
      CSharp: 'public static BigInteger operator &(BigInteger left, BigInteger right) { if (left.IsZero || right.IsZero) { return BigInteger.Zero; } uint[] x = left.ToUInt32Array(); uint[] y = right.ToUInt32Array(); uint[] z = new uint[Math.Max(x.Length, y.Length)]; uint xExtend = (left._sign < 0) ? UInt32.MaxValue : 0; uint yExtend = (right._sign < 0) ? UInt32.MaxValue : 0; for (int i = 0; i < z.Length; i++) { uint xu = (i < x.Length) ? x[i] : xExtend; uint yu = (i < y.Length) ? y[i] : yExtend; z[i] = xu & yu; } return new BigInteger(z); }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_BitwiseOr
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1405
  syntax:
    content:
      CSharp: 'public static BigInteger operator |(BigInteger left, BigInteger right) { if (left.IsZero) return right; if (right.IsZero) return left; uint[] x = left.ToUInt32Array(); uint[] y = right.ToUInt32Array(); uint[] z = new uint[Math.Max(x.Length, y.Length)]; uint xExtend = (left._sign < 0) ? UInt32.MaxValue : 0; uint yExtend = (right._sign < 0) ? UInt32.MaxValue : 0; for (int i = 0; i < z.Length; i++) { uint xu = (i < x.Length) ? x[i] : xExtend; uint yu = (i < y.Length) ? y[i] : yExtend; z[i] = xu | yu; } return new BigInteger(z); }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_ExclusiveOr
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1427
  syntax:
    content:
      CSharp: 'public static BigInteger operator ^(BigInteger left, BigInteger right) { uint[] x = left.ToUInt32Array(); uint[] y = right.ToUInt32Array(); uint[] z = new uint[Math.Max(x.Length, y.Length)]; uint xExtend = (left._sign < 0) ? UInt32.MaxValue : 0; uint yExtend = (right._sign < 0) ? UInt32.MaxValue : 0; for (int i = 0; i < z.Length; i++) { uint xu = (i < x.Length) ? x[i] : xExtend; uint yu = (i < y.Length) ? y[i] : yExtend; z[i] = xu ^ yu; } return new BigInteger(z); }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LeftShift
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1446
  syntax:
    content:
      CSharp: public static BigInteger operator <<(BigInteger value, int shift) { if (shift == 0) return value; else if (shift == Int32.MinValue) return ((value >> Int32.MaxValue) >> 1); else if (shift < 0) return value >> -shift; int digitShift = shift / kcbitUint; int smallShift = shift - (digitShift * kcbitUint); uint[] xd; int xl; bool negx; negx = GetPartsForBitManipulation(ref value, out xd, out xl); int zl = xl + digitShift + 1; uint[] zd = new uint[zl]; if (smallShift == 0) { for (int i = 0; i < xl; i++) { zd[i + digitShift] = xd[i]; } } else { int carryShift = kcbitUint - smallShift; uint carry = 0; int i; for (i = 0; i < xl; i++) { uint rot = xd[i]; zd[i + digitShift] = rot << smallShift | carry; carry = rot >> carryShift; } zd[i + digitShift] = carry; } return new BigInteger(zd, negx); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: shift
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_RightShift
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1484
  syntax:
    content:
      CSharp: public static BigInteger operator >>(BigInteger value, int shift) { if (shift == 0) return value; else if (shift == Int32.MinValue) return ((value << Int32.MaxValue) << 1); else if (shift < 0) return value << -shift; int digitShift = shift / kcbitUint; int smallShift = shift - (digitShift * kcbitUint); uint[] xd; int xl; bool negx; negx = GetPartsForBitManipulation(ref value, out xd, out xl); if (negx) { if (shift >= (kcbitUint * xl)) { return BigInteger.MinusOne; } uint[] temp = new uint[xl]; Array.Copy(xd /* sourceArray */, temp /* destinationArray */, xl /* length */); // make a copy of immutable value._bits xd = temp; NumericsHelpers.DangerousMakeTwosComplement(xd); // mutates xd } int zl = xl - digitShift; if (zl < 0) zl = 0; uint[] zd = new uint[zl]; if (smallShift == 0) { for (int i = xl - 1; i >= digitShift; i--) { zd[i - digitShift] = xd[i]; } } else { int carryShift = kcbitUint - smallShift; uint carry = 0; for (int i = xl - 1; i >= digitShift; i--) { uint rot = xd[i]; if (negx && i == xl - 1) // sign-extend the first shift for negative ints then let the carry propagate zd[i - digitShift] = (rot >> smallShift) | (0xFFFFFFFF << carryShift); else zd[i - digitShift] = (rot >> smallShift) | carry; carry = rot << carryShift; } } if (negx) { NumericsHelpers.DangerousMakeTwosComplement(zd); // mutates zd } return new BigInteger(zd, negx); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: shift
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_OnesComplement
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1542
  syntax:
    content:
      CSharp: public static BigInteger operator ~(BigInteger value) { return -(value + BigInteger.One); }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_UnaryNegation
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1547
  syntax:
    content:
      CSharp: public static BigInteger operator -(BigInteger value) { value.AssertValid(); value._sign = -value._sign; value.AssertValid(); return value; }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_UnaryPlus
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1555
  syntax:
    content:
      CSharp: public static BigInteger operator +(BigInteger value) { value.AssertValid(); return value; }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Increment
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1562
  syntax:
    content:
      CSharp: public static BigInteger operator ++(BigInteger value) { return value + BigInteger.One; }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Decrement
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1567
  syntax:
    content:
      CSharp: public static BigInteger operator --(BigInteger value) { return value - BigInteger.One; }
    parameters:
    - id: value
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Addition
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1573
  syntax:
    content:
      CSharp: public static BigInteger operator +(BigInteger left, BigInteger right) { left.AssertValid(); right.AssertValid(); if (right.IsZero) return left; if (left.IsZero) return right; int sign1 = +1; int sign2 = +1; BigIntegerBuilder reg1 = new BigIntegerBuilder(left, ref sign1); BigIntegerBuilder reg2 = new BigIntegerBuilder(right, ref sign2); if (sign1 == sign2) reg1.Add(ref reg2); else reg1.Sub(ref sign1, ref reg2); return reg1.GetInteger(sign1); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Subtraction
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1594
  syntax:
    content:
      CSharp: public static BigInteger operator -(BigInteger left, BigInteger right) { left.AssertValid(); right.AssertValid(); if (right.IsZero) return left; if (left.IsZero) return -right; int sign1 = +1; int sign2 = -1; BigIntegerBuilder reg1 = new BigIntegerBuilder(left, ref sign1); BigIntegerBuilder reg2 = new BigIntegerBuilder(right, ref sign2); if (sign1 == sign2) reg1.Add(ref reg2); else reg1.Sub(ref sign1, ref reg2); return reg1.GetInteger(sign1); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Multiply
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1615
  syntax:
    content:
      CSharp: public static BigInteger operator *(BigInteger left, BigInteger right) { left.AssertValid(); right.AssertValid(); int sign = +1; BigIntegerBuilder reg1 = new BigIntegerBuilder(left, ref sign); BigIntegerBuilder reg2 = new BigIntegerBuilder(right, ref sign); reg1.Mul(ref reg2); return reg1.GetInteger(sign); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Division
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1628
  syntax:
    content:
      CSharp: public static BigInteger operator /(BigInteger dividend, BigInteger divisor) { dividend.AssertValid(); divisor.AssertValid(); int sign = +1; BigIntegerBuilder regNum = new BigIntegerBuilder(dividend, ref sign); BigIntegerBuilder regDen = new BigIntegerBuilder(divisor, ref sign); regNum.Div(ref regDen); return regNum.GetInteger(sign); }
    parameters:
    - id: dividend
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: divisor
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Modulus
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1641
  syntax:
    content:
      CSharp: public static BigInteger operator %(BigInteger dividend, BigInteger divisor) { dividend.AssertValid(); divisor.AssertValid(); int signNum = +1; int signDen = +1; BigIntegerBuilder regNum = new BigIntegerBuilder(dividend, ref signNum); BigIntegerBuilder regDen = new BigIntegerBuilder(divisor, ref signDen); regNum.Mod(ref regDen); return regNum.GetInteger(signNum); }
    parameters:
    - id: dividend
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: divisor
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: BigInteger
- id: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1655
  syntax:
    content:
      CSharp: public static bool operator <(BigInteger left, BigInteger right) { return left.CompareTo(right) < 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1659
  syntax:
    content:
      CSharp: public static bool operator <=(BigInteger left, BigInteger right) { return left.CompareTo(right) <= 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1663
  syntax:
    content:
      CSharp: public static bool operator>(BigInteger left, BigInteger right) { return left.CompareTo(right) > 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1667
  syntax:
    content:
      CSharp: public static bool operator >=(BigInteger left, BigInteger right) { return left.CompareTo(right) >= 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1671
  syntax:
    content:
      CSharp: public static bool operator ==(BigInteger left, BigInteger right) { return left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1675
  syntax:
    content:
      CSharp: public static bool operator !=(BigInteger left, BigInteger right) { return !left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1680
  syntax:
    content:
      CSharp: public static bool operator <(BigInteger left, Int64 right) { return left.CompareTo(right) < 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1684
  syntax:
    content:
      CSharp: public static bool operator <=(BigInteger left, Int64 right) { return left.CompareTo(right) <= 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1688
  syntax:
    content:
      CSharp: public static bool operator>(BigInteger left, Int64 right) { return left.CompareTo(right) > 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1692
  syntax:
    content:
      CSharp: public static bool operator >=(BigInteger left, Int64 right) { return left.CompareTo(right) >= 0; }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1696
  syntax:
    content:
      CSharp: public static bool operator ==(BigInteger left, Int64 right) { return left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,Int64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,Int64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1700
  syntax:
    content:
      CSharp: public static bool operator !=(BigInteger left, Int64 right) { return !left.Equals(right); }
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: Int64
        name: Int64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThan(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThan(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1705
  syntax:
    content:
      CSharp: public static bool operator <(Int64 left, BigInteger right) { return right.CompareTo(left) > 0; }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThanOrEqual(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThanOrEqual(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1709
  syntax:
    content:
      CSharp: public static bool operator <=(Int64 left, BigInteger right) { return right.CompareTo(left) >= 0; }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThan(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThan(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1713
  syntax:
    content:
      CSharp: public static bool operator>(Int64 left, BigInteger right) { return right.CompareTo(left) < 0; }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThanOrEqual(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThanOrEqual(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1717
  syntax:
    content:
      CSharp: public static bool operator >=(Int64 left, BigInteger right) { return right.CompareTo(left) <= 0; }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Equality(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Equality(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1721
  syntax:
    content:
      CSharp: public static bool operator ==(Int64 left, BigInteger right) { return right.Equals(left); }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Inequality(Int64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Inequality(Int64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1725
  syntax:
    content:
      CSharp: public static bool operator !=(Int64 left, BigInteger right) { return !right.Equals(left); }
    parameters:
    - id: left
      type:
        id: Int64
        name: Int64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1730
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator <(BigInteger left, UInt64 right) { return left.CompareTo(right) < 0; }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1735
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator <=(BigInteger left, UInt64 right) { return left.CompareTo(right) <= 0; }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1740
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator>(BigInteger left, UInt64 right) { return left.CompareTo(right) > 0; }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1745
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator >=(BigInteger left, UInt64 right) { return left.CompareTo(right) >= 0; }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1750
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator ==(BigInteger left, UInt64 right) { return left.Equals(right); }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,UInt64)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,UInt64)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1755
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator !=(BigInteger left, UInt64 right) { return !left.Equals(right); }'
    parameters:
    - id: left
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    - id: right
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThan(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThan(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1761
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator <(UInt64 left, BigInteger right) { return right.CompareTo(left) > 0; }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_LessThanOrEqual(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_LessThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_LessThanOrEqual(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1766
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator <=(UInt64 left, BigInteger right) { return right.CompareTo(left) >= 0; }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThan(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThan
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThan(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1771
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator>(UInt64 left, BigInteger right) { return right.CompareTo(left) < 0; }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_GreaterThanOrEqual(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_GreaterThanOrEqual
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_GreaterThanOrEqual(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1776
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator >=(UInt64 left, BigInteger right) { return right.CompareTo(left) <= 0; }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Equality(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Equality(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1781
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator ==(UInt64 left, BigInteger right) { return right.Equals(left); }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
- id: System.Numerics.BigInteger.op_Inequality(UInt64,System.Numerics.BigInteger)
  href: System.Numerics.BigInteger.yaml
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: System.Numerics.BigInteger.op_Inequality(UInt64,System.Numerics.BigInteger)
  type: Method
  source:
    remote: *o0
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1786
  syntax:
    content:
      CSharp: '[CLSCompliant(false)] public static bool operator !=(UInt64 left, BigInteger right) { return !right.Equals(left); }'
    parameters:
    - id: left
      type:
        id: UInt64
        name: UInt64
        isExternal: true
    - id: right
      type:
        id: System.Numerics.BigInteger
        name: BigInteger
        href: System.Numerics.BigInteger.yaml
    return:
      id: Boolean
