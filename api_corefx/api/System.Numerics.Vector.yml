items:
- uid: System.Numerics.Vector
  href: System.Numerics.Vector.yml
  name: Vector
  fullName: System.Numerics.Vector
  type: Class
  source:
    remote: &o0
      path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 10
  summary: Contains various methods useful for creating, manipulating, combining, and converting generic vectors with one another.
  syntax:
    content:
      CSharp: public class Vector
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Numerics.Vector
  children:
  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  - System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.IsHardwareAccelerated
  - System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
  - System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
  - System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
  - System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: ConditionalSelect(Vector<int>, Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<int>, System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 22
  summary: Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
  syntax:
    content:
      CSharp: public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right)
    parameters:
    - id: condition
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The integral mask vector used to drive selection.
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The new vector with elements selected based on the mask.
  id: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: ConditionalSelect(Vector<long>, Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<long>, System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 35
  summary: Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
  syntax:
    content:
      CSharp: public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right)
    parameters:
    - id: condition
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The integral mask vector used to drive selection.
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The new vector with elements selected based on the mask.
  id: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.ConditionalSelect<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 48
  summary: Creates a new vector with elements selected between the two given source vectors, and based on a mask vector.
  syntax:
    content:
      CSharp: 'public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: condition
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The mask vector used to drive selection.
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The new vector with elements selected based on the mask.
  id: System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Equals<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Equals<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 63
  summary: Returns a new vector whose elements signal whether the elements in left and right were equal.
  syntax:
    content:
      CSharp: 'public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: Equals(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 75
  summary: Returns an integral vector whose elements signal whether elements in the left and right floating point vectors were equal.
  syntax:
    content:
      CSharp: public static Vector<int> Equals(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  href: System.Numerics.Vector.yml
  name: Equals(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 87
  summary: Returns a new vector whose elements signal whether the elements in left and right were equal.
  syntax:
    content:
      CSharp: public static Vector<int> Equals(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: Equals(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 99
  summary: Returns an integral vector whose elements signal whether elements in the left and right floating point vectors were equal.
  syntax:
    content:
      CSharp: public static Vector<long> Equals(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  href: System.Numerics.Vector.yml
  name: Equals(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 111
  summary: Returns a new vector whose elements signal whether the elements in left and right were equal.
  syntax:
    content:
      CSharp: public static Vector<long> Equals(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
- uid: System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: EqualsAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.EqualsAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 123
  summary: Returns a boolean indicating whether each pair of elements in the given vectors are equal.
  syntax:
    content:
      CSharp: 'public static bool EqualsAll<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements are equal; False otherwise.
  id: System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: EqualsAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.EqualsAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 135
  summary: Returns a boolean indicating whether any single pair of elements in the given vectors are equal.
  syntax:
    content:
      CSharp: 'public static bool EqualsAny<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any element pairs are equal; False if no element pairs are equal.
  id: System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThan<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 150
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: LessThan(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 163
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were less than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> LessThan(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant integral vector.
  id: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  href: System.Numerics.Vector.yml
  name: LessThan(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 176
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> LessThan(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: LessThan(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 189
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were less than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> LessThan(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant integral vector.
  id: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  href: System.Numerics.Vector.yml
  name: LessThan(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 202
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> LessThan(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
- uid: System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThanAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 214
  summary: Returns a boolean indicating whether all of the elements in left are less than their corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static bool LessThanAll<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements in left are less than their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThanAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 227
  summary: Returns a boolean indicating whether any element in left is less than its corresponding element in right.
  syntax:
    content:
      CSharp: 'public static bool LessThanAny<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any elements in left are less than their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqual<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 243
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqual(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 256
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were less than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant integral vector.
  id: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqual(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 269
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqual(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 282
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were less than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqual(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 295
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were less than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant integral vector.
  id: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqualAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 307
  summary: Returns a boolean indicating whether all elements in left are less than or equal to their corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements in left are less than or equal to their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: LessThanOrEqualAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.LessThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 320
  summary: Returns a boolean indicating whether any element in left is less than or equal to its corresponding element in right.
  syntax:
    content:
      CSharp: 'public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any elements in left are less than their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThan<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 336
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: GreaterThan(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 349
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were greater than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant integral vector.
  id: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  href: System.Numerics.Vector.yml
  name: GreaterThan(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 362
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: GreaterThan(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 375
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were greater than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant integral vector.
  id: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  href: System.Numerics.Vector.yml
  name: GreaterThan(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 388
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
- uid: System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThanAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 401
  summary: >-
    Returns a boolean indicating whether all elements in left are greater than the corresponding elements in right.

    elements in right.
  syntax:
    content:
      CSharp: 'public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements in left are greater than their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThanAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 414
  summary: Returns a boolean indicating whether any element in left is greater than its corresponding element in right.
  syntax:
    content:
      CSharp: 'public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any elements in left are greater than their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqual<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 430
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqual(Vector<float>, Vector<float>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<float>, System.Numerics.Vector<float>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 443
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were greater than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant integral vector.
  id: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqual(Vector<int>, Vector<int>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<int>, System.Numerics.Vector<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 456
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqual(Vector<long>, Vector<long>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<long>, System.Numerics.Vector<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 469
  summary: >-
    Returns a new vector whose elements signal whether the elements in left were greater than or equal to their

    corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant vector.
  id: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqual(Vector<double>, Vector<double>)
  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<double>, System.Numerics.Vector<double>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 482
  summary: >-
    Returns an integral vector whose elements signal whether the elements in left were greater than or equal to

    their corresponding elements in right.
  syntax:
    content:
      CSharp: public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The second vector to compare.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The resultant integral vector.
  id: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
- uid: System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 495
  summary: >-
    Returns a boolean indicating whether all of the elements in left are greater than or equal to

    their corresponding elements in right.
  syntax:
    content:
      CSharp: 'public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements in left are greater than or equal to their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.GreaterThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 508
  summary: Returns a boolean indicating whether any element in left is greater than or equal to its corresponding element in right.
  syntax:
    content:
      CSharp: 'public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any elements in left are greater than or equal to their corresponding elements in right; False otherwise.
  id: System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.IsHardwareAccelerated
  href: System.Numerics.Vector.yml
  name: IsHardwareAccelerated
  fullName: System.Numerics.Vector.IsHardwareAccelerated
  type: Property
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 525
  summary: Returns whether or not vector operations are subject to hardware acceleration through JIT intrinsic support.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public static bool IsHardwareAccelerated { get; }'
    parameters:
    - id: IsHardwareAccelerated
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: System.Numerics.Vector.IsHardwareAccelerated
- uid: System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Abs<T>(Vector<T>)
  fullName: System.Numerics.Vector.Abs<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 543
  summary: Returns a new vector whose elements are the absolute values of the given vector's elements.
  syntax:
    content:
      CSharp: 'public static Vector<T> Abs<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The absolute value vector.
  id: System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Min<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Min<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 555
  summary: Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Min<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The minimum vector.
  id: System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Max<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Max<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 567
  summary: Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Max<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The maximum vector.
  id: System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Dot<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Dot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 581
  summary: Returns the dot product of two vectors.
  syntax:
    content:
      CSharp: 'public static T Dot<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: T
      type:
        id: T
        name: T
        href: T
      description: The dot product.
  id: System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: SquareRoot<T>(Vector<T>)
  fullName: System.Numerics.Vector.SquareRoot<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 592
  summary: Returns a new vector whose elements are the square roots of the given vector's elements.
  syntax:
    content:
      CSharp: 'public static Vector<T> SquareRoot<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The square root vector.
  id: System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Add<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Add<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 606
  summary: Creates a new vector whose values are the sum of each pair of elements from the two given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Add<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The summed vector.
  id: System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Subtract<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Subtract<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 618
  summary: Creates a new vector whose values are the difference between each pairs of elements in the given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The difference vector.
  id: System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Multiply<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 630
  summary: Creates a new vector whose values are the product of each pair of elements from the two given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The summed vector.
  id: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
  href: System.Numerics.Vector.yml
  name: Multiply<T>(Vector<T>, T)
  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 642
  summary: Returns a new vector whose values are the values of the given vector each multiplied by a scalar value.
  syntax:
    content:
      CSharp: 'public static Vector<T> Multiply<T>(Vector<T> left, T right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    - id: right
      type:
        id: T
        name: T
        href: T
      description: The scalar factor.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The scaled vector.
  id: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
- uid: System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Multiply<T>(T, Vector<T>)
  fullName: System.Numerics.Vector.Multiply<T>(T, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 654
  summary: Returns a new vector whose values are the values of the given vector each multiplied by a scalar value.
  syntax:
    content:
      CSharp: 'public static Vector<T> Multiply<T>(T left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: T
        name: T
        href: T
      description: The scalar factor.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The scaled vector.
  id: System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Divide<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Divide<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 667
  summary: >-
    Returns a new vector whose values are the result of dividing the first vector's elements

    by the corresponding elements in the second vector.
  syntax:
    content:
      CSharp: 'public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The divided vector.
  id: System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Negate<T>(Vector<T>)
  fullName: System.Numerics.Vector.Negate<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 678
  summary: Returns a new vector whose elements are the given vector's elements negated.
  syntax:
    content:
      CSharp: 'public static Vector<T> Negate<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The negated vector.
  id: System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: BitwiseAnd<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.BitwiseAnd<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 692
  summary: Returns a new vector by performing a bitwise-and operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: BitwiseOr<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.BitwiseOr<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 704
  summary: Returns a new vector by performing a bitwise-or operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: OnesComplement<T>(Vector<T>)
  fullName: System.Numerics.Vector.OnesComplement<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 715
  summary: Returns a new vector whose elements are obtained by taking the one's complement of the given vector's elements.
  syntax:
    content:
      CSharp: 'public static Vector<T> OnesComplement<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The one's complement vector.
  id: System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: Xor<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.Xor<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 727
  summary: Returns a new vector by performing a bitwise-exclusive-or operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AndNot<T>(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector.AndNot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 739
  summary: Returns a new vector by performing a bitwise-and-not operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: 'public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right)where T : struct'
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The resultant vector.
  id: System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorByte<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorByte<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 752
  summary: Reinterprets the bits of the given vector into those of a vector of unsigned bytes.
  syntax:
    content:
      CSharp: 'public static Vector<byte> AsVectorByte<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Byte}
        name: Vector<byte>
        href: System.Numerics.Vector{System.Byte}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorSByte<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorSByte<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 763
  summary: Reinterprets the bits of the given vector into those of a vector of signed bytes.
  syntax:
    content:
      CSharp: 'public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.SByte}
        name: Vector<sbyte>
        href: System.Numerics.Vector{System.SByte}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorUInt16<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt16<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 775
  summary: Reinterprets the bits of the given vector into those of a vector of 16-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt16}
        name: Vector<ushort>
        href: System.Numerics.Vector{System.UInt16}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorInt16<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt16<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 787
  summary: Reinterprets the bits of the given vector into those of a vector of signed 16-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<short> AsVectorInt16<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int16}
        name: Vector<short>
        href: System.Numerics.Vector{System.Int16}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorUInt32<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt32<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 798
  summary: Reinterprets the bits of the given vector into those of a vector of unsigned 32-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<uint> AsVectorUInt32<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt32}
        name: Vector<uint>
        href: System.Numerics.Vector{System.UInt32}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorInt32<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt32<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 810
  summary: Reinterprets the bits of the given vector into those of a vector of signed 32-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<int> AsVectorInt32<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorUInt64<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorUInt64<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 821
  summary: Reinterprets the bits of the given vector into those of a vector of unsigned 64-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt64}
        name: Vector<ulong>
        href: System.Numerics.Vector{System.UInt64}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorInt64<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorInt64<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 834
  summary: Reinterprets the bits of the given vector into those of a vector of signed 64-bit integers.
  syntax:
    content:
      CSharp: 'public static Vector<long> AsVectorInt64<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorSingle<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorSingle<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 845
  summary: Reinterprets the bits of the given vector into those of a vector of 32-bit floating point numbers.
  syntax:
    content:
      CSharp: 'public static Vector<float> AsVectorSingle<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
- uid: System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
  href: System.Numerics.Vector.yml
  name: AsVectorDouble<T>(Vector<T>)
  fullName: System.Numerics.Vector.AsVectorDouble<T>(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector_Operations.cs
    startLine: 856
  summary: Reinterprets the bits of the given vector into those of a vector of 64-bit floating point numbers.
  syntax:
    content:
      CSharp: 'public static Vector<double> AsVectorDouble<T>(Vector<T> value)where T : struct'
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector{``0}
        name: Vector<T>
        href: System.Numerics.Vector{``0}
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The reinterpreted vector.
  id: System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
