items:
- uid: System.Numerics.Vector`1
  href: System.Numerics.Vector`1.yml
  name: Vector<T>
  fullName: System.Numerics.Vector<T>
  type: Struct
  source:
    remote: &o0
      path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 40
  summary: >-
    A structure that represents a single Vector. The count of this Vector is fixed but CPU register dependent.

    This struct only supports numerical types. This type is intended to be used as a building block for vectorizing

    large algorithms. This type is immutable, individual elements cannot be modified.
  syntax:
    content:
      CSharp: 'public struct Vector<T> : IEquatable<Vector<T>>, IFormattable where T : struct'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.ValueType
    name: ValueType
    isExternal: true
  id: System.Numerics.Vector`1
  children:
  - System.Numerics.Vector`1.Count
  - System.Numerics.Vector`1.Zero
  - System.Numerics.Vector`1.One
  - System.Numerics.Vector`1.#ctor(`0)
  - System.Numerics.Vector`1.#ctor(`0[])
  - System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  - System.Numerics.Vector`1.CopyTo(`0[])
  - System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  - System.Numerics.Vector`1.Item(System.Int32)
  - System.Numerics.Vector`1.Equals(System.Object)
  - System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.GetHashCode
  - System.Numerics.Vector`1.ToString
  - System.Numerics.Vector`1.ToString(System.String)
  - System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  - System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}
- uid: System.Numerics.Vector`1.Count
  href: System.Numerics.Vector`1.yml
  name: Count
  fullName: System.Numerics.Vector<T>.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 50
  summary: Returns the number of elements stored in the vector. This value is hardware dependent.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public static int Count { get; }'
    parameters:
    - id: Count
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Numerics.Vector`1.Count
- uid: System.Numerics.Vector`1.Zero
  href: System.Numerics.Vector`1.yml
  name: Zero
  fullName: System.Numerics.Vector<T>.Zero
  type: Property
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 70
  summary: Returns a vector containing all zeroes.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public static Vector<T> Zero { get; }'
    parameters:
    - id: Zero
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
  id: System.Numerics.Vector`1.Zero
- uid: System.Numerics.Vector`1.One
  href: System.Numerics.Vector`1.yml
  name: One
  fullName: System.Numerics.Vector<T>.One
  type: Property
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 77
  summary: Returns a vector containing all ones.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public static Vector<T> One { get; }'
    parameters:
    - id: One
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
  id: System.Numerics.Vector`1.One
- uid: System.Numerics.Vector`1.#ctor(`0)
  href: System.Numerics.Vector`1.yml
  name: Vector(T)
  fullName: System.Numerics.Vector<T>.Vector(T)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 142
  summary: Constructs a vector whose components are all value
  syntax:
    content:
      CSharp: '[JitIntrinsic] public unsafe Vector(T value): this ()'
    parameters:
    - id: value
      type:
        id: T
        name: T
        href: T
  id: System.Numerics.Vector`1.#ctor(`0)
- uid: System.Numerics.Vector`1.#ctor(`0[])
  href: System.Numerics.Vector`1.yml
  name: Vector(T[])
  fullName: System.Numerics.Vector<T>.Vector(T[])
  type: Constructor
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 353
  summary: Constructs a vector from the given array. The size of the given array must be at least Vector'T.Count.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public unsafe Vector(T[] values): this (values, 0)'
    parameters:
    - id: values
      type:
        id: System.Array
        name: T[]
        isExternal: true
  id: System.Numerics.Vector`1.#ctor(`0[])
- uid: System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  href: System.Numerics.Vector`1.yml
  name: Vector(T[], int)
  fullName: System.Numerics.Vector<T>.Vector(T[], int)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 360
  summary: >-
    Constructs a vector from the given array, starting from the given index.

    The array must contain at least Vector'T.Count from the given index.
  syntax:
    content:
      CSharp: 'public unsafe Vector(T[] values, int index): this ()'
    parameters:
    - id: values
      type:
        id: System.Array
        name: T[]
        isExternal: true
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Numerics.Vector`1.#ctor(`0[],System.Int32)
- uid: System.Numerics.Vector`1.CopyTo(`0[])
  href: System.Numerics.Vector`1.yml
  name: CopyTo(T[])
  fullName: System.Numerics.Vector<T>.CopyTo(T[])
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 755
  summary: Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
  syntax:
    content:
      CSharp: public void CopyTo(T[] destination)
    parameters:
    - id: destination
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The destination array which the values are copied into
  id: System.Numerics.Vector`1.CopyTo(`0[])
- uid: System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  href: System.Numerics.Vector`1.yml
  name: CopyTo(T[], int)
  fullName: System.Numerics.Vector<T>.CopyTo(T[], int)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 769
  summary: Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
  syntax:
    content:
      CSharp: public void CopyTo(T[] destination, int startIndex)
    parameters:
    - id: destination
      type:
        id: System.Array
        name: T[]
        isExternal: true
      description: The destination array which the values are copied into
    - id: startIndex
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The index to start copying to
  id: System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
- uid: System.Numerics.Vector`1.Item(System.Int32)
  href: System.Numerics.Vector`1.yml
  name: this[int]
  fullName: System.Numerics.Vector<T>.this[int]
  type: Property
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1042
  summary: Returns the element at the given index.
  syntax:
    content:
      CSharp: '[JitIntrinsic] public unsafe T this[int index] { get; }'
    parameters:
    - id: this[]
      type:
        id: T
        name: T
        href: T
  id: System.Numerics.Vector`1.Item(System.Int32)
- uid: System.Numerics.Vector`1.Equals(System.Object)
  href: System.Numerics.Vector`1.yml
  name: Equals(object)
  fullName: System.Numerics.Vector<T>.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1133
  summary: Returns a boolean indicating whether the given Object is equal to this vector instance.
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: object
        isExternal: true
      description: The Object to compare against.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if the Object is equal to this vector; False otherwise.
  id: System.Numerics.Vector`1.Equals(System.Object)
- uid: System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: Equals(Vector<T>)
  fullName: System.Numerics.Vector<T>.Equals(System.Numerics.Vector<T>)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1148
  summary: Returns a boolean indicating whether the given vector is equal to this vector instance.
  syntax:
    content:
      CSharp: public bool Equals(Vector<T> other)
    parameters:
    - id: other
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The vector to compare this instance to.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if the other vector is equal to this instance; False otherwise.
  id: System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.GetHashCode
  href: System.Numerics.Vector`1.yml
  name: GetHashCode()
  fullName: System.Numerics.Vector<T>.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1281
  summary: Returns the hash code for this instance.
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The hash code.
  id: System.Numerics.Vector`1.GetHashCode
- uid: System.Numerics.Vector`1.ToString
  href: System.Numerics.Vector`1.yml
  name: ToString()
  fullName: System.Numerics.Vector<T>.ToString()
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1491
  summary: Returns a String representing this vector.
  syntax:
    content:
      CSharp: public override string ToString()
    parameters: []
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string representation.
  id: System.Numerics.Vector`1.ToString
- uid: System.Numerics.Vector`1.ToString(System.String)
  href: System.Numerics.Vector`1.yml
  name: ToString(string)
  fullName: System.Numerics.Vector<T>.ToString(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1501
  summary: Returns a String representing this vector, using the specified format string to format individual elements.
  syntax:
    content:
      CSharp: public string ToString(string format)
    parameters:
    - id: format
      type:
        id: System.String
        name: string
        isExternal: true
      description: The format of individual elements.
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string representation.
  id: System.Numerics.Vector`1.ToString(System.String)
- uid: System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  href: System.Numerics.Vector`1.yml
  name: ToString(string, IFormatProvider)
  fullName: System.Numerics.Vector<T>.ToString(string, System.IFormatProvider)
  type: Method
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1513
  summary: >-
    Returns a String representing this vector, using the specified format string to format individual elements

    and the given IFormatProvider.
  syntax:
    content:
      CSharp: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type:
        id: System.String
        name: string
        isExternal: true
      description: The format of individual elements.
    - id: formatProvider
      type:
        id: System.IFormatProvider
        name: IFormatProvider
        isExternal: true
      description: The format provider to use when formatting elements.
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string representation.
  id: System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
- uid: System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator +(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator +(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1538
  summary: Adds two vectors together.
  syntax:
    content:
      CSharp: public static Vector<T> operator +(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The summed vector.
  id: System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator -(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator -(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1749
  summary: Subtracts the second vector from the first.
  syntax:
    content:
      CSharp: public static Vector<T> operator -(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The difference vector.
  id: System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator *(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator *(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 1961
  summary: Multiplies two vectors together.
  syntax:
    content:
      CSharp: public static Vector<T> operator *(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The product vector.
  id: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  href: System.Numerics.Vector`1.yml
  name: operator *(Vector<T>, T)
  fullName: System.Numerics.Vector<T>.operator *(System.Numerics.Vector<T>, T)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2173
  summary: Multiplies a vector by the given scalar.
  syntax:
    content:
      CSharp: public static Vector<T> operator *(Vector<T> value, T factor)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector.
    - id: factor
      type:
        id: T
        name: T
        href: T
      description: The scalar value.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The scaled vector.
  id: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
- uid: System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator *(T, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator *(T, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2292
  summary: Multiplies a vector by the given scalar.
  syntax:
    content:
      CSharp: public static Vector<T> operator *(T factor, Vector<T> value)
    parameters:
    - id: factor
      type:
        id: T
        name: T
        href: T
      description: The scalar value.
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The scaled vector.
  id: System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator /(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator /(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2411
  summary: Divides the first vector by the second.
  syntax:
    content:
      CSharp: public static Vector<T> operator /(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The vector resulting from the division.
  id: System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator -(Vector<T>)
  fullName: System.Numerics.Vector<T>.operator -(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2621
  summary: Negates a given vector.
  syntax:
    content:
      CSharp: public static Vector<T> operator -(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The negated vector.
  id: System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator &(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator &(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2634
  summary: Returns a new vector by performing a bitwise-and operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: public static Vector<T> operator &(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The resultant vector.
  id: System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator |(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator |(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2665
  summary: Returns a new vector by performing a bitwise-or operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: public static Vector<T> operator |(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The resultant vector.
  id: System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator ^(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator ^(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2696
  summary: Returns a new vector by performing a bitwise-exclusive-or operation on each of the elements in the given vectors.
  syntax:
    content:
      CSharp: public static Vector<T> operator ^(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first source vector.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The resultant vector.
  id: System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator ~(Vector<T>)
  fullName: System.Numerics.Vector<T>.operator ~(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2726
  summary: Returns a new vector whose elements are obtained by taking the one's complement of the given vector's elements.
  syntax:
    content:
      CSharp: public static Vector<T> operator ~(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector.
    return:
      id: Vector
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The one's complement vector.
  id: System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator ==(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator ==(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2740
  summary: Returns a boolean indicating whether each pair of elements in the given vectors are equal.
  syntax:
    content:
      CSharp: public static bool operator ==(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if all elements are equal; False otherwise.
  id: System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  href: System.Numerics.Vector`1.yml
  name: operator !=(Vector<T>, Vector<T>)
  fullName: System.Numerics.Vector<T>.operator !=(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2752
  summary: Returns a boolean indicating whether any single pair of elements in the given vectors are equal.
  syntax:
    content:
      CSharp: public static bool operator !=(Vector<T> left, Vector<T> right)
    parameters:
    - id: left
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The first vector to compare.
    - id: right
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The second vector to compare.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if any element pairs are equal; False if no element pairs are equal.
  id: System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<byte>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<byte>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2765
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<byte>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Byte}
        name: Vector<byte>
        href: System.Numerics.Vector{System.Byte}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<sbyte>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<sbyte>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2776
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<sbyte>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.SByte}
        name: Vector<sbyte>
        href: System.Numerics.Vector{System.SByte}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<ushort>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<ushort>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2788
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<ushort>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt16}
        name: Vector<ushort>
        href: System.Numerics.Vector{System.UInt16}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<short>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<short>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2800
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<short>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int16}
        name: Vector<short>
        href: System.Numerics.Vector{System.Int16}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<uint>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<uint>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2811
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<uint>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt32}
        name: Vector<uint>
        href: System.Numerics.Vector{System.UInt32}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<int>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<int>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2823
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<int>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int32}
        name: Vector<int>
        href: System.Numerics.Vector{System.Int32}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<ulong>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<ulong>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2834
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<ulong>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.UInt64}
        name: Vector<ulong>
        href: System.Numerics.Vector{System.UInt64}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<long>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<long>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2846
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<long>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Int64}
        name: Vector<long>
        href: System.Numerics.Vector{System.Int64}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<float>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<float>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2857
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<float>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Single}
        name: Vector<float>
        href: System.Numerics.Vector{System.Single}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}
  href: System.Numerics.Vector`1.yml
  name: explicit operator Vector<double>(Vector<T>)
  fullName: System.Numerics.Vector<T>.explicit operator System.Numerics.Vector<double>(System.Numerics.Vector<T>)
  type: Operator
  source:
    remote: *o0
    path: src/System.Numerics.Vectors/src/System/Numerics/Vector.cs
    startLine: 2868
  summary: Reinterprets the bits of the given vector into those of another type.
  syntax:
    content:
      CSharp: public static explicit operator Vector<double>(Vector<T> value)
    parameters:
    - id: value
      type:
        id: System.Numerics.Vector`1
        name: Vector<T>
        href: System.Numerics.Vector`1.yml
      description: The source vector
    return:
      id: Vector
      type:
        id: System.Numerics.Vector{System.Double}
        name: Vector<double>
        href: System.Numerics.Vector{System.Double}
      description: The reinterpreted vector.
  id: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}
