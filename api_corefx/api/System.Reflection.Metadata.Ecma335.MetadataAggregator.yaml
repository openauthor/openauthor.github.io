id: System.Reflection.Metadata.Ecma335.MetadataAggregator
href: System.Reflection.Metadata.Ecma335.MetadataAggregator.yaml
name:
  CSharp: MetadataAggregator
qualifiedName:
  CSharp: System.Reflection.Metadata.Ecma335.MetadataAggregator
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataAggregator.cs
  startLine: 9
syntax:
  content:
    CSharp: public sealed class MetadataAggregator
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Reflection.Metadata.Ecma335.MetadataAggregator.#ctor(System.Reflection.Metadata.MetadataReader,IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  href: System.Reflection.Metadata.Ecma335.MetadataAggregator.yaml
  name:
    CSharp: MetadataAggregator(System.Reflection.Metadata.MetadataReader,IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataAggregator.MetadataAggregator(System.Reflection.Metadata.MetadataReader,IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataAggregator.cs
    startLine: 34
  syntax:
    content:
      CSharp: 'public MetadataAggregator(MetadataReader baseReader, IReadOnlyList<MetadataReader> deltaReaders): this (baseReader, null, null, deltaReaders)'
    parameters:
    - id: baseReader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: deltaReaders
      type:
        id: IReadOnlyList{System.Reflection.Metadata.MetadataReader}
        name: IReadOnlyList{System.Reflection.Metadata.MetadataReader}
        isExternal: true
    return:
      id: Void
- id: System.Reflection.Metadata.Ecma335.MetadataAggregator.#ctor(IReadOnlyList{System.Int32},IReadOnlyList{System.Int32},IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  href: System.Reflection.Metadata.Ecma335.MetadataAggregator.yaml
  name:
    CSharp: MetadataAggregator(IReadOnlyList{System.Int32},IReadOnlyList{System.Int32},IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataAggregator.MetadataAggregator(IReadOnlyList{System.Int32},IReadOnlyList{System.Int32},IReadOnlyList{System.Reflection.Metadata.MetadataReader})
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataAggregator.cs
    startLine: 39
  syntax:
    content:
      CSharp: 'public MetadataAggregator(IReadOnlyList<int> baseTableRowCounts, IReadOnlyList<int> baseHeapSizes, IReadOnlyList<MetadataReader> deltaReaders): this (null, baseTableRowCounts, baseHeapSizes, deltaReaders)'
    parameters:
    - id: baseTableRowCounts
      type:
        id: IReadOnlyList{System.Int32}
        name: IReadOnlyList{System.Int32}
        isExternal: true
    - id: baseHeapSizes
      type:
        id: IReadOnlyList{System.Int32}
        name: IReadOnlyList{System.Int32}
        isExternal: true
    - id: deltaReaders
      type:
        id: IReadOnlyList{System.Reflection.Metadata.MetadataReader}
        name: IReadOnlyList{System.Reflection.Metadata.MetadataReader}
        isExternal: true
    return:
      id: Void
- id: System.Reflection.Metadata.Ecma335.MetadataAggregator.GetGenerationHandle(System.Reflection.Metadata.Handle,System.Int32@)
  href: System.Reflection.Metadata.Ecma335.MetadataAggregator.yaml
  name:
    CSharp: GetGenerationHandle
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataAggregator.GetGenerationHandle(System.Reflection.Metadata.Handle,System.Int32@)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataAggregator.cs
    startLine: 243
  syntax:
    content:
      CSharp: public Handle GetGenerationHandle(Handle handle, out int generation)
    parameters:
    - id: handle
      type:
        id: System.Reflection.Metadata.Handle
        name: Handle
        href: System.Reflection.Metadata.Handle.yaml
    - id: generation
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: Handle
