id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions
href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
name:
  CSharp: MetadataReaderExtensions
qualifiedName:
  CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
  startLine: 12
summary: Provides extension methods for working with certain raw elements of the Ecma 335 metadata tables and heaps.
syntax:
  content:
    CSharp: public static class MetadataReaderExtensions
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetTableRowCount
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 19
  summary: Returns the number of rows in the specified table.
  syntax:
    content:
      CSharp: public static int GetTableRowCount(this MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yaml
    return:
      id: Int32
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetTableRowSize
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 39
  summary: Returns the size of a row in the specified table.
  syntax:
    content:
      CSharp: public static int GetTableRowSize(this MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yaml
    return:
      id: Int32
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetTableMetadataOffset
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 104
  summary: Returns the offset from the start of metadata to the specified table.
  syntax:
    content:
      CSharp: public static unsafe int GetTableMetadataOffset(this MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yaml
    return:
      id: Int32
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetHeapSize
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 176
  summary: Returns the size of the specified heap.
  syntax:
    content:
      CSharp: public static int GetHeapSize(this MetadataReader reader, HeapIndex heapIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: heapIndex
      type:
        id: System.Reflection.Metadata.Ecma335.HeapIndex
        name: HeapIndex
        href: System.Reflection.Metadata.Ecma335.HeapIndex.yaml
    return:
      id: Int32
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetHeapMetadataOffset
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 191
  summary: Returns the offset from the start of metadata to the specified heap.
  syntax:
    content:
      CSharp: public static unsafe int GetHeapMetadataOffset(this MetadataReader reader, HeapIndex heapIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: heapIndex
      type:
        id: System.Reflection.Metadata.Ecma335.HeapIndex
        name: HeapIndex
        href: System.Reflection.Metadata.Ecma335.HeapIndex.yaml
    return:
      id: Int32
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetNextHandle
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 233
  summary: Returns the a handle to the UserString that follows the given one in the UserString heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static UserStringHandle GetNextHandle(this MetadataReader reader, UserStringHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: handle
      type:
        id: System.Reflection.Metadata.UserStringHandle
        name: UserStringHandle
        href: System.Reflection.Metadata.UserStringHandle.yaml
    return:
      id: UserStringHandle
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetNextHandle
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 247
  summary: Returns the a handle to the Blob that follows the given one in the Blob heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static BlobHandle GetNextHandle(this MetadataReader reader, BlobHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: handle
      type:
        id: System.Reflection.Metadata.BlobHandle
        name: BlobHandle
        href: System.Reflection.Metadata.BlobHandle.yaml
    return:
      id: BlobHandle
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetNextHandle
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 261
  summary: Returns the a handle to the String that follows the given one in the String heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static StringHandle GetNextHandle(this MetadataReader reader, StringHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    - id: handle
      type:
        id: System.Reflection.Metadata.StringHandle
        name: StringHandle
        href: System.Reflection.Metadata.StringHandle.yaml
    return:
      id: StringHandle
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetEditAndContinueLogEntries
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 275
  summary: Enumerates entries of EnC log.
  syntax:
    content:
      CSharp: public static IEnumerable<EditAndContinueLogEntry> GetEditAndContinueLogEntries(this MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    return:
      id: IEnumerable
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetEditAndContinueMapEntries
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 294
  summary: Enumerates entries of EnC map.
  syntax:
    content:
      CSharp: public static IEnumerable<Handle> GetEditAndContinueMapEntries(this MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    return:
      id: IEnumerable
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetTypesWithProperties
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 314
  summary: Enumerate types that define one or more properties.
  syntax:
    content:
      CSharp: public static IEnumerable<TypeDefinitionHandle> GetTypesWithProperties(this MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    return:
      id: IEnumerable
      description: >-
        The resulting sequence corresponds exactly to entries in PropertyMap table,

        i.e. n-th returned [System.Reflection.Metadata.TypeDefinitionHandle](System.Reflection.Metadata.TypeDefinitionHandle.yaml) is stored in n-th row of PropertyMap.
- id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yaml
  name:
    CSharp: GetTypesWithEvents
  qualifiedName:
    CSharp: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 334
  summary: Enumerate types that define one or more events.
  syntax:
    content:
      CSharp: public static IEnumerable<TypeDefinitionHandle> GetTypesWithEvents(this MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yaml
    return:
      id: IEnumerable
      description: >-
        The resulting sequence corresponds exactly to entries in EventMap table,

        i.e. n-th returned [System.Reflection.Metadata.TypeDefinitionHandle](System.Reflection.Metadata.TypeDefinitionHandle.yaml) is stored in n-th row of EventMap.
