items:
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: MetadataReaderExtensions
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions
  type: Class
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 12
  summary: Provides extension methods for working with certain raw elements of the Ecma 335 metadata tables and heaps.
  syntax:
    content:
      CSharp: public class MetadataReaderExtensions
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions
  children:
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
  - System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetTableRowCount(MetadataReader, TableIndex)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 19
  summary: Returns the number of rows in the specified table.
  syntax:
    content:
      CSharp: public static int GetTableRowCount(MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yml
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetTableRowSize(MetadataReader, TableIndex)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 39
  summary: Returns the size of a row in the specified table.
  syntax:
    content:
      CSharp: public static int GetTableRowSize(MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yml
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetTableMetadataOffset(MetadataReader, TableIndex)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.Ecma335.TableIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 104
  summary: Returns the offset from the start of metadata to the specified table.
  syntax:
    content:
      CSharp: public static int GetTableMetadataOffset(MetadataReader reader, TableIndex tableIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: tableIndex
      type:
        id: System.Reflection.Metadata.Ecma335.TableIndex
        name: TableIndex
        href: System.Reflection.Metadata.Ecma335.TableIndex.yml
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetHeapSize(MetadataReader, HeapIndex)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.Ecma335.HeapIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 176
  summary: Returns the size of the specified heap.
  syntax:
    content:
      CSharp: public static int GetHeapSize(MetadataReader reader, HeapIndex heapIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: heapIndex
      type:
        id: System.Reflection.Metadata.Ecma335.HeapIndex
        name: HeapIndex
        href: System.Reflection.Metadata.Ecma335.HeapIndex.yml
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetHeapMetadataOffset(MetadataReader, HeapIndex)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.Ecma335.HeapIndex)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 191
  summary: Returns the offset from the start of metadata to the specified heap.
  syntax:
    content:
      CSharp: public static int GetHeapMetadataOffset(MetadataReader reader, HeapIndex heapIndex)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: heapIndex
      type:
        id: System.Reflection.Metadata.Ecma335.HeapIndex
        name: HeapIndex
        href: System.Reflection.Metadata.Ecma335.HeapIndex.yml
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetNextHandle(MetadataReader, UserStringHandle)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.UserStringHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 233
  summary: Returns the a handle to the UserString that follows the given one in the UserString heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static UserStringHandle GetNextHandle(MetadataReader reader, UserStringHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: handle
      type:
        id: System.Reflection.Metadata.UserStringHandle
        name: UserStringHandle
        href: System.Reflection.Metadata.UserStringHandle.yml
    return:
      id: UserStringHandle
      type:
        id: System.Reflection.Metadata.UserStringHandle
        name: UserStringHandle
        href: System.Reflection.Metadata.UserStringHandle.yml
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetNextHandle(MetadataReader, BlobHandle)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.BlobHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 247
  summary: Returns the a handle to the Blob that follows the given one in the Blob heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static BlobHandle GetNextHandle(MetadataReader reader, BlobHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: handle
      type:
        id: System.Reflection.Metadata.BlobHandle
        name: BlobHandle
        href: System.Reflection.Metadata.BlobHandle.yml
    return:
      id: BlobHandle
      type:
        id: System.Reflection.Metadata.BlobHandle
        name: BlobHandle
        href: System.Reflection.Metadata.BlobHandle.yml
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetNextHandle(MetadataReader, StringHandle)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader, System.Reflection.Metadata.StringHandle)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 261
  summary: Returns the a handle to the String that follows the given one in the String heap or a nil handle if it is the last one.
  syntax:
    content:
      CSharp: public static StringHandle GetNextHandle(MetadataReader reader, StringHandle handle)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    - id: handle
      type:
        id: System.Reflection.Metadata.StringHandle
        name: StringHandle
        href: System.Reflection.Metadata.StringHandle.yml
    return:
      id: StringHandle
      type:
        id: System.Reflection.Metadata.StringHandle
        name: StringHandle
        href: System.Reflection.Metadata.StringHandle.yml
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetEditAndContinueLogEntries(MetadataReader)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 275
  summary: Enumerates entries of EnC log.
  syntax:
    content:
      CSharp: public static IEnumerable<EditAndContinueLogEntry> GetEditAndContinueLogEntries(MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry}
        name: IEnumerable<EditAndContinueLogEntry>
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetEditAndContinueMapEntries(MetadataReader)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 294
  summary: Enumerates entries of EnC map.
  syntax:
    content:
      CSharp: public static IEnumerable<EntityHandle> GetEditAndContinueMapEntries(MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{System.Reflection.Metadata.EntityHandle}
        name: IEnumerable<EntityHandle>
        isExternal: true
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetTypesWithProperties(MetadataReader)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 314
  summary: Enumerate types that define one or more properties.
  syntax:
    content:
      CSharp: public static IEnumerable<TypeDefinitionHandle> GetTypesWithProperties(MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{System.Reflection.Metadata.TypeDefinitionHandle}
        name: IEnumerable<TypeDefinitionHandle>
        isExternal: true
      description: >-
        The resulting sequence corresponds exactly to entries in PropertyMap table,

        i.e. n-th returned [System.Reflection.Metadata.TypeDefinitionHandle](System.Reflection.Metadata.TypeDefinitionHandle.yml) is stored in n-th row of PropertyMap.
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)
- uid: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
  href: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.yml
  name: GetTypesWithEvents(MetadataReader)
  fullName: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataReaderExtensions.cs
    startLine: 334
  summary: Enumerate types that define one or more events.
  syntax:
    content:
      CSharp: public static IEnumerable<TypeDefinitionHandle> GetTypesWithEvents(MetadataReader reader)
    parameters:
    - id: reader
      type:
        id: System.Reflection.Metadata.MetadataReader
        name: MetadataReader
        href: System.Reflection.Metadata.MetadataReader.yml
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{System.Reflection.Metadata.TypeDefinitionHandle}
        name: IEnumerable<TypeDefinitionHandle>
        isExternal: true
      description: >-
        The resulting sequence corresponds exactly to entries in EventMap table,

        i.e. n-th returned [System.Reflection.Metadata.TypeDefinitionHandle](System.Reflection.Metadata.TypeDefinitionHandle.yml) is stored in n-th row of EventMap.
  id: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)
