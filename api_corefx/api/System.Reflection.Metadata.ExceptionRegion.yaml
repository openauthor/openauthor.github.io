id: System.Reflection.Metadata.ExceptionRegion
href: System.Reflection.Metadata.ExceptionRegion.yaml
name:
  CSharp: ExceptionRegion
qualifiedName:
  CSharp: System.Reflection.Metadata.ExceptionRegion
type: Struct
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
  startLine: 5
syntax:
  content:
    CSharp: public struct ExceptionRegion
inheritance:
- id: System.ValueType
  name: System.ValueType
  isExternal: true
items:
- id: System.Reflection.Metadata.ExceptionRegion.Kind
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: Kind
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.Kind
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 30
  syntax:
    content:
      CSharp: public ExceptionRegionKind Kind { get; }
    parameters:
    - id: Kind
      type:
        id: System.Reflection.Metadata.ExceptionRegionKind
        name: ExceptionRegionKind
        href: System.Reflection.Metadata.ExceptionRegionKind.yaml
- id: System.Reflection.Metadata.ExceptionRegion.TryOffset
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: TryOffset
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.TryOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 38
  summary: Start IL offset of the try block.
  syntax:
    content:
      CSharp: public int TryOffset { get; }
    parameters:
    - id: TryOffset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Reflection.Metadata.ExceptionRegion.TryLength
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: TryLength
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.TryLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 46
  summary: Length in bytes of try block.
  syntax:
    content:
      CSharp: public int TryLength { get; }
    parameters:
    - id: TryLength
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: HandlerOffset
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 54
  summary: Start IL offset of the exception handler.
  syntax:
    content:
      CSharp: public int HandlerOffset { get; }
    parameters:
    - id: HandlerOffset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: HandlerLength
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 62
  summary: Length in bytes of the exception handler.
  syntax:
    content:
      CSharp: public int HandlerLength { get; }
    parameters:
    - id: HandlerLength
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: FilterOffset
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 70
  summary: IL offset of the start of the filter block, or -1 if the region is not a filter.
  syntax:
    content:
      CSharp: public int FilterOffset { get; }
    parameters:
    - id: FilterOffset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
- id: System.Reflection.Metadata.ExceptionRegion.CatchType
  href: System.Reflection.Metadata.ExceptionRegion.yaml
  name:
    CSharp: CatchType
  qualifiedName:
    CSharp: System.Reflection.Metadata.ExceptionRegion.CatchType
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 78
  summary: Returns a TypeRef, TypeDef, or TypeSpec handle if the region represents a catch, nil token otherwise.
  syntax:
    content:
      CSharp: public Handle CatchType { get; }
    parameters:
    - id: CatchType
      type:
        id: System.Reflection.Metadata.Handle
        name: Handle
        href: System.Reflection.Metadata.Handle.yaml
