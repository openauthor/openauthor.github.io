items:
- uid: System.Reflection.Metadata.ExceptionRegion
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: ExceptionRegion
  fullName: System.Reflection.Metadata.ExceptionRegion
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 5
  syntax:
    content:
      CSharp: public struct ExceptionRegion
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.ValueType
    name: ValueType
    isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion
  children:
  - System.Reflection.Metadata.ExceptionRegion.Kind
  - System.Reflection.Metadata.ExceptionRegion.TryOffset
  - System.Reflection.Metadata.ExceptionRegion.TryLength
  - System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  - System.Reflection.Metadata.ExceptionRegion.HandlerLength
  - System.Reflection.Metadata.ExceptionRegion.FilterOffset
  - System.Reflection.Metadata.ExceptionRegion.CatchType
- uid: System.Reflection.Metadata.ExceptionRegion.Kind
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: Kind
  fullName: System.Reflection.Metadata.ExceptionRegion.Kind
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 30
  syntax:
    content:
      CSharp: public ExceptionRegionKind Kind { get; }
    parameters:
    - id: Kind
      type:
        id: System.Reflection.Metadata.ExceptionRegionKind
        name: ExceptionRegionKind
        href: System.Reflection.Metadata.ExceptionRegionKind.yml
  id: System.Reflection.Metadata.ExceptionRegion.Kind
- uid: System.Reflection.Metadata.ExceptionRegion.TryOffset
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: TryOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.TryOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 38
  summary: Start IL offset of the try block.
  syntax:
    content:
      CSharp: public int TryOffset { get; }
    parameters:
    - id: TryOffset
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion.TryOffset
- uid: System.Reflection.Metadata.ExceptionRegion.TryLength
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: TryLength
  fullName: System.Reflection.Metadata.ExceptionRegion.TryLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 46
  summary: Length in bytes of try block.
  syntax:
    content:
      CSharp: public int TryLength { get; }
    parameters:
    - id: TryLength
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion.TryLength
- uid: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: HandlerOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 54
  summary: Start IL offset of the exception handler.
  syntax:
    content:
      CSharp: public int HandlerOffset { get; }
    parameters:
    - id: HandlerOffset
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion.HandlerOffset
- uid: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: HandlerLength
  fullName: System.Reflection.Metadata.ExceptionRegion.HandlerLength
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 62
  summary: Length in bytes of the exception handler.
  syntax:
    content:
      CSharp: public int HandlerLength { get; }
    parameters:
    - id: HandlerLength
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion.HandlerLength
- uid: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: FilterOffset
  fullName: System.Reflection.Metadata.ExceptionRegion.FilterOffset
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 70
  summary: IL offset of the start of the filter block, or -1 if the region is not a filter.
  syntax:
    content:
      CSharp: public int FilterOffset { get; }
    parameters:
    - id: FilterOffset
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: System.Reflection.Metadata.ExceptionRegion.FilterOffset
- uid: System.Reflection.Metadata.ExceptionRegion.CatchType
  href: System.Reflection.Metadata.ExceptionRegion.yml
  name: CatchType
  fullName: System.Reflection.Metadata.ExceptionRegion.CatchType
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/ExceptionRegion.cs
    startLine: 78
  summary: Returns a TypeRef, TypeDef, or TypeSpec handle if the region represents a catch, nil token otherwise.
  syntax:
    content:
      CSharp: public EntityHandle CatchType { get; }
    parameters:
    - id: CatchType
      type:
        id: System.Reflection.Metadata.EntityHandle
        name: EntityHandle
        href: System.Reflection.Metadata.EntityHandle.yml
  id: System.Reflection.Metadata.ExceptionRegion.CatchType
