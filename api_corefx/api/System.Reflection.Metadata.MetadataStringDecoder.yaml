id: System.Reflection.Metadata.MetadataStringDecoder
href: System.Reflection.Metadata.MetadataStringDecoder.yaml
name:
  CSharp: MetadataStringDecoder
qualifiedName:
  CSharp: System.Reflection.Metadata.MetadataStringDecoder
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringDecoder.cs
  startLine: 23
summary: >-
  Provides the [System.Reflection.Metadata.MetadataReader](System.Reflection.Metadata.MetadataReader.yaml) with a custom mechanism for decoding

  byte sequences in metadata that represent text.
syntax:
  content:
    CSharp: public class MetadataStringDecoder
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8
  href: System.Reflection.Metadata.MetadataStringDecoder.yaml
  name:
    CSharp: DefaultUTF8
  qualifiedName:
    CSharp: System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringDecoder.cs
    startLine: 32
  summary: >-
    The default decoder used by [System.Reflection.Metadata.MetadataReader](System.Reflection.Metadata.MetadataReader.yaml) to decode UTF-8 when

    no decoder is provided to the constructor.
  syntax:
    content:
      CSharp: public static MetadataStringDecoder DefaultUTF8 { get; }
    parameters:
    - id: DefaultUTF8
      type:
        id: System.Reflection.Metadata.MetadataStringDecoder
        name: MetadataStringDecoder
        href: System.Reflection.Metadata.MetadataStringDecoder.yaml
- id: System.Reflection.Metadata.MetadataStringDecoder.#ctor(Encoding)
  href: System.Reflection.Metadata.MetadataStringDecoder.yaml
  name:
    CSharp: MetadataStringDecoder(Encoding)
  qualifiedName:
    CSharp: System.Reflection.Metadata.MetadataStringDecoder.MetadataStringDecoder(Encoding)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringDecoder.cs
    startLine: 44
  summary: Creates a [System.Reflection.Metadata.MetadataStringDecoder](System.Reflection.Metadata.MetadataStringDecoder.yaml) for the given encoding.
  syntax:
    content:
      CSharp: public MetadataStringDecoder(Encoding encoding)
    parameters:
    - id: encoding
      type:
        id: Encoding
        name: Encoding
        isExternal: true
      description: The encoding to use.
    return:
      id: Void
- id: System.Reflection.Metadata.MetadataStringDecoder.Encoding
  href: System.Reflection.Metadata.MetadataStringDecoder.yaml
  name:
    CSharp: Encoding
  qualifiedName:
    CSharp: System.Reflection.Metadata.MetadataStringDecoder.Encoding
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringDecoder.cs
    startLine: 67
  summary: Gets the encoding used by this instance.
  syntax:
    content:
      CSharp: public Encoding Encoding { get; }
    parameters:
    - id: Encoding
      type:
        id: Encoding
        name: Encoding
        isExternal: true
- id: System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)
  href: System.Reflection.Metadata.MetadataStringDecoder.yaml
  name:
    CSharp: GetString
  qualifiedName:
    CSharp: System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataStringDecoder.cs
    startLine: 81
  summary: >-
    The mechanism through which the [System.Reflection.Metadata.MetadataReader](System.Reflection.Metadata.MetadataReader.yaml) obtains strings

    for byte sequences in metadata. Override this to cache strings if required.

    Otherwise, it is implemented by forwarding straight to [System.Reflection.Metadata.MetadataStringDecoder.Encoding](System.Reflection.Metadata.MetadataStringDecoder.yaml)

    and every call will allocate a new string.
  syntax:
    content:
      CSharp: public unsafe virtual String GetString(byte *bytes, int byteCount)
    parameters:
    - id: bytes
      type:
        isExternal: true
      description: Pointer to bytes to decode.
    - id: byteCount
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Number of bytes to decode.
    return:
      id: String
      description: The decoded string.
