id: System.Reflection.PortableExecutable.PEReader
href: System.Reflection.PortableExecutable.PEReader.yaml
name:
  CSharp: PEReader
qualifiedName:
  CSharp: System.Reflection.PortableExecutable.PEReader
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/dotnet/corefx.git
  path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
  startLine: 19
summary: Portable Executable format reader.
syntax:
  content:
    CSharp: public sealed class PEReader
inheritance:
- id: IDisposable
  name: IDisposable
  isExternal: true
items:
- id: System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEReader(System.Byte*,System.Int32)
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEReader(System.Byte*,System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 45
  summary: Creates a Portable Executable reader over a PE image stored in memory.
  syntax:
    content:
      CSharp: public unsafe PEReader(byte *peImage, int size)
    parameters:
    - id: peImage
      type:
        isExternal: true
      description: Pointer to the start of the PE image.
    - id: size
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The size of the PE image.
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.#ctor(Stream)
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEReader(Stream)
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEReader(Stream)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 72
  summary: Creates a Portable Executable reader over a PE image stored in a stream.
  syntax:
    content:
      CSharp: 'public PEReader(Stream peStream): this (peStream, PEStreamOptions.Default)'
    parameters:
    - id: peStream
      type:
        id: Stream
        name: Stream
        isExternal: true
      description: PE image stream.
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.#ctor(Stream,System.Reflection.PortableExecutable.PEStreamOptions)
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEReader(Stream,System.Reflection.PortableExecutable.PEStreamOptions)
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEReader(Stream,System.Reflection.PortableExecutable.PEStreamOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 101
  summary: Creates a Portable Executable reader over a PE image stored in a stream beginning at its current position and ending at the end of the stream.
  syntax:
    content:
      CSharp: 'public PEReader(Stream peStream, PEStreamOptions options): this (peStream, options, (int ? )null)'
    parameters:
    - id: peStream
      type:
        id: Stream
        name: Stream
        isExternal: true
      description: PE image stream.
    - id: options
      type:
        id: System.Reflection.PortableExecutable.PEStreamOptions
        name: PEStreamOptions
        href: System.Reflection.PortableExecutable.PEStreamOptions.yaml
      description: >-
        Options specifying how sections of the PE image are read from the stream.



        Unless [System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is specified, ownership of the stream is transferred to the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        upon successful argument validation. It will be disposed by the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml) and the caller must not manipulate it.



        Unless [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata](System.Reflection.PortableExecutable.PEStreamOptions.yaml) or [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is specified no data

        is read from the stream during the construction of the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml). Furthermore, the stream must not be manipulated

        by caller while the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml) is alive and undisposed.



        If [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata](System.Reflection.PortableExecutable.PEStreamOptions.yaml) or [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage](System.Reflection.PortableExecutable.PEStreamOptions.yaml), the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        will have read all of the data requested during construction. As such, if [System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is also

        specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        after construction.
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.#ctor(Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEReader(Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEReader(Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 127
  summary: Creates a Portable Executable reader over a PE image of the given size beginning at the stream's current position.
  syntax:
    content:
      CSharp: 'public PEReader(Stream peStream, PEStreamOptions options, int size): this (peStream, options, (int ? )size)'
    parameters:
    - id: peStream
      type:
        id: Stream
        name: Stream
        isExternal: true
      description: PE image stream.
    - id: options
      type:
        id: System.Reflection.PortableExecutable.PEStreamOptions
        name: PEStreamOptions
        href: System.Reflection.PortableExecutable.PEStreamOptions.yaml
      description: >-
        Options specifying how sections of the PE image are read from the stream.



        Unless [System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is specified, ownership of the stream is transferred to the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        upon successful argument validation. It will be disposed by the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml) and the caller must not manipulate it.



        Unless [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata](System.Reflection.PortableExecutable.PEStreamOptions.yaml) or [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is specified no data

        is read from the stream during the construction of the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml). Furthermore, the stream must not be manipulated

        by caller while the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml) is alive and undisposed.



        If [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata](System.Reflection.PortableExecutable.PEStreamOptions.yaml) or [System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage](System.Reflection.PortableExecutable.PEStreamOptions.yaml), the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        will have read all of the data requested during construction. As such, if [System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen](System.Reflection.PortableExecutable.PEStreamOptions.yaml) is also

        specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the [System.Reflection.PortableExecutable.PEReader](System.Reflection.PortableExecutable.PEReader.yaml)

        after construction.
    - id: size
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: PE image size.
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.#ctor(ImmutableArray{System.Byte})
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEReader(ImmutableArray{System.Byte})
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEReader(ImmutableArray{System.Byte})
  type: Constructor
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 204
  summary: Creates a Portable Executable reader over a PE image stored in a byte array.
  syntax:
    content:
      CSharp: public PEReader(ImmutableArray<byte> peImage)
    parameters:
    - id: peImage
      type:
        id: ImmutableArray{System.Byte}
        name: ImmutableArray{System.Byte}
        isExternal: true
      description: PE image.
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.Dispose
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: Dispose
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.Dispose
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 222
  summary: Disposes all memory allocated by the reader.
  syntax:
    content:
      CSharp: public void Dispose()
    parameters: []
    return:
      id: Void
- id: System.Reflection.PortableExecutable.PEReader.PEHeaders
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: PEHeaders
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.PEHeaders
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 264
  summary: Gets the PE headers.
  syntax:
    content:
      CSharp: public PEHeaders PEHeaders { get; }
    parameters:
    - id: PEHeaders
      type:
        id: System.Reflection.PortableExecutable.PEHeaders
        name: PEHeaders
        href: System.Reflection.PortableExecutable.PEHeaders.yaml
- id: System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: IsEntireImageAvailable
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 382
  summary: Return true if the reader can access the entire PE image.
  syntax:
    content:
      CSharp: public bool IsEntireImageAvailable { get; }
    parameters:
    - id: IsEntireImageAvailable
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Reflection.PortableExecutable.PEReader.GetEntireImage
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: GetEntireImage
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.GetEntireImage
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 391
  summary: Gets a pointer to and size of the PE image if available ([System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable](System.Reflection.PortableExecutable.PEReader.yaml)).
  syntax:
    content:
      CSharp: public PEMemoryBlock GetEntireImage()
    parameters: []
    return:
      id: PEMemoryBlock
- id: System.Reflection.PortableExecutable.PEReader.HasMetadata
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: HasMetadata
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.HasMetadata
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 400
  summary: Returns true if the PE image contains CLI metadata.
  syntax:
    content:
      CSharp: public bool HasMetadata { get; }
    parameters:
    - id: HasMetadata
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: System.Reflection.PortableExecutable.PEReader.GetMetadata
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: GetMetadata
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.GetMetadata
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 410
  summary: Loads PE section that contains CLI metadata.
  syntax:
    content:
      CSharp: public PEMemoryBlock GetMetadata()
    parameters: []
    return:
      id: PEMemoryBlock
- id: System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)
  href: System.Reflection.PortableExecutable.PEReader.yaml
  name:
    CSharp: GetSectionData
  qualifiedName:
    CSharp: System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEReader.cs
    startLine: 424
  summary: >-
    Loads PE section that contains the specified  into memory

    and returns a memory block that starts at  and ends at the end of the containing section.
  syntax:
    content:
      CSharp: public PEMemoryBlock GetSectionData(int relativeVirtualAddress)
    parameters:
    - id: relativeVirtualAddress
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Relative Virtual Address of the data to read.
    return:
      id: PEMemoryBlock
      description: An empty block if  doesn't represent a location in any of the PE sections of this PE image.
