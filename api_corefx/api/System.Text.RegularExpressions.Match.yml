items:
- uid: System.Text.RegularExpressions.Match
  href: System.Text.RegularExpressions.Match.yml
  name: Match
  fullName: System.Text.RegularExpressions.Match
  type: Class
  source:
    remote: &o0
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
    startLine: 35
  summary: Represents the results from a single regular expression match.
  syntax:
    content:
      CSharp: 'public class Match : Group'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  - id: System.Text.RegularExpressions.Capture
    name: Capture
    href: System.Text.RegularExpressions.Capture.yml
  - id: System.Text.RegularExpressions.Group
    name: Group
    href: System.Text.RegularExpressions.Group.yml
  id: System.Text.RegularExpressions.Match
  children:
  - System.Text.RegularExpressions.Match.Empty
  - System.Text.RegularExpressions.Match.Groups
  - System.Text.RegularExpressions.Match.NextMatch
  - System.Text.RegularExpressions.Match.Result(System.String)
- uid: System.Text.RegularExpressions.Match.Empty
  href: System.Text.RegularExpressions.Match.yml
  name: Empty
  fullName: System.Text.RegularExpressions.Match.Empty
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
    startLine: 56
  summary: Returns an empty Match object.
  syntax:
    content:
      CSharp: public static Match Empty { get; }
    parameters:
    - id: Empty
      type:
        id: System.Text.RegularExpressions.Match
        name: Match
        href: System.Text.RegularExpressions.Match.yml
  id: System.Text.RegularExpressions.Match.Empty
- uid: System.Text.RegularExpressions.Match.Groups
  href: System.Text.RegularExpressions.Match.yml
  name: Groups
  fullName: System.Text.RegularExpressions.Match.Groups
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
    startLine: 102
  syntax:
    content:
      CSharp: public virtual GroupCollection Groups { get; }
    parameters:
    - id: Groups
      type:
        id: System.Text.RegularExpressions.GroupCollection
        name: GroupCollection
        href: System.Text.RegularExpressions.GroupCollection.yml
  id: System.Text.RegularExpressions.Match.Groups
- uid: System.Text.RegularExpressions.Match.NextMatch
  href: System.Text.RegularExpressions.Match.yml
  name: NextMatch()
  fullName: System.Text.RegularExpressions.Match.NextMatch()
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
    startLine: 118
  summary: >-
    Returns a new Match with the results for the next match, starting

    at the position at which the last match ended (at the character beyond the last

    matched character).
  syntax:
    content:
      CSharp: public Match NextMatch()
    parameters: []
    return:
      id: Match
      type:
        id: System.Text.RegularExpressions.Match
        name: Match
        href: System.Text.RegularExpressions.Match.yml
  id: System.Text.RegularExpressions.Match.NextMatch
- uid: System.Text.RegularExpressions.Match.Result(System.String)
  href: System.Text.RegularExpressions.Match.yml
  name: Result(string)
  fullName: System.Text.RegularExpressions.Match.Result(string)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatch.cs
    startLine: 131
  summary: >-
    Returns the expansion of the passed replacement pattern. For

    example, if the replacement pattern is ?$1$2?, Result returns the concatenation

    of Group(1).ToString() and Group(2).ToString().
  syntax:
    content:
      CSharp: public virtual string Result(string replacement)
    parameters:
    - id: replacement
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
  id: System.Text.RegularExpressions.Match.Result(System.String)
