items:
- uid: System.Threading.Tasks.Dataflow.DataflowBlock
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: DataflowBlock
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 28
  summary: Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.
  syntax:
    content:
      CSharp: public static class DataflowBlock
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: System.Threading.Tasks.Dataflow.DataflowBlock
  children:
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 37
  summary: Links the [System.Threading.Tasks.Dataflow.ISourceBlock`1](System.Threading.Tasks.Dataflow.ISourceBlock`1.yml) to the specified [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml).
  syntax:
    content:
      CSharp: public static IDisposable LinkTo<TOutput>(this ISourceBlock<TOutput> source, ITargetBlock<TOutput> target)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to link.
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) to which to connect the source.
    return:
      id: IDisposable
      description: An IDisposable that, upon calling Dispose, will unlink the source from the target.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Predicate<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 59
  summary: Links the [System.Threading.Tasks.Dataflow.ISourceBlock`1](System.Threading.Tasks.Dataflow.ISourceBlock`1.yml) to the specified [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) using the specified filter.
  syntax:
    content:
      CSharp: public static IDisposable LinkTo<TOutput>(this ISourceBlock<TOutput> source, ITargetBlock<TOutput> target, Predicate<TOutput> predicate)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to link.
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) to which to connect the source.
    - id: predicate
      type:
        id: System.Predicate{``0}
        name: System.Predicate{``0}
        isExternal: true
      description: The filter a message must pass in order for it to propagate from the source to the target.
    return:
      id: IDisposable
      description: An IDisposable that, upon calling Dispose, will unlink the source from the target.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions, System.Predicate<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 78
  summary: Links the [System.Threading.Tasks.Dataflow.ISourceBlock`1](System.Threading.Tasks.Dataflow.ISourceBlock`1.yml) to the specified [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) using the specified filter.
  syntax:
    content:
      CSharp: public static IDisposable LinkTo<TOutput>(this ISourceBlock<TOutput> source, ITargetBlock<TOutput> target, DataflowLinkOptions linkOptions, Predicate<TOutput> predicate)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to link.
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) to which to connect the source.
    - id: linkOptions
      type:
        id: System.Threading.Tasks.Dataflow.DataflowLinkOptions
        name: DataflowLinkOptions
        href: System.Threading.Tasks.Dataflow.DataflowLinkOptions.yml
      description: The options to use to configure the link.
    - id: predicate
      type:
        id: System.Predicate{``0}
        name: System.Predicate{``0}
        isExternal: true
      description: The filter a message must pass in order for it to propagate from the source to the target.
    return:
      id: IDisposable
      description: An IDisposable that, upon calling Dispose, will unlink the source from the target.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Post<TInput>(ITargetBlock<TInput>, TInput)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Post<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 276
  summary: Posts an item to the [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml).
  syntax:
    content:
      CSharp: public static Boolean Post<TInput>(this ITargetBlock<TInput> target, TInput item)
    parameters:
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The target block.
    - id: item
      type:
        id: TInput
        name: TInput
        href: TInput
      description: The item being offered to the target.
    return:
      id: Boolean
      description: true if the item was accepted by the target block; otherwise, false.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 297
  summary: Asynchronously offers a message to the target message block, allowing for postponement.
  syntax:
    content:
      CSharp: public static Task<Boolean> SendAsync<TInput>(this ITargetBlock<TInput> target, TInput item)
    parameters:
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The target to which to post the data.
    - id: item
      type:
        id: TInput
        name: TInput
        href: TInput
      description: The item being offered to the target.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that represents the asynchronous send.  If the target

        accepts and consumes the offered element during the call to SendAsync, upon return

        from the call the resulting [System.Threading.Tasks.Task`1](#) will be completed and its [System.Threading.Tasks.Task`1.Result](#)

        property will return true.  If the target declines the offered element during the call, upon return from the call the resulting [System.Threading.Tasks.Task`1](#) will

        be completed and its [System.Threading.Tasks.Task`1.Result](#) property will return false. If the target

        postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which

        point the Task will complete, with its [System.Threading.Tasks.Task`1.Result](#) indicating whether the message was consumed.  If the target

        never attempts to consume or release the message, the returned task will never complete.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 324
  summary: Asynchronously offers a message to the target message block, allowing for postponement.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")] public static Task<Boolean> SendAsync<TInput>(this ITargetBlock<TInput> target, TInput item, CancellationToken cancellationToken)'
    parameters:
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The target to which to post the data.
    - id: item
      type:
        id: TInput
        name: TInput
        href: TInput
      description: The item being offered to the target.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The cancellation token with which to request cancellation of the send operation.
    return:
      id: Task
      description: >-
        A  that represents the asynchronous send.  If the target

        accepts and consumes the offered element during the call to SendAsync, upon return

        from the call the resulting  will be completed and its Result

        property will return true.  If the target declines the offered element during the call, upon return from the call the resulting  will

        be completed and its Result property will return false. If the target

        postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which

        point the Task will complete, with its  indicating whether the message was consumed.  If the target

        never attempts to consume or release the message, the returned task will never complete.



        If cancellation is requested before the target has successfully consumed the sent data,

        the returned task will complete in the Canceled state and the data will no longer be available to the target.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, out TOutput)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive<TOutput>(System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>, out TOutput)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 812
  summary: Attempts to synchronously receive an item from the [System.Threading.Tasks.Dataflow.ISourceBlock`1](System.Threading.Tasks.Dataflow.ISourceBlock`1.yml).
  syntax:
    content:
      CSharp: public static bool TryReceive<TOutput>(this IReceivableSourceBlock<TOutput> source, out TOutput item)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0}
        name: IReceivableSourceBlock
        href: System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0}
      description: The source from which to receive.
    - id: item
      type:
        id: TOutput
        name: TOutput
        href: TOutput
      description: The item received from the source.
    return:
      id: Boolean
      description: true if an item could be received; otherwise, false.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 831
  summary: Asynchronously receives a value from the specified source.
  syntax:
    content:
      CSharp: public static Task<TOutput> ReceiveAsync<TOutput>(this ISourceBlock<TOutput> source)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to asynchronously receive.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that represents the asynchronous receive operation.  When an item is successfully received from the source,

        the returned task will be completed and its [System.Threading.Tasks.Task`1.Result](#) will return the received item.  If an item cannot be retrieved,

        because the source is empty and completed, the returned task will be canceled.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 848
  summary: Asynchronously receives a value from the specified source.
  syntax:
    content:
      CSharp: public static Task<TOutput> ReceiveAsync<TOutput>(this ISourceBlock<TOutput> source, CancellationToken cancellationToken)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to asynchronously receive.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The [System.Threading.CancellationToken](#) which may be used to cancel the receive operation.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that represents the asynchronous receive operation.  When an item is successfully received from the source,

        the returned task will be completed and its [System.Threading.Tasks.Task`1.Result](#) will return the received item.  If an item cannot be retrieved,

        either because cancellation is requested or the source is empty and completed, the returned task will be canceled.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 868
  summary: Asynchronously receives a value from the specified source.
  syntax:
    content:
      CSharp: public static Task<TOutput> ReceiveAsync<TOutput>(this ISourceBlock<TOutput> source, TimeSpan timeout)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to asynchronously receive.
    - id: timeout
      type:
        id: System.TimeSpan
        name: System.TimeSpan
        isExternal: true
      description: A [System.TimeSpan](#) that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that represents the asynchronous receive operation.  When an item is successfully received from the source,

        the returned task will be completed and its [System.Threading.Tasks.Task`1.Result](#) will return the received item.  If an item cannot be retrieved,

        either because the timeout expires or the source is empty and completed, the returned task will be canceled.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 889
  summary: Asynchronously receives a value from the specified source.
  syntax:
    content:
      CSharp: public static Task<TOutput> ReceiveAsync<TOutput>(this ISourceBlock<TOutput> source, TimeSpan timeout, CancellationToken cancellationToken)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to asynchronously receive.
    - id: timeout
      type:
        id: System.TimeSpan
        name: System.TimeSpan
        isExternal: true
      description: A [System.TimeSpan](#) that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The [System.Threading.CancellationToken](#) which may be used to cancel the receive operation.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that represents the asynchronous receive operation.  When an item is successfully received from the source,

        the returned task will be completed and its [System.Threading.Tasks.Task`1.Result](#) will return the received item.  If an item cannot be retrieved,

        either because the timeout expires, cancellation is requested, or the source is empty and completed, the returned task will be canceled.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Receive<TOutput>(ISourceBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 910
  summary: Synchronously receives an item from the source.
  syntax:
    content:
      CSharp: public static TOutput Receive<TOutput>(this ISourceBlock<TOutput> source)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to receive.
    return:
      id: TOutput
      description: The received item.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 928
  summary: Synchronously receives an item from the source.
  syntax:
    content:
      CSharp: public static TOutput Receive<TOutput>(this ISourceBlock<TOutput> source, CancellationToken cancellationToken)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to receive.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The [System.Threading.CancellationToken](#) which may be used to cancel the receive operation.
    return:
      id: TOutput
      description: The received item.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 949
  summary: Synchronously receives an item from the source.
  syntax:
    content:
      CSharp: public static TOutput Receive<TOutput>(this ISourceBlock<TOutput> source, TimeSpan timeout)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to receive.
    - id: timeout
      type:
        id: System.TimeSpan
        name: System.TimeSpan
        isExternal: true
      description: A [System.TimeSpan](#) that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    return:
      id: TOutput
      description: The received item.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 972
  summary: Synchronously receives an item from the source.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Usage", "CA2200:RethrowToPreserveStackDetails")] public static TOutput Receive<TOutput>(this ISourceBlock<TOutput> source, TimeSpan timeout, CancellationToken cancellationToken)'
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source from which to receive.
    - id: timeout
      type:
        id: System.TimeSpan
        name: System.TimeSpan
        isExternal: true
      description: A [System.TimeSpan](#) that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The [System.Threading.CancellationToken](#) which may be used to cancel the receive operation.
    return:
      id: TOutput
      description: The received item.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1445
  summary: >-
    Provides a [System.Threading.Tasks.Task`1](#)

    that asynchronously monitors the source for available output.
  syntax:
    content:
      CSharp: public static Task<bool> OutputAvailableAsync<TOutput>(this ISourceBlock<TOutput> source)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source to monitor.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that informs of whether and when

        more output is available.  When the task completes, if its [System.Threading.Tasks.Task`1.Result](#) is true, more output

        is available in the source (though another consumer of the source may retrieve the data).

        If it returns false, more output is not and will never be available, due to the source

        completing prior to output being available.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1464
  summary: >-
    Provides a [System.Threading.Tasks.Task`1](#)

    that asynchronously monitors the source for available output.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")] [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")] [SuppressMessage("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope")] public static Task<bool> OutputAvailableAsync<TOutput>(this ISourceBlock<TOutput> source, CancellationToken cancellationToken)'
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source to monitor.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: The cancellation token with which to cancel the asynchronous operation.
    return:
      id: Task
      description: >-
        A [System.Threading.Tasks.Task`1](#) that informs of whether and when

        more output is available.  When the task completes, if its [System.Threading.Tasks.Task`1.Result](#) is true, more output

        is available in the source (though another consumer of the source may retrieve the data).

        If it returns false, more output is not and will never be available, due to the source

        completing prior to output being available.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Encapsulate<TInput, TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate<TInput, TOutput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1645
  summary: Encapsulates a target and a source into a single propagator.
  syntax:
    content:
      CSharp: public static IPropagatorBlock<TInput, TOutput> Encapsulate<TInput, TOutput>(ITargetBlock<TInput> target, ISourceBlock<TOutput> source)
    parameters:
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The target to encapsulate.
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
      description: The source to encapsulate.
    return:
      id: IPropagatorBlock
      description: The encapsulated target and source.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Choose<T1, T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Choose<T1, T2>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1805
  summary: Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content:
      CSharp: public static Task<Int32> Choose<T1, T2>(ISourceBlock<T1> source1, Action<T1> action1, ISourceBlock<T2> source2, Action<T2> action2)
    parameters:
    - id: source1
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The first source.
    - id: action1
      type:
        id: System.Action{``0}
        name: System.Action{``0}
        isExternal: true
      description: The handler to execute on data from the first source.
    - id: source2
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
      description: The second source.
    - id: action2
      type:
        id: System.Action{``1}
        name: System.Action{``1}
        isExternal: true
      description: The handler to execute on data from the second source.
    return:
      id: Task
      description: >-
        A  that represents the asynchronous choice.

        If both sources are completed prior to the choice completing,

        the resulting task will be canceled. When one of the sources has data available and successfully propagates

        it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,

        the task will end in the  state containing the unhandled exception, otherwise the task

        will end with its  set to either 0 or 1 to

        represent the first or second source, respectively.



        This method will only consume an element from one of the two data sources, never both.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Choose<T1, T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Choose<T1, T2>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1843
  summary: Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope")] public static Task<Int32> Choose<T1, T2>(ISourceBlock<T1> source1, Action<T1> action1, ISourceBlock<T2> source2, Action<T2> action2, DataflowBlockOptions dataflowBlockOptions)'
    parameters:
    - id: source1
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The first source.
    - id: action1
      type:
        id: System.Action{``0}
        name: System.Action{``0}
        isExternal: true
      description: The handler to execute on data from the first source.
    - id: source2
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
      description: The second source.
    - id: action2
      type:
        id: System.Action{``1}
        name: System.Action{``1}
        isExternal: true
      description: The handler to execute on data from the second source.
    - id: dataflowBlockOptions
      type:
        id: System.Threading.Tasks.Dataflow.DataflowBlockOptions
        name: DataflowBlockOptions
        href: System.Threading.Tasks.Dataflow.DataflowBlockOptions.yml
      description: The options with which to configure this choice.
    return:
      id: Task
      description: >-
        A  that represents the asynchronous choice.

        If both sources are completed prior to the choice completing, or if the CancellationToken

        provided as part of  is canceled prior to the choice completing,

        the resulting task will be canceled. When one of the sources has data available and successfully propagates

        it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,

        the task will end in the  state containing the unhandled exception, otherwise the task

        will end with its  set to either 0 or 1 to

        represent the first or second source, respectively.



        This method will only consume an element from one of the two data sources, never both.

        If cancellation is requested after an element has been received, the cancellation request will be ignored,

        and the relevant handler will be allowed to execute.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Choose<T1, T2, T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Choose<T1, T2, T3>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.ISourceBlock<T3>, System.Action<T3>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1891
  summary: Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content:
      CSharp: public static Task<Int32> Choose<T1, T2, T3>(ISourceBlock<T1> source1, Action<T1> action1, ISourceBlock<T2> source2, Action<T2> action2, ISourceBlock<T3> source3, Action<T3> action3)
    parameters:
    - id: source1
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The first source.
    - id: action1
      type:
        id: System.Action{``0}
        name: System.Action{``0}
        isExternal: true
      description: The handler to execute on data from the first source.
    - id: source2
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
      description: The second source.
    - id: action2
      type:
        id: System.Action{``1}
        name: System.Action{``1}
        isExternal: true
      description: The handler to execute on data from the second source.
    - id: source3
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``2}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``2}
      description: The third source.
    - id: action3
      type:
        id: System.Action{``2}
        name: System.Action{``2}
        isExternal: true
      description: The handler to execute on data from the third source.
    return:
      id: Task
      description: >-
        A  that represents the asynchronous choice.

        If all sources are completed prior to the choice completing,

        the resulting task will be canceled. When one of the sources has data available and successfully propagates

        it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,

        the task will end in the  state containing the unhandled exception, otherwise the task

        will end with its  set to the 0-based index of the source.



        This method will only consume an element from one of the data sources, never more than one.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: Choose<T1, T2, T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.Choose<T1, T2, T3>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.ISourceBlock<T3>, System.Action<T3>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 1934
  summary: Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content:
      CSharp: '[SuppressMessage("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope")] public static Task<Int32> Choose<T1, T2, T3>(ISourceBlock<T1> source1, Action<T1> action1, ISourceBlock<T2> source2, Action<T2> action2, ISourceBlock<T3> source3, Action<T3> action3, DataflowBlockOptions dataflowBlockOptions)'
    parameters:
    - id: source1
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The first source.
    - id: action1
      type:
        id: System.Action{``0}
        name: System.Action{``0}
        isExternal: true
      description: The handler to execute on data from the first source.
    - id: source2
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``1}
      description: The second source.
    - id: action2
      type:
        id: System.Action{``1}
        name: System.Action{``1}
        isExternal: true
      description: The handler to execute on data from the second source.
    - id: source3
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``2}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``2}
      description: The third source.
    - id: action3
      type:
        id: System.Action{``2}
        name: System.Action{``2}
        isExternal: true
      description: The handler to execute on data from the third source.
    - id: dataflowBlockOptions
      type:
        id: System.Threading.Tasks.Dataflow.DataflowBlockOptions
        name: DataflowBlockOptions
        href: System.Threading.Tasks.Dataflow.DataflowBlockOptions.yml
      description: The options with which to configure this choice.
    return:
      id: Task
      description: >-
        A  that represents the asynchronous choice.

        If all sources are completed prior to the choice completing, or if the CancellationToken

        provided as part of  is canceled prior to the choice completing,

        the resulting task will be canceled. When one of the sources has data available and successfully propagates

        it to the choice, the resulting task will complete when the handler completes: if the handler throws an exception,

        the task will end in the  state containing the unhandled exception, otherwise the task

        will end with its  set to the 0-based index of the source.



        This method will only consume an element from one of the data sources, never more than one.

        If cancellation is requested after an element has been received, the cancellation request will be ignored,

        and the relevant handler will be allowed to execute.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: AsObservable<TOutput>(ISourceBlock<TOutput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 2313
  summary: Creates a new [System.IObservable`1](#) abstraction over the [System.Threading.Tasks.Dataflow.ISourceBlock`1](System.Threading.Tasks.Dataflow.ISourceBlock`1.yml).
  syntax:
    content:
      CSharp: public static IObservable<TOutput> AsObservable<TOutput>(this ISourceBlock<TOutput> source)
    parameters:
    - id: source
      type:
        id: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
        name: ISourceBlock
        href: System.Threading.Tasks.Dataflow.ISourceBlock{``0}
      description: The source to wrap.
    return:
      id: IObservable
      description: An IObservable{TOutput} that enables observers to be subscribed to the source.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: AsObserver<TInput>(ITargetBlock<TInput>)
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 2690
  summary: Creates a new [System.IObserver`1](#) abstraction over the [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml).
  syntax:
    content:
      CSharp: public static IObserver<TInput> AsObserver<TInput>(this ITargetBlock<TInput> target)
    parameters:
    - id: target
      type:
        id: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
        name: ITargetBlock
        href: System.Threading.Tasks.Dataflow.ITargetBlock{``0}
      description: The target to wrap.
    return:
      id: IObserver
      description: An observer that wraps the target block.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
  href: System.Threading.Tasks.Dataflow.DataflowBlock.yml
  name: NullTarget<TInput>()
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget<TInput>()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Dataflow/src/Base/DataflowBlock.cs
    startLine: 2766
  summary: Gets a target block that synchronously accepts all messages offered to it and drops them.
  syntax:
    content:
      CSharp: public static ITargetBlock<TInput> NullTarget<TInput>()
    parameters: []
    return:
      id: ITargetBlock
      description: A [System.Threading.Tasks.Dataflow.ITargetBlock`1](System.Threading.Tasks.Dataflow.ITargetBlock`1.yml) that accepts and subsequently drops all offered messages.
  id: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
