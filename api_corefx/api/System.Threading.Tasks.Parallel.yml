items:
- uid: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  source:
    remote: &o0
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
      key: 882a41e3
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 136
  summary: Provides support for parallel loops and regions.
  syntax:
    content:
      CSharp: public class Parallel
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: System.Threading.Tasks.Parallel
  children:
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(params Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(params System.Action[])
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 164
  summary: Executes each of the provided actions, possibly in parallel.
  syntax:
    content:
      CSharp: public static void Invoke(params Action[] actions)
    parameters:
    - id: actions
      type:
        id: System.Array
        name: Action[]
        isExternal: true
      description: An array of [System.Action]() to execute.
  id: System.Threading.Tasks.Parallel.Invoke(System.Action[])
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(ParallelOptions, params Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, params System.Action[])
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 197
  summary: Executes each of the provided actions, possibly in parallel.
  syntax:
    content:
      CSharp: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)
    parameters:
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: actions
      type:
        id: System.Array
        name: Action[]
        isExternal: true
      description: An array of [System.Action]() to execute.
  id: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  href: System.Threading.Tasks.Parallel.yml
  name: For(int, int, Action<int>)
  fullName: System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 391
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: body
      type:
        id: System.Action{System.Int32}
        name: Action<int>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: For(long, long, Action<long>)
  fullName: System.Threading.Tasks.Parallel.For(long, long, System.Action<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 420
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: body
      type:
        id: System.Action{System.Int64}
        name: Action<long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  href: System.Threading.Tasks.Parallel.yml
  name: For(int, int, ParallelOptions, Action<int>)
  fullName: System.Threading.Tasks.Parallel.For(int, int, System.Threading.Tasks.ParallelOptions, System.Action<int>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 459
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{System.Int32}
        name: Action<int>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: For(long, long, ParallelOptions, Action<long>)
  fullName: System.Threading.Tasks.Parallel.For(long, long, System.Threading.Tasks.ParallelOptions, System.Action<long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 502
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{System.Int64}
        name: Action<long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: For(int, int, Action<int, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(int, int, System.Action<int, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 558
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: body
      type:
        id: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
        name: Action<int, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: For(long, long, Action<long, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(long, long, System.Action<long, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 588
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: body
      type:
        id: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
        name: Action<long, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: For(int, int, ParallelOptions, Action<int, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(int, int, System.Threading.Tasks.ParallelOptions, System.Action<int, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 629
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
        name: Action<int, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: For(long, long, ParallelOptions, Action<long, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(long, long, System.Threading.Tasks.ParallelOptions, System.Action<long, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 674
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
        name: Action<long, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(int, int, Func<TLocal>, Func<int, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(int, int, System.Func<TLocal>, System.Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 729
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: localInit
      type:
        id: System.Func{``0}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0}
        name: Func<int, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``0}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(long, long, Func<TLocal>, Func<long, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(long, long, System.Func<TLocal>, System.Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 791
  summary: Executes a for loop in which iterations may run in parallel.  Supports 64-bit indices.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: localInit
      type:
        id: System.Func{``0}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0}
        name: Func<long, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``0}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(int, int, ParallelOptions, Func<TLocal>, Func<int, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(int, int, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 864
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``0}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0}
        name: Func<int, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``0}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(long, long, ParallelOptions, Func<TLocal>, Func<long, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(long, long, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 941
  summary: Executes a for loop in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: fromInclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The start index, inclusive.
    - id: toExclusive
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The end index, exclusive.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``0}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0}
        name: Func<long, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``0}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1531
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: body
      type:
        id: System.Action{``0}
        name: Action<TSource>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1576
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0}
        name: Action<TSource>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1616
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState}
        name: Action<TSource, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1663
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState}
        name: Action<TSource, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, long>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1703
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64}
        name: Action<TSource, ParallelLoopState, long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, long>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1750
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64}
        name: Action<TSource, ParallelLoopState, long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1810
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1}
        name: Func<TSource, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1886
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1}
        name: Func<TSource, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, long, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1956
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1}
        name: Func<TSource, ParallelLoopState, long, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, long, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2032
  summary: >-
    Executes a for each operation on an [System.Collections.IEnumerable{TSource}]()

    in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: IEnumerable<TSource>
        isExternal: true
      description: An enumerable data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1}
        name: Func<TSource, ParallelLoopState, long, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2288
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: body
      type:
        id: System.Action{``0}
        name: Action<TSource>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2347
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState}
        name: Action<TSource, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, long>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2409
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.OrderablePartitioner{``0}
        name: OrderablePartitioner<TSource>
        isExternal: true
      description: The OrderablePartitioner that contains the original data source.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64}
        name: Action<TSource, ParallelLoopState, long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2491
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1}
        name: Func<TSource, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, long, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2581
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.OrderablePartitioner{``0}
        name: OrderablePartitioner<TSource>
        isExternal: true
      description: The OrderablePartitioner that contains the original data source.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1}
        name: Func<TSource, ParallelLoopState, long, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2664
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0}
        name: Action<TSource>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2739
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState}
        name: Action<TSource, ParallelLoopState>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, long>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2817
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.OrderablePartitioner{``0}
        name: OrderablePartitioner<TSource>
        isExternal: true
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: body
      type:
        id: System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64}
        name: Action<TSource, ParallelLoopState, long>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2915
  summary: Executes a for each operation on a [System.Collections.Concurrent.Partitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.Partitioner{``0}
        name: Partitioner<TSource>
        isExternal: true
      description: The Partitioner that contains the original data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1}
        name: Func<TSource, ParallelLoopState, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, long, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 3021
  summary: Executes a for each operation on a [System.Collections.Concurrent.OrderablePartitioner{TSource}]() in which iterations may run in parallel.
  syntax:
    content:
      CSharp: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    parameters:
    - id: source
      type:
        id: System.Collections.Concurrent.OrderablePartitioner{``0}
        name: OrderablePartitioner<TSource>
        isExternal: true
      description: The OrderablePartitioner that contains the original data source.
    - id: parallelOptions
      type:
        id: System.Threading.Tasks.ParallelOptions
        name: ParallelOptions
        href: System.Threading.Tasks.ParallelOptions.yml
      description: >-
        A [System.Threading.Tasks.ParallelOptions](System.Threading.Tasks.ParallelOptions.yml)

        instance that configures the behavior of this operation.
    - id: localInit
      type:
        id: System.Func{``1}
        name: Func<TLocal>
        isExternal: true
      description: >-
        The function delegate that returns the initial state of the local data

        for each thread.
    - id: body
      type:
        id: System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1}
        name: Func<TSource, ParallelLoopState, long, TLocal, TLocal>
        isExternal: true
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type:
        id: System.Action{``1}
        name: Action<TLocal>
        isExternal: true
      description: >-
        The delegate that performs a final action on the local state of each

        thread.
    return:
      id: ParallelLoopResult
      type:
        id: System.Threading.Tasks.ParallelLoopResult
        name: ParallelLoopResult
        href: System.Threading.Tasks.ParallelLoopResult.yml
      description: >-
        A [System.Threading.Tasks.ParallelLoopResult](System.Threading.Tasks.ParallelLoopResult.yml) structure

        that contains information on what portion of the loop completed.
  id: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
