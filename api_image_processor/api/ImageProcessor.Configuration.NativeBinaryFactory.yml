items:
- uid: ImageProcessor.Configuration.NativeBinaryFactory
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: NativeBinaryFactory
  fullName: ImageProcessor.Configuration.NativeBinaryFactory
  type: Class
  source:
    remote: &o0
      path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
      branch: V2
      repo: https://github.com/JimBobSquarePants/ImageProcessor.git
      key: 6d1ac546
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 22
  summary: Controls the loading and unloading of any native binaries required by ImageProcessor.
  syntax:
    content:
      CSharp: 'public class NativeBinaryFactory : IDisposable'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: ImageProcessor.Configuration.NativeBinaryFactory
  children:
  - ImageProcessor.Configuration.NativeBinaryFactory.#ctor
  - ImageProcessor.Configuration.NativeBinaryFactory.Finalize
  - ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment
  - ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(System.String,System.Byte[])
  - ImageProcessor.Configuration.NativeBinaryFactory.Dispose
  - ImageProcessor.Configuration.NativeBinaryFactory.Dispose(System.Boolean)
- uid: ImageProcessor.Configuration.NativeBinaryFactory.#ctor
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: NativeBinaryFactory()
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.NativeBinaryFactory()
  type: Constructor
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 50
  summary: Initializes a new instance of the [ImageProcessor.Configuration.NativeBinaryFactory](api/ImageProcessor.Configuration.NativeBinaryFactory.yml) class.
  syntax:
    content:
      CSharp: public NativeBinaryFactory()
    parameters: []
  id: ImageProcessor.Configuration.NativeBinaryFactory.#ctor
- uid: ImageProcessor.Configuration.NativeBinaryFactory.Finalize
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: ~NativeBinaryFactory()
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.~NativeBinaryFactory()
  type: Method
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 65
  summary: Finalizes an instance of the [ImageProcessor.Configuration.NativeBinaryFactory](api/ImageProcessor.Configuration.NativeBinaryFactory.yml) class.
  syntax:
    content:
      CSharp: ~NativeBinaryFactory() { // Do not re-create Dispose clean-up code here. // Calling Dispose(false) is optimal in terms of // readability and maintainability. this.Dispose(false); }
    parameters: []
  id: ImageProcessor.Configuration.NativeBinaryFactory.Finalize
- uid: ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: Is64BitEnvironment
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment
  type: Property
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 76
  summary: Gets a value indicating whether the operating environment is 64 bit.
  syntax:
    content:
      CSharp: public bool Is64BitEnvironment { get; }
    parameters:
    - id: Is64BitEnvironment
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment
- uid: ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(System.String,System.Byte[])
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: RegisterNativeBinary(string, byte[])
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(string, byte[])
  type: Method
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 96
  summary: Registers any embedded native (unmanaged) binaries required by ImageProcessor.
  syntax:
    content:
      CSharp: public void RegisterNativeBinary(string name, byte[] resourceBytes)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
      description: The name of the native binary.
    - id: resourceBytes
      type:
        id: System.Array
        name: byte[]
        isExternal: true
      description: The resource bytes containing the native binary.
  id: ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(System.String,System.Byte[])
- uid: ImageProcessor.Configuration.NativeBinaryFactory.Dispose
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: Dispose()
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 160
  summary: Disposes the object and frees resources for the Garbage Collector.
  syntax:
    content:
      CSharp: public void Dispose()
    parameters: []
  id: ImageProcessor.Configuration.NativeBinaryFactory.Dispose
- uid: ImageProcessor.Configuration.NativeBinaryFactory.Dispose(System.Boolean)
  href: ImageProcessor.Configuration.NativeBinaryFactory.yml
  name: Dispose(bool)
  fullName: ImageProcessor.Configuration.NativeBinaryFactory.Dispose(bool)
  type: Method
  source:
    remote: *o0
    path: src/ImageProcessor/Configuration/NativeBinaryFactory.cs
    startLine: 176
  summary: Disposes the object and frees resources for the Garbage Collector.
  syntax:
    content:
      CSharp: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: If true, the object gets disposed.
  id: ImageProcessor.Configuration.NativeBinaryFactory.Dispose(System.Boolean)
