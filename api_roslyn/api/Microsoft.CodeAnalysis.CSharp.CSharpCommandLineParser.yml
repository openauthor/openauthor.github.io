items:
- uid: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser
  href: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.yml
  name: CSharpCommandLineParser
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs
    startLine: 18
  syntax:
    content:
      CSharp: public class CSharpCommandLineParser
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.CommandLineParser
    name: CommandLineParser
    href: Microsoft.CodeAnalysis.CommandLineParser
  id: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser
  children:
  - Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Default
  - Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Interactive
  - Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  - Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ParseConditionalCompilationSymbols(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}@)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Default
  href: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.yml
  name: Default
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Default
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs
    startLine: 20
  syntax:
    content:
      CSharp: Default
  id: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Default
- uid: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Interactive
  href: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.yml
  name: Interactive
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Interactive
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs
    startLine: 21
  syntax:
    content:
      CSharp: Interactive
  id: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Interactive
- uid: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  href: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.yml
  name: Parse(IEnumerable<string>, string, string)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable<string>, string, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs
    startLine: 36
  syntax:
    content:
      CSharp: public new CSharpCommandLineArguments Parse(IEnumerable<string> args, string baseDirectory, string additionalReferencePaths = null)
    parameters:
    - id: args
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: System.Collections.Generic.IEnumerable{System.String}
        isExternal: true
    - id: baseDirectory
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: additionalReferencePaths
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: CSharpCommandLineArguments
  id: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ParseConditionalCompilationSymbols(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}@)
  href: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.yml
  name: ParseConditionalCompilationSymbols(string, out IEnumerable<Diagnostic>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ParseConditionalCompilationSymbols(string, out System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Desktop/CommandLine/CommandLineParser.cs
    startLine: 1209
  syntax:
    content:
      CSharp: public static IEnumerable<string> ParseConditionalCompilationSymbols(string value, out IEnumerable<Diagnostic> diagnostics)
    parameters:
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: diagnostics
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}
        isExternal: true
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ParseConditionalCompilationSymbols(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}@)
