items:
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: CSharpParseOptions
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
  type: Class
  source:
    remote: &o0
      path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 13
  summary: This class stores several source parsing related options and offers access to their values.
  syntax:
    content:
      CSharp: 'public sealed class CSharpParseOptions : ParseOptions, IEquatable<CSharpParseOptions>'
  inheritance:
  - id: System.Object
    name: Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.ParseOptions
    name: ParseOptions
    href: Microsoft.CodeAnalysis.ParseOptions
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
  children:
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Default
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.LanguageVersion
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.PreprocessorSymbolNames
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.#ctor(Microsoft.CodeAnalysis.CSharp.LanguageVersion,Microsoft.CodeAnalysis.DocumentationMode,Microsoft.CodeAnalysis.SourceCodeKind,IEnumerable{System.String})
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithLanguageVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(IEnumerable{System.String})
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.String[])
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(ImmutableArray{System.String})
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Features
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(System.Object)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  - Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.GetHashCode
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Default
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: Default
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Default
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 18
  summary: The default parse options.
  syntax:
    content:
      CSharp: public static readonly CSharpParseOptions Default;
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Default
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.LanguageVersion
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: LanguageVersion
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.LanguageVersion
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 23
  summary: Gets the language version.
  syntax:
    content:
      CSharp: public LanguageVersion LanguageVersion { get; }
    parameters:
    - id: LanguageVersion
      type:
        id: Microsoft.CodeAnalysis.CSharp.LanguageVersion
        name: LanguageVersion
        href: Microsoft.CodeAnalysis.CSharp.LanguageVersion.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.LanguageVersion
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.PreprocessorSymbolNames
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: PreprocessorSymbolNames
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.PreprocessorSymbolNames
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 30
  summary: Gets the names of defined preprocessor symbols.
  syntax:
    content:
      CSharp: public override IEnumerable<string> PreprocessorSymbolNames { get; }
    parameters:
    - id: PreprocessorSymbolNames
      type:
        id: IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.PreprocessorSymbolNames
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.#ctor(Microsoft.CodeAnalysis.CSharp.LanguageVersion,Microsoft.CodeAnalysis.DocumentationMode,Microsoft.CodeAnalysis.SourceCodeKind,IEnumerable{System.String})
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: CSharpParseOptions(LanguageVersion, DocumentationMode, SourceCodeKind, IEnumerable<string>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CSharpParseOptions(Microsoft.CodeAnalysis.CSharp.LanguageVersion, Microsoft.CodeAnalysis.DocumentationMode, Microsoft.CodeAnalysis.SourceCodeKind, IEnumerable<string>)
  type: Constructor
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 35
  syntax:
    content:
      CSharp: 'public CSharpParseOptions(LanguageVersion languageVersion = LanguageVersion.CSharp6, DocumentationMode documentationMode = DocumentationMode.Parse, SourceCodeKind kind = SourceCodeKind.Regular, IEnumerable<string> preprocessorSymbols = null): this (languageVersion, documentationMode, kind, preprocessorSymbols.ToImmutableArrayOrEmpty())'
    parameters:
    - id: languageVersion
      type:
        id: Microsoft.CodeAnalysis.CSharp.LanguageVersion
        name: LanguageVersion
        href: Microsoft.CodeAnalysis.CSharp.LanguageVersion.yml
    - id: documentationMode
      type:
        id: Microsoft.CodeAnalysis.DocumentationMode
        name: DocumentationMode
        href: Microsoft.CodeAnalysis.DocumentationMode
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: Microsoft.CodeAnalysis.SourceCodeKind
    - id: preprocessorSymbols
      type:
        id: IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.#ctor(Microsoft.CodeAnalysis.CSharp.LanguageVersion,Microsoft.CodeAnalysis.DocumentationMode,Microsoft.CodeAnalysis.SourceCodeKind,IEnumerable{System.String})
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithKind(SourceCodeKind)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 85
  syntax:
    content:
      CSharp: public CSharpParseOptions WithKind(SourceCodeKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: Microsoft.CodeAnalysis.SourceCodeKind
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithLanguageVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithLanguageVersion(LanguageVersion)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithLanguageVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 100
  syntax:
    content:
      CSharp: public CSharpParseOptions WithLanguageVersion(LanguageVersion version)
    parameters:
    - id: version
      type:
        id: Microsoft.CodeAnalysis.CSharp.LanguageVersion
        name: LanguageVersion
        href: Microsoft.CodeAnalysis.CSharp.LanguageVersion.yml
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithLanguageVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(IEnumerable{System.String})
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithPreprocessorSymbols(IEnumerable<string>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(IEnumerable<string>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 115
  syntax:
    content:
      CSharp: public CSharpParseOptions WithPreprocessorSymbols(IEnumerable<string> preprocessorSymbols)
    parameters:
    - id: preprocessorSymbols
      type:
        id: IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(IEnumerable{System.String})
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.String[])
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithPreprocessorSymbols(params string[])
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(params string[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 120
  syntax:
    content:
      CSharp: public CSharpParseOptions WithPreprocessorSymbols(params string[] preprocessorSymbols)
    parameters:
    - id: preprocessorSymbols
      type:
        id: System.Array
        name: string[]
        isExternal: true
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.String[])
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(ImmutableArray{System.String})
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithPreprocessorSymbols(ImmutableArray<string>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(ImmutableArray<string>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 125
  syntax:
    content:
      CSharp: public CSharpParseOptions WithPreprocessorSymbols(ImmutableArray<string> symbols)
    parameters:
    - id: symbols
      type:
        id: ImmutableArray{System.String}
        name: ImmutableArray<string>
        isExternal: true
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(ImmutableArray{System.String})
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithDocumentationMode(DocumentationMode)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 140
  syntax:
    content:
      CSharp: public CSharpParseOptions WithDocumentationMode(DocumentationMode documentationMode)
    parameters:
    - id: documentationMode
      type:
        id: Microsoft.CodeAnalysis.DocumentationMode
        name: DocumentationMode
        href: Microsoft.CodeAnalysis.DocumentationMode
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: CommonWithKind(SourceCodeKind)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 155
  syntax:
    content:
      CSharp: protected override ParseOptions CommonWithKind(SourceCodeKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.SourceCodeKind
        name: SourceCodeKind
        href: Microsoft.CodeAnalysis.SourceCodeKind
    return:
      id: ParseOptions
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: CommonWithDocumentationMode(DocumentationMode)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 160
  syntax:
    content:
      CSharp: protected override ParseOptions CommonWithDocumentationMode(DocumentationMode documentationMode)
    parameters:
    - id: documentationMode
      type:
        id: Microsoft.CodeAnalysis.DocumentationMode
        name: DocumentationMode
        href: Microsoft.CodeAnalysis.DocumentationMode
    return:
      id: ParseOptions
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: CommonWithFeatures(IEnumerable<KeyValuePair<string, string>>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithFeatures(IEnumerable<Roslyn.Utilities.KeyValuePair<string, string>>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 165
  syntax:
    content:
      CSharp: protected override ParseOptions CommonWithFeatures(IEnumerable<KeyValuePair<string, string>> features)
    parameters:
    - id: features
      type:
        id: IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}}
        name: IEnumerable<KeyValuePair<string, string>>
        isExternal: true
    return:
      id: ParseOptions
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: WithFeatures(IEnumerable<KeyValuePair<string, string>>)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithFeatures(IEnumerable<Roslyn.Utilities.KeyValuePair<string, string>>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 173
  summary: Enable some experimental language features for testing.
  syntax:
    content:
      CSharp: public CSharpParseOptions WithFeatures(IEnumerable<KeyValuePair<string, string>> features)
    parameters:
    - id: features
      type:
        id: IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}}
        name: IEnumerable<KeyValuePair<string, string>>
        isExternal: true
    return:
      id: CSharpParseOptions
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithFeatures(IEnumerable{Roslyn.Utilities.KeyValuePair{System.String,System.String}})
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Features
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: Features
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Features
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 189
  syntax:
    content:
      CSharp: public override IReadOnlyDictionary<string, string> Features { get; }
    parameters:
    - id: Features
      type:
        id: IReadOnlyDictionary{System.String,System.String}
        name: IReadOnlyDictionary<string, string>
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Features
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(System.Object)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: Equals(object)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 198
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: object
        isExternal: true
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(System.Object)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: Equals(CSharpParseOptions)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 203
  syntax:
    content:
      CSharp: public bool Equals(CSharpParseOptions other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.GetHashCode
  href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  name: GetHashCode()
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpParseOptions.cs
    startLine: 218
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.GetHashCode
