items:
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: CSharpSyntaxTree
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.Dummy.cs
    startLine: 10
  summary: The parsed representation of a C# source document.
  syntax:
    content:
      CSharp: public abstract partial class CSharpSyntaxTree
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.SyntaxTree
    name: SyntaxTree
    href: Microsoft.CodeAnalysis.SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree
  children:
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Options
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRoot(System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode@)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsync(System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(System.String,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.HasHiddenRegions
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  - Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Options
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: Options
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Options
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 27
  summary: The options used by the parser to produce the syntax tree.
  syntax:
    content:
      CSharp: public new abstract CSharpParseOptions Options { get; }
    parameters:
    - id: Options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Options
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRoot(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetRoot(CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRoot(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 57
  summary: Gets the root node of the syntax tree.
  syntax:
    content:
      CSharp: public new abstract CSharpSyntaxNode GetRoot(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: CSharpSyntaxNode
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRoot(System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode@)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: TryGetRoot(out CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRoot(out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 62
  summary: Gets the root node of the syntax tree if it is already available.
  syntax:
    content:
      CSharp: public abstract bool TryGetRoot(out CSharpSyntaxNode root);
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode@)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetRootAsync(CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 71
  summary: Gets the root node of the syntax tree asynchronously.
  syntax:
    content:
      CSharp: public new virtual Task<CSharpSyntaxNode> GetRootAsync(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsync(System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetCompilationUnitRoot(CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 84
  summary: Gets the root of the syntax tree statically typed as [Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax](Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.yml).
  syntax:
    content:
      CSharp: public CompilationUnitSyntax GetCompilationUnitRoot(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: CompilationUnitSyntax
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: IsEquivalentTo(SyntaxTree, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 97
  summary: Determines if two trees are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public override bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false)
    parameters:
    - id: tree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The tree to compare against.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the trees are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent,

        ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: Create(CSharpSyntaxNode, CSharpParseOptions, string, Encoding)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions, string, System.Text.Encoding)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 289
  summary: Creates a new syntax tree from a syntax node.
  syntax:
    content:
      CSharp: public static SyntaxTree Create(CSharpSyntaxNode root, CSharpParseOptions options = null, string path = "", Encoding encoding = null)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: encoding
      type:
        id: System.Text.Encoding
        name: System.Text.Encoding
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(System.String,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: ParseText(string, CSharpParseOptions, string, Encoding, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(string, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions, string, System.Text.Encoding, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 353
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseText(string text, CSharpParseOptions options = null, string path = "", Encoding encoding = null, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: encoding
      type:
        id: System.Text.Encoding
        name: System.Text.Encoding
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(System.String,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: ParseText(SourceText, CSharpParseOptions, string, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 366
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseText(SourceText text, CSharpParseOptions options = null, string path = "", CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: WithChangedText(SourceText)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 411
  summary: Creates a new syntax based off this tree using a new source text.
  syntax:
    content:
      CSharp: public override SyntaxTree WithChangedText(SourceText newText)
    parameters:
    - id: newText
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetChangedSpans(SyntaxTree)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 467
  summary: >-
    Produces a pessimistic list of spans that denote the regions of text in this tree that

    are changed from the text of the old tree.
  syntax:
    content:
      CSharp: public override IList<TextSpan> GetChangedSpans(SyntaxTree oldTree)
    parameters:
    - id: oldTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The old tree. Cannot be null.
    return:
      id: IList
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetChanges(SyntaxTree)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 482
  summary: Gets a list of text changes that when applied to the old tree produce this tree.
  syntax:
    content:
      CSharp: public override IList<TextChange> GetChanges(SyntaxTree oldTree)
    parameters:
    - id: oldTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The old tree. Cannot be null.
    return:
      id: IList
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetLineSpan(TextSpan, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 505
  summary: Gets the location in terms of path, line and column for a given span.
  syntax:
    content:
      CSharp: public override FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: Microsoft.CodeAnalysis.Text.TextSpan
      description: Span within the tree.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: Cancellation token.
    return:
      id: FileLinePositionSpan
      description: '[Microsoft.CodeAnalysis.FileLinePositionSpan](#) that contains path, line and column information.'
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetMappedLineSpan(TextSpan, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 526
  summary: Gets the location in terms of path, line and column after applying source line mapping directives (#line).
  syntax:
    content:
      CSharp: public override FileLinePositionSpan GetMappedLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: Microsoft.CodeAnalysis.Text.TextSpan
      description: Span within the tree.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
      description: Cancellation token.
    return:
      id: FileLinePositionSpan
      description: >-
        A valid  that contains path, line and column information.

        If the location path is mapped the resulting path is the path specified in the corresponding #line,

        otherwise it's .



        A location path is considered mapped if the first #line directive that preceeds it and that

        either specifies an explicit file path or is #line default exists and specifies an explicit path.
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetLineVisibility(int, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineVisibility(int, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 537
  syntax:
    content:
      CSharp: public override LineVisibility GetLineVisibility(int position, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: position
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: LineVisibility
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.HasHiddenRegions
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: HasHiddenRegions()
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.HasHiddenRegions()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 570
  summary: Gets a boolean value indicating whether there are any hidden regions in the tree.
  syntax:
    content:
      CSharp: public override bool HasHiddenRegions()
    parameters: []
    return:
      id: Boolean
      description: True if there is at least one hidden region.
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.HasHiddenRegions
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetLocation(TextSpan)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 609
  summary: Gets a [Microsoft.CodeAnalysis.Location](#) for the specified text .
  syntax:
    content:
      CSharp: public override Location GetLocation(TextSpan span)
    parameters:
    - id: span
      type:
        id: Microsoft.CodeAnalysis.Text.TextSpan
        name: TextSpan
        href: Microsoft.CodeAnalysis.Text.TextSpan
    return:
      id: Location
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetDiagnostics(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 625
  summary: Gets a list of all the diagnostics in the sub tree that has the specified node as its root.
  syntax:
    content:
      CSharp: public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetDiagnostics(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 666
  summary: Gets a list of all the diagnostics associated with the token and any related trivia.
  syntax:
    content:
      CSharp: public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetDiagnostics(SyntaxTrivia)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 678
  summary: Gets a list of all the diagnostics associated with the trivia.
  syntax:
    content:
      CSharp: public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetDiagnostics(SyntaxNodeOrToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 691
  summary: >-
    Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or

    associated with the token and its related trivia.
  syntax:
    content:
      CSharp: public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken)
    parameters:
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: Microsoft.CodeAnalysis.SyntaxNodeOrToken
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)
- uid: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.yml
  name: GetDiagnostics(CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs
    startLine: 703
  summary: Gets a list of all the diagnostics in the syntax tree.
  syntax:
    content:
      CSharp: public override IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)
