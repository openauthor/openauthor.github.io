items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.yml
  name: AnonymousFunctionExpressionSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 50484
  summary: Provides the base class from which the classes that represent anonymous function expressions are derived.
  syntax:
    content:
      CSharp: public abstract partial class AnonymousFunctionExpressionSyntax
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.SyntaxNode
    name: SyntaxNode
    href: Microsoft.CodeAnalysis.SyntaxNode
  - id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
    name: CSharpSyntaxNode
    href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
    name: ExpressionSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword
  - Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.yml
  name: AsyncKeyword
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 50492
  summary: Gets the "async" token.
  syntax:
    content:
      CSharp: public abstract SyntaxToken AsyncKeyword { get; }
    parameters:
    - id: AsyncKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.yml
  name: Body
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 50495
  summary: ExpressionSyntax or BlockSyntax representing the body of the lambda expression.
  syntax:
    content:
      CSharp: public abstract CSharpSyntaxNode Body { get; }
    parameters:
    - id: Body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body
