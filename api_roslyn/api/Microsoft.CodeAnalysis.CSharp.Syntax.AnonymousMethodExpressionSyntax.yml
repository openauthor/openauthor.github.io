items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  name: AnonymousMethodExpressionSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
  type: Class
  source:
    remote: &o0
      path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 6
  syntax:
    content:
      CSharp: 'public class AnonymousMethodExpressionSyntax : object'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block
  - Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBlock(BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockStatements(StatementSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  name: Block
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 8
  syntax:
    content:
      CSharp: public BlockSyntax Block { get; }
    parameters:
    - id: Block
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBlock(BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  name: WithBlock(BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBlock(BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 10
  syntax:
    content:
      CSharp: public AnonymousMethodExpressionSyntax WithBlock(BlockSyntax block)
    parameters:
    - id: block
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
    return:
      id: AnonymousMethodExpressionSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
        name: AnonymousMethodExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBlock(BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockStatements(StatementSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  name: AddBlockStatements(params StatementSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockStatements(params StatementSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 15
  syntax:
    content:
      CSharp: public AnonymousMethodExpressionSyntax AddBlockStatements(params StatementSyntax[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: StatementSyntax[]
        isExternal: true
    return:
      id: AnonymousMethodExpressionSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
        name: AnonymousMethodExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockStatements(StatementSyntax[])
