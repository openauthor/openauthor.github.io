items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: BaseListSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59250
  summary: Base list syntax.
  syntax:
    content:
      CSharp: public sealed partial class BaseListSyntax
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.SyntaxNode
    name: SyntaxNode
    href: Microsoft.CodeAnalysis.SyntaxNode
  - id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
    name: CSharpSyntaxNode
    href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  - Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.AddTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: ColonToken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59260
  summary: Gets the colon token.
  syntax:
    content:
      CSharp: public SyntaxToken ColonToken { get; }
    parameters:
    - id: ColonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: Types
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59266
  summary: Gets the base type references.
  syntax:
    content:
      CSharp: public SeparatedSyntaxList<BaseTypeSyntax> Types { get; }
    parameters:
    - id: Types
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: Accept<TResult>(CSharpSyntaxVisitor<TResult>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept<TResult>(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor<TResult>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59295
  syntax:
    content:
      CSharp: public override TResult Accept<TResult>(CSharpSyntaxVisitor<TResult> visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
    return:
      id: TResult
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: Accept(CSharpSyntaxVisitor)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59300
  syntax:
    content:
      CSharp: public override void Accept(CSharpSyntaxVisitor visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: Update(SyntaxToken, SeparatedSyntaxList<BaseTypeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59305
  syntax:
    content:
      CSharp: public BaseListSyntax Update(SyntaxToken colonToken, SeparatedSyntaxList<BaseTypeSyntax> types)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: types
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: WithColonToken(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59319
  syntax:
    content:
      CSharp: public BaseListSyntax WithColonToken(SyntaxToken colonToken)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: WithTypes(SeparatedSyntaxList<BaseTypeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59324
  syntax:
    content:
      CSharp: public BaseListSyntax WithTypes(SeparatedSyntaxList<BaseTypeSyntax> types)
    parameters:
    - id: types
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.AddTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
  name: AddTypes(params BaseTypeSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.AddTypes(params Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 59329
  syntax:
    content:
      CSharp: public BaseListSyntax AddTypes(params BaseTypeSyntax[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.AddTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])
