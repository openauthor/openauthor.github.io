items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: ConversionOperatorDeclarationSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60576
  summary: Conversion operator declaration syntax.
  syntax:
    content:
      CSharp: public sealed partial class ConversionOperatorDeclarationSyntax
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.SyntaxNode
    name: SyntaxNode
    href: Microsoft.CodeAnalysis.SyntaxNode
  - id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
    name: CSharpSyntaxNode
    href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax
    name: MemberDeclarationSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
    name: BaseMethodDeclarationSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AttributeLists
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Modifiers
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ParameterList
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Body
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ExpressionBody
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])
  - Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AttributeLists
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: AttributeLists
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AttributeLists
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60589
  syntax:
    content:
      CSharp: public override SyntaxList<AttributeListSyntax> AttributeLists { get; }
    parameters:
    - id: AttributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AttributeLists
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Modifiers
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Modifiers
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Modifiers
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60597
  syntax:
    content:
      CSharp: public override SyntaxTokenList Modifiers { get; }
    parameters:
    - id: Modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Modifiers
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: ImplicitOrExplicitKeyword
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60610
  summary: Gets the "implicit" or "explicit" token.
  syntax:
    content:
      CSharp: public SyntaxToken ImplicitOrExplicitKeyword { get; }
    parameters:
    - id: ImplicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: OperatorKeyword
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60616
  summary: Gets the "operator" token.
  syntax:
    content:
      CSharp: public SyntaxToken OperatorKeyword { get; }
    parameters:
    - id: OperatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Type
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60622
  summary: Gets the type.
  syntax:
    content:
      CSharp: public TypeSyntax Type { get; }
    parameters:
    - id: Type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ParameterList
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: ParameterList
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ParameterList
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60630
  syntax:
    content:
      CSharp: public override ParameterListSyntax ParameterList { get; }
    parameters:
    - id: ParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ParameterList
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Body
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Body
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Body
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60638
  syntax:
    content:
      CSharp: public override BlockSyntax Body { get; }
    parameters:
    - id: Body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Body
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ExpressionBody
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: ExpressionBody
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ExpressionBody
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60646
  syntax:
    content:
      CSharp: public ArrowExpressionClauseSyntax ExpressionBody { get; }
    parameters:
    - id: ExpressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ExpressionBody
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: SemicolonToken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60655
  summary: Gets the optional semicolon token.
  syntax:
    content:
      CSharp: public override SyntaxToken SemicolonToken { get; }
    parameters:
    - id: SemicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Accept<TResult>(CSharpSyntaxVisitor<TResult>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept<TResult>(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor<TResult>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60692
  syntax:
    content:
      CSharp: public override TResult Accept<TResult>(CSharpSyntaxVisitor<TResult> visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
    return:
      id: TResult
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Accept(CSharpSyntaxVisitor)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60697
  syntax:
    content:
      CSharp: public override void Accept(CSharpSyntaxVisitor visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: Update(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeSyntax, ParameterListSyntax, BlockSyntax, ArrowExpressionClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60702
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithAttributeLists(SyntaxList<AttributeListSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60716
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithModifiers(SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60721
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithModifiers(SyntaxTokenList modifiers)
    parameters:
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithImplicitOrExplicitKeyword(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60726
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithImplicitOrExplicitKeyword(SyntaxToken implicitOrExplicitKeyword)
    parameters:
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithOperatorKeyword(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60731
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithOperatorKeyword(SyntaxToken operatorKeyword)
    parameters:
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithType(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60736
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithType(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithParameterList(ParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60741
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithParameterList(ParameterListSyntax parameterList)
    parameters:
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithBody(BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60746
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithBody(BlockSyntax body)
    parameters:
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithExpressionBody(ArrowExpressionClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60751
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithExpressionBody(ArrowExpressionClauseSyntax expressionBody)
    parameters:
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: WithSemicolonToken(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60756
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax WithSemicolonToken(SyntaxToken semicolonToken)
    parameters:
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: AddAttributeLists(params AttributeListSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60761
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax AddAttributeLists(params AttributeListSyntax[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: AddModifiers(params SyntaxToken[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60766
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax AddModifiers(params SyntaxToken[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: AddParameterListParameters(params ParameterSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddParameterListParameters(params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60771
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax AddParameterListParameters(params ParameterSyntax[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.yml
  name: AddBodyStatements(params StatementSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyStatements(params Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 60776
  syntax:
    content:
      CSharp: public ConversionOperatorDeclarationSyntax AddBodyStatements(params StatementSyntax[] items)
    parameters:
    - id: items
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
