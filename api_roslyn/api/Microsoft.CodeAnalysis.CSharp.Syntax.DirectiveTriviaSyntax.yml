items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  name: DirectiveTriviaSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
  type: Class
  source:
    remote: &o0
      path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
    startLine: 12
  syntax:
    content:
      CSharp: 'public class DirectiveTriviaSyntax : object'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken
  - Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  name: DirectiveNameToken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
    startLine: 14
  syntax:
    content:
      CSharp: public SyntaxToken DirectiveNameToken { get; }
    parameters:
    - id: DirectiveNameToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  name: GetNextDirective(Func<DirectiveTriviaSyntax, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(Func<Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
    startLine: 56
  syntax:
    content:
      CSharp: public DirectiveTriviaSyntax GetNextDirective(Func<DirectiveTriviaSyntax, bool> predicate = null)
    parameters:
    - id: predicate
      type:
        id: Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean}
        name: Func<DirectiveTriviaSyntax, bool>
        isExternal: true
    return:
      id: DirectiveTriviaSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
        name: DirectiveTriviaSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  name: GetPreviousDirective(Func<DirectiveTriviaSyntax, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(Func<Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
    startLine: 87
  syntax:
    content:
      CSharp: public DirectiveTriviaSyntax GetPreviousDirective(Func<DirectiveTriviaSyntax, bool> predicate = null)
    parameters:
    - id: predicate
      type:
        id: Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean}
        name: Func<DirectiveTriviaSyntax, bool>
        isExternal: true
    return:
      id: DirectiveTriviaSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
        name: DirectiveTriviaSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives
  href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  name: GetRelatedDirectives()
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/DirectiveTriviaSyntax.cs
    startLine: 118
  syntax:
    content:
      CSharp: public List<DirectiveTriviaSyntax> GetRelatedDirectives()
    parameters: []
    return:
      id: List
      type:
        id: List{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax}
        name: List<DirectiveTriviaSyntax>
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives
