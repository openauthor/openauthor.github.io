items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: ElifDirectiveTriviaSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65019
  syntax:
    content:
      CSharp: public sealed partial class ElifDirectiveTriviaSyntax
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: Microsoft.CodeAnalysis.SyntaxNode
    name: SyntaxNode
    href: Microsoft.CodeAnalysis.SyntaxNode
  - id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
    name: CSharpSyntaxNode
    href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax
    name: StructuredTriviaSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax
    name: DirectiveTriviaSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax
    name: BranchingDirectiveTriviaSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax.yml
  - id: Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax
    name: ConditionalDirectiveTriviaSyntax
    href: Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.HashToken
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ElifKeyword
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Condition
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.EndOfDirectiveToken
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.IsActive
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.BranchTaken
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ConditionValue
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithElifKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithIsActive(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithConditionValue(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.HashToken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: HashToken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.HashToken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65028
  syntax:
    content:
      CSharp: public override SyntaxToken HashToken { get; }
    parameters:
    - id: HashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.HashToken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ElifKeyword
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: ElifKeyword
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ElifKeyword
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65033
  syntax:
    content:
      CSharp: public SyntaxToken ElifKeyword { get; }
    parameters:
    - id: ElifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ElifKeyword
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Condition
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: Condition
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Condition
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65038
  syntax:
    content:
      CSharp: public override ExpressionSyntax Condition { get; }
    parameters:
    - id: Condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Condition
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.EndOfDirectiveToken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: EndOfDirectiveToken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.EndOfDirectiveToken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65046
  syntax:
    content:
      CSharp: public override SyntaxToken EndOfDirectiveToken { get; }
    parameters:
    - id: EndOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.EndOfDirectiveToken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.IsActive
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: IsActive
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.IsActive
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65051
  syntax:
    content:
      CSharp: public override bool IsActive { get; }
    parameters:
    - id: IsActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.IsActive
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.BranchTaken
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: BranchTaken
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.BranchTaken
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65053
  syntax:
    content:
      CSharp: public override bool BranchTaken { get; }
    parameters:
    - id: BranchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.BranchTaken
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ConditionValue
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: ConditionValue
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ConditionValue
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65055
  syntax:
    content:
      CSharp: public override bool ConditionValue { get; }
    parameters:
    - id: ConditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ConditionValue
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: Accept<TResult>(CSharpSyntaxVisitor<TResult>)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept<TResult>(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor<TResult>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65074
  syntax:
    content:
      CSharp: public override TResult Accept<TResult>(CSharpSyntaxVisitor<TResult> visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0}
    return:
      id: TResult
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: Accept(CSharpSyntaxVisitor)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65079
  syntax:
    content:
      CSharp: public override void Accept(CSharpSyntaxVisitor visitor)
    parameters:
    - id: visitor
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor
        name: CSharpSyntaxVisitor
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.yml
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: Update(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, bool, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, bool, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65084
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax Update(SyntaxToken hashToken, SyntaxToken elifKeyword, ExpressionSyntax condition, SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: elifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithHashToken(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65098
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithHashToken(SyntaxToken hashToken)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithElifKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithElifKeyword(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithElifKeyword(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65103
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithElifKeyword(SyntaxToken elifKeyword)
    parameters:
    - id: elifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithElifKeyword(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithCondition(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65108
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithCondition(ExpressionSyntax condition)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithEndOfDirectiveToken(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65113
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithEndOfDirectiveToken(SyntaxToken endOfDirectiveToken)
    parameters:
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithIsActive(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithIsActive(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithIsActive(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65118
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithIsActive(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithIsActive(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithBranchTaken(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithBranchTaken(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65123
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithBranchTaken(bool branchTaken)
    parameters:
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithConditionValue(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.yml
  name: WithConditionValue(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithConditionValue(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 65128
  syntax:
    content:
      CSharp: public ElifDirectiveTriviaSyntax WithConditionValue(bool conditionValue)
    parameters:
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithConditionValue(System.Boolean)
