items:
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.yml
  name: ExpressionStatementSyntax
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
  type: Class
  source:
    remote: &o0
      path: src/Compilers/CSharp/Portable/Syntax/ExpressionStatementSyntax.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/ExpressionStatementSyntax.cs
    startLine: 8
  syntax:
    content:
      CSharp: 'public class ExpressionStatementSyntax : object'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
  children:
  - Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression
- uid: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression
  href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.yml
  name: AllowsAnyExpression
  fullName: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression
  type: Property
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/ExpressionStatementSyntax.cs
    startLine: 18
  summary: >-
    Returns true if the @!:Expression- property is allowed by the rules of the

    language to be an arbitrary expression, not just a statement expression.
  syntax:
    content:
      CSharp: public bool AllowsAnyExpression { get; }
    parameters:
    - id: AllowsAnyExpression
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression
