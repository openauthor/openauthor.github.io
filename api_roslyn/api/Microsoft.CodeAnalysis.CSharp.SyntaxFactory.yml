items:
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxFactory
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70204
  summary: A class containing factory methods for constructing syntax nodes, tokens and trivia.
  syntax:
    content:
      CSharp: public partial class SyntaxFactory
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  children:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousMethodExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 27
  summary: Creates a new AnonymousMethodExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousMethodExpressionSyntax AnonymousMethodExpression()
    parameters: []
    return:
      id: AnonymousMethodExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CarriageReturnLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 24
  summary: >-
    A trivia with kind EndOfLineTrivia containing both the carriage return and line feed

    characters.
  syntax:
    content:
      CSharp: CarriageReturnLineFeed
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 29
  summary: A trivia with kind EndOfLineTrivia containing a single line feed character.
  syntax:
    content:
      CSharp: LineFeed
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CarriageReturn
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 34
  summary: A trivia with kind EndOfLineTrivia containing a single carriage return character.
  syntax:
    content:
      CSharp: CarriageReturn
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Space
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 39
  summary: A trivia with kind WhitespaceTrivia containing a single space character.
  syntax:
    content:
      CSharp: Space
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Tab
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 44
  summary: A trivia with kind WhitespaceTrivia containing a single tab character.
  syntax:
    content:
      CSharp: Tab
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticCarriageReturnLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 51
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.

    Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not

    preserved during formatting.
  syntax:
    content:
      CSharp: ElasticCarriageReturnLineFeed
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 58
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used

    to denote trivia that was not produced by parsing source text, and are usually not preserved during

    formatting.
  syntax:
    content:
      CSharp: ElasticLineFeed
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticCarriageReturn
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 65
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia

    are used to denote trivia that was not produced by parsing source text, and are usually not preserved during

    formatting.
  syntax:
    content:
      CSharp: ElasticCarriageReturn
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticSpace
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 71
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to

    denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
  syntax:
    content:
      CSharp: ElasticSpace
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticTab
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 77
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to

    denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
  syntax:
    content:
      CSharp: ElasticTab
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticMarker
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 84
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included

    automatically by factory methods when trivia is not specified. Syntax formatting will replace elastic

    markers with appropriate trivia.
  syntax:
    content:
      CSharp: ElasticMarker
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndOfLine(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 94
  summary: Creates a trivia with kind EndOfLineTrivia containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia EndOfLine(string text, bool elastic = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The text of the trivia. Any text can be specified here, however only carriage return and

        line feed characters are recognized by the parser as end of line.
    - id: elastic
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true, the trivia produced is an elastic trivia. Elastic trivia are used to denote

        trivia that was not produced by parsing source text, and are usually not preserved during

        formatting.
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Whitespace(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 107
  summary: Creates a trivia with kind WhitespaceTrivia containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Whitespace(string text, bool elastic = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The text of the whitespace. Any text can be specified here, however only specific

        whitespace characters are recognized by the parser.
    - id: elastic
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true, the trivia produced is an elastic trivia. Elastic trivia are used to denote

        trivia that was not produced by parsing source text, and are usually not preserved during

        formatting.
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Comment(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 118
  summary: >-
    Creates a trivia with kind either SingleLineCommentTrivia or MultiLineCommentTrivia containing the specified

    text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Comment(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The entire text of the comment including the leading '//' token for single line comments

        or stop or start tokens for multiline comments.
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DisabledText(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 127
  summary: >-
    Creates a trivia with kind DisabledTextTrivia. Disabled text corresponds to any text between directives that

    is not considered active.
  syntax:
    content:
      CSharp: public static SyntaxTrivia DisabledText(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PreprocessingMessage(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 135
  summary: Creates a trivia with kind PreprocessingMessageTrivia.
  syntax:
    content:
      CSharp: public static SyntaxTrivia PreprocessingMessage(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxTrivia(SyntaxKind, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 153
  summary: >-
    Trivia nodes represents parts of the program text that are not parts of the

    syntactic grammar, such as spaces, newlines, comments, preprocessors

    directives, and disabled code.
  syntax:
    content:
      CSharp: public static SyntaxTrivia SyntaxTrivia(SyntaxKind kind, string text)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: >-
        A  representing the specific kind of SyntaxTrivia. One of

        WhitespaceTrivia, EndOfLineTrivia, CommentTrivia,

        DocumentationCommentExteriorTrivia, DisabledTextTrivia.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The actual text of this token.
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 181
  summary: >-
    Creates a token corresponding to a syntax kind. This method can be used for token syntax kinds whose text

    can be inferred by the kind alone.
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 193
  summary: >-
    Creates a token corresponding to syntax kind. This method can be used for token syntax kinds whose text can

    be inferred by the kind alone.
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxTriviaList, SyntaxKind, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 210
  summary: >-
    Creates a token corresponding to syntax kind. This method gives control over token Text and ValueText.



    For example, consider the text '<see cref="operator &#43;"/>'.  To create a token for the value of

    the operator symbol (&#43;), one would call

    Token(default(SyntaxTriviaList), SyntaxKind.PlusToken, "&#43;", "+", default(SyntaxTriviaList)).
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text from which this this token was created (e.g. lexed).
    - id: valueText
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: How C# should interpret the text of this token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MissingToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 238
  summary: >-
    Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an

    expected token is not found. A missing token has no text and normally has associated diagnostics.
  syntax:
    content:
      CSharp: public static SyntaxToken MissingToken(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MissingToken(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 250
  summary: >-
    Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an

    expected token is not found. A missing token has no text and normally has associated diagnostics.
  syntax:
    content:
      CSharp: public static SyntaxToken MissingToken(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 260
  summary: >-
    Creates a token with kind IdentifierToken containing the specified text.

    The raw text of the identifier name, including any escapes or leading '@'

    character.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(SyntaxTriviaList, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 272
  summary: Creates a token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VerbatimIdentifier(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 285
  summary: Creates a verbatim token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken VerbatimIdentifier(SyntaxTriviaList leading, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character as it is in source.
    - id: valueText
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The canonical value of the token's text.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(SyntaxTriviaList, SyntaxKind, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 306
  summary: Creates a token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(SyntaxTriviaList leading, SyntaxKind contextualKind, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: contextualKind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: >-
        An alternative SyntaxKind that can be inferred for this token in special

        contexts. These are usually keywords.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character.
    - id: valueText
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the identifier name without escapes or leading '@' character.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 315
  summary: Creates a token with kind NumericLiteralToken from a 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(int value)
    parameters:
    - id: value
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 325
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, int value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, int, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, int, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 337
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, int value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(uint)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(uint)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 346
  summary: Creates a token with kind NumericLiteralToken from a 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(uint value)
    parameters:
    - id: value
      type:
        id: System.UInt32
        name: System.UInt32
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, uint)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, uint)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 356
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, uint value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt32
        name: System.UInt32
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, uint, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, uint, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 368
  summary: Creates a token with kind NumericLiteraToken from the text and corresponding 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, uint value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt32
        name: System.UInt32
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(long)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(long)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 377
  summary: Creates a token with kind NumericLiteralToken from an 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(long value)
    parameters:
    - id: value
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, long)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, long)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 387
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, long value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, long, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, long, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 399
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, long value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int64
        name: System.Int64
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(ulong)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(ulong)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 408
  summary: Creates a token with kind NumericLiteralToken from an 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(ulong value)
    parameters:
    - id: value
      type:
        id: System.UInt64
        name: System.UInt64
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, ulong)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, ulong)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 418
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, ulong value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt64
        name: System.UInt64
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, ulong, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, ulong, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 430
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, ulong value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt64
        name: System.UInt64
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(float)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(float)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 439
  summary: Creates a token with kind NumericLiteralToken from a 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(float value)
    parameters:
    - id: value
      type:
        id: System.Single
        name: System.Single
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, float)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, float)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 449
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, float value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Single
        name: System.Single
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, float, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, float, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 461
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, float value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Single
        name: System.Single
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(double)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(double)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 470
  summary: Creates a token with kind NumericLiteralToken from an 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(double value)
    parameters:
    - id: value
      type:
        id: System.Double
        name: System.Double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, double)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, double)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 480
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, double value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Double
        name: System.Double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, double, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, double, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 492
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, double value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Double
        name: System.Double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(decimal)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(decimal)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 501
  summary: Creates a token with kind NumericLiteralToken from a decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(decimal value)
    parameters:
    - id: value
      type:
        id: System.Decimal
        name: System.Decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, decimal)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, decimal)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 511
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, decimal value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Decimal
        name: System.Decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, decimal, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, decimal, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 523
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, decimal value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Decimal
        name: System.Decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 532
  summary: Creates a token with kind StringLiteralToken from a string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string value)
    parameters:
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The string value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 542
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, string value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The string value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 554
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The string value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 563
  summary: Creates a token with kind CharacterLiteralToken from a character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(char value)
    parameters:
    - id: value
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The character value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 573
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, char value)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The character value to be represented by the returned token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, char, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, char, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 585
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, char value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The character value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BadToken(SyntaxTriviaList, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 596
  summary: Creates a token with kind BadToken.
  syntax:
    content:
      CSharp: public static SyntaxToken BadToken(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the bad token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextLiteral(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 608
  summary: Creates a token with kind XmlTextLiteralToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlTextLiteral(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The xml text value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextNewLine(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 620
  summary: Creates a token with kind XmlTextLiteralNewLineToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlTextNewLine(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The xml text new line value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlEntity(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 632
  summary: Creates a token with kind XmlEntityLiteralToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlEntity(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The xml entity value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DocumentationCommentExterior(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 641
  summary: Creates a trivia with kind DocumentationCommentExteriorTrivia.
  syntax:
    content:
      CSharp: public static SyntaxTrivia DocumentationCommentExterior(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The raw text of the literal.
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: List<TNode>()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List<TNode>()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 650
  summary: Creates an empty list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> List<TNode>()where TNode : SyntaxNode'
    parameters: []
    return:
      id: SyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SingletonList<TNode>(TNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList<TNode>(TNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 661
  summary: Creates a singleton list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> SingletonList<TNode>(TNode node)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The single element node.
    return:
      id: SyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: List<TNode>(IEnumerable<TNode>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List<TNode>(System.Collections.Generic.IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 672
  summary: Creates a list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> List<TNode>(IEnumerable<TNode> nodes)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: System.Collections.Generic.IEnumerable{``0}
        isExternal: true
      description: A sequence of element nodes.
    return:
      id: SyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 693
  summary: Creates an empty list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList()
    parameters: []
    return:
      id: SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 702
  summary: Creates a singleton list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The single token.
    return:
      id: SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(params SyntaxToken[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(params Microsoft.CodeAnalysis.SyntaxToken[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 711
  summary: Creates a list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(params SyntaxToken[] tokens)
    parameters:
    - id: tokens
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: An array of tokens.
    return:
      id: SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(IEnumerable<SyntaxToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 732
  summary: Creates a list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(IEnumerable<SyntaxToken> tokens)
    parameters:
    - id: tokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
    return:
      id: SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Trivia(StructuredTriviaSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 751
  summary: Creates a trivia from a StructuredTriviaSyntax node.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Trivia(StructuredTriviaSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax
        name: StructuredTriviaSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.yml
    return:
      id: SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 759
  summary: Creates an empty list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList()
    parameters: []
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(SyntaxTrivia)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 768
  summary: Creates a singleton list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(SyntaxTrivia trivia)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
      description: A single trivia.
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(params SyntaxTrivia[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(params Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 777
  summary: Creates a list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(params SyntaxTrivia[] trivias)
    parameters:
    - id: trivias
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: An array of trivia.
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(IEnumerable<SyntaxTrivia>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 793
  summary: Creates a list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(IEnumerable<SyntaxTrivia> trivias)
    parameters:
    - id: trivias
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        isExternal: true
      description: A sequence of trivia.
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 813
  summary: Creates an empty separated list.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>()where TNode : SyntaxNode'
    parameters: []
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SingletonSeparatedList<TNode>(TNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList<TNode>(TNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 823
  summary: Creates a singleton separated list.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SingletonSeparatedList<TNode>(TNode node)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: A single node.
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<TNode>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(System.Collections.Generic.IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 833
  summary: Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode> nodes)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: System.Collections.Generic.IEnumerable{``0}
        isExternal: true
      description: A sequence of syntax nodes.
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<TNode>, IEnumerable<SyntaxToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(System.Collections.Generic.IEnumerable<TNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 885
  summary: Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode> nodes, IEnumerable<SyntaxToken> separators)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: System.Collections.Generic.IEnumerable{``0}
        name: System.Collections.Generic.IEnumerable{``0}
        isExternal: true
      description: A sequence of syntax nodes.
    - id: separators
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        isExternal: true
      description: >-
        A sequence of token to be interleaved between the nodes. The number of tokens must

        be one less than the number of nodes.
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 933
  summary: Creates a separated list from a sequence of nodes and tokens, starting with a node and alternating between additional nodes and separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken> nodesAndTokens)where TNode : SyntaxNode'
    parameters:
    - id: nodesAndTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        isExternal: true
      description: A sequence of nodes or tokens, alternating between nodes and separator tokens.
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(SyntaxNodeOrTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 944
  summary: >-
    Creates a separated list from a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#), where the list elements start with a node and then alternate between

    additional nodes and separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(SyntaxNodeOrTokenList nodesAndTokens)where TNode : SyntaxNode'
    parameters:
    - id: nodesAndTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
      description: The list of nodes and tokens.
    return:
      id: SeparatedSyntaxList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 990
  summary: Creates an empty [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#).
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList()
    parameters: []
    return:
      id: SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList(IEnumerable<SyntaxNodeOrToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 999
  summary: Create a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#) from a sequence of [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#).
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList(IEnumerable<SyntaxNodeOrToken> nodesAndTokens)
    parameters:
    - id: nodesAndTokens
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        isExternal: true
      description: The sequence of nodes and tokens
    return:
      id: SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList(params SyntaxNodeOrToken[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(params Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1015
  summary: Create a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](#) from one or more [Microsoft.CodeAnalysis.SyntaxNodeOrToken](#).
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList(params SyntaxNodeOrToken[] nodesAndTokens)
    parameters:
    - id: nodesAndTokens
      type:
        id: System.Array
        name: System.Array
        isExternal: true
      description: The nodes and tokens
    return:
      id: SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IdentifierName(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1024
  summary: Creates an IdentifierNameSyntax node.
  syntax:
    content:
      CSharp: public static IdentifierNameSyntax IdentifierName(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The identifier name.
    return:
      id: IdentifierNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxTree(SyntaxNode, ParseOptions, string, Encoding)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ParseOptions, string, System.Text.Encoding)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1034
  summary: Create a new syntax tree from a syntax node.
  syntax:
    content:
      CSharp: public static SyntaxTree SyntaxTree(SyntaxNode root, ParseOptions options = null, string path = "", Encoding encoding = null)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: encoding
      type:
        id: System.Text.Encoding
        name: System.Text.Encoding
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseSyntaxTree(string, ParseOptions, string, Encoding, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(string, Microsoft.CodeAnalysis.ParseOptions, string, System.Text.Encoding, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1042
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseSyntaxTree(string text, ParseOptions options = null, string path = "", Encoding encoding = null, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: encoding
      type:
        id: System.Text.Encoding
        name: System.Text.Encoding
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseSyntaxTree(SourceText, ParseOptions, string, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.ParseOptions, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1055
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseSyntaxTree(SourceText text, ParseOptions options = null, string path = "", CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseLeadingTrivia(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1067
  summary: Parse a list of trivia rules for leading trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList ParseLeadingTrivia(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTrailingTrivia(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1086
  summary: Parse a list of trivia using the parsing rules for trailing trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList ParseTrailingTrivia(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    return:
      id: SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseToken(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1123
  summary: Parse a C# language token.
  syntax:
    content:
      CSharp: public static SyntaxToken ParseToken(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the token including leading and trailing trivia.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    return:
      id: SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTokens(string, int, int, CSharpParseOptions)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(string, int, int, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1138
  summary: Parse a sequence of C# language tokens.
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxToken> ParseTokens(string text, int offset = 0, int initialTokenPosition = 0, CSharpParseOptions options = null)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of all the tokens.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: initialTokenPosition
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: An integer to use as the starting position of the first token.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
      description: Parse options.
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseName(string, int, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(string, int, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1161
  summary: Parse a NameSyntax node using the grammar rule for names.
  syntax:
    content:
      CSharp: public static NameSyntax ParseName(string text, int offset = 0, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: NameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTypeName(string, int, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(string, int, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1175
  summary: Parse a TypeNameSyntax node using the grammar rule for type names.
  syntax:
    content:
      CSharp: public static TypeSyntax ParseTypeName(string text, int offset = 0, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: TypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseExpression(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1194
  summary: Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
  syntax:
    content:
      CSharp: public static ExpressionSyntax ParseExpression(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the expression.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseStatement(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1213
  summary: Parse a StatementSyntaxNode using grammar rule for statements.
  syntax:
    content:
      CSharp: public static StatementSyntax ParseStatement(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the statement.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: StatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseCompilationUnit(string, int, CSharpParseOptions)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(string, int, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1232
  summary: >-
    Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a

    SyntaxTree instance, use CSharpSyntaxTree.ParseText instead.
  syntax:
    content:
      CSharp: public static CompilationUnitSyntax ParseCompilationUnit(string text, int offset = 0, CSharpParseOptions options = null)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the compilation unit.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    return:
      id: CompilationUnitSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseParameterList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1253
  summary: Parse a ParameterListSyntax node.
  syntax:
    content:
      CSharp: public static ParameterListSyntax ParseParameterList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the parenthesized parameter list.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseBracketedParameterList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1272
  summary: Parse a BracketedParameterListSyntax node.
  syntax:
    content:
      CSharp: public static BracketedParameterListSyntax ParseBracketedParameterList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the bracketed parameter list.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: BracketedParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1291
  summary: Parse an ArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static ArgumentListSyntax ParseArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the parenthesized argument list.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseBracketedArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1310
  summary: Parse a BracketedArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static BracketedArgumentListSyntax ParseBracketedArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the bracketed argument list.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: BracketedArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseAttributeArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1329
  summary: Parse an AttributeArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static AttributeArgumentListSyntax ParseAttributeArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
      description: The text of the attribute argument list.
    - id: offset
      type:
        id: System.Int32
        name: System.Int32
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: AttributeArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxTree, SyntaxTree, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis.SyntaxTree, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1370
  summary: Determines if two trees are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree, bool topLevel)
    parameters:
    - id: oldTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The original tree.
    - id: newTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The new tree.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the trees are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxNode, SyntaxNode, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1394
  summary: Determines if two syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, bool topLevel)
    parameters:
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The old node.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The new node.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxNode, SyntaxNode, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1408
  summary: Determines if two syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, Func<SyntaxKind, bool> ignoreChildNode = null)
    parameters:
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The old node.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The new node.
    - id: ignoreChildNode
      type:
        id: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1418
  summary: Determines if two syntax tokens are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxToken oldToken, SyntaxToken newToken)
    parameters:
    - id: oldToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The old token.
    - id: newToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The new token.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxTokenList, SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1428
  summary: Determines if two lists of tokens are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxTokenList oldList, SyntaxTokenList newList)
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
      description: The old token list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
      description: The new token list.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.SyntaxList<TNode>, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1443
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, bool topLevel)where TNode : CSharpSyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The new list.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.SyntaxList<TNode>, System.Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1458
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, Func<SyntaxKind, bool> ignoreChildNode = null)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The new list.
    - id: ignoreChildNode
      type:
        id: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1474
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, bool topLevel)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The new list.
    - id: topLevel
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, System.Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1489
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, Func<SyntaxKind, bool> ignoreChildNode = null)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The new list.
    - id: ignoreChildNode
      type:
        id: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GetStandaloneExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1533
  summary: >-
    Gets the containing expression that is actually a language expression and not just typed

    as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side

    of qualified names and member access expressions are not language expressions, yet the

    containing qualified names or member access expressions are indeed expressions.
  syntax:
    content:
      CSharp: public static ExpressionSyntax GetStandaloneExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GetNonGenericExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1695
  summary: Converts a generic name expression into one without the generic arguments.
  syntax:
    content:
      CSharp: public static ExpressionSyntax GetNonGenericExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IsCompleteSubmission(SyntaxTree)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1734
  summary: Determines whether the given text is considered a syntactically complete submission.
  syntax:
    content:
      CSharp: public static bool IsCompleteSubmission(SyntaxTree tree)
    parameters:
    - id: tree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CaseSwitchLabel(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1842
  summary: Creates a new CaseSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static CaseSwitchLabelSyntax CaseSwitchLabel(ExpressionSyntax value)
    parameters:
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: CaseSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultSwitchLabel()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1848
  summary: Creates a new DefaultSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultSwitchLabelSyntax DefaultSwitchLabel()
    parameters: []
    return:
      id: DefaultSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(params StatementSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(params Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1854
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(params StatementSyntax[] statements)
    parameters:
    - id: statements
      type:
        id: System.Array
        name: System.Array
        isExternal: true
    return:
      id: BlockSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(IEnumerable<StatementSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1860
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(IEnumerable<StatementSyntax> statements)
    parameters:
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
        isExternal: true
    return:
      id: BlockSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1865
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    return:
      id: PropertyDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1884
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: MethodDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeSyntax, ParameterListSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1910
  syntax:
    content:
      CSharp: public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, SyntaxToken, ParameterListSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1932
  syntax:
    content:
      CSharp: public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, BracketedParameterListSyntax, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1954
  syntax:
    content:
      CSharp: public static IndexerDeclarationSyntax IndexerDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, BracketedParameterListSyntax parameterList, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax
        name: BracketedParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.yml
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    return:
      id: IndexerDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingDirective(NameEqualsSyntax, NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1973
  summary: Creates a new UsingDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static UsingDirectiveSyntax UsingDirective(NameEqualsSyntax alias, NameSyntax name)
    parameters:
    - id: alias
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax
        name: NameEqualsSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.yml
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: UsingDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 57
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, SyntaxToken identifier)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 74
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, string identifier)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: TypeDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 79
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributes, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IdentifierName(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70207
  summary: Creates a new IdentifierNameSyntax instance.
  syntax:
    content:
      CSharp: public static IdentifierNameSyntax IdentifierName(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: IdentifierNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QualifiedName(NameSyntax, SyntaxToken, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70221
  summary: Creates a new QualifiedNameSyntax instance.
  syntax:
    content:
      CSharp: public static QualifiedNameSyntax QualifiedName(NameSyntax left, SyntaxToken dotToken, SimpleNameSyntax right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: dotToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: QualifiedNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QualifiedName(NameSyntax, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70238
  summary: Creates a new QualifiedNameSyntax instance.
  syntax:
    content:
      CSharp: public static QualifiedNameSyntax QualifiedName(NameSyntax left, SimpleNameSyntax right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: QualifiedNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GenericName(SyntaxToken, TypeArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70244
  summary: Creates a new GenericNameSyntax instance.
  syntax:
    content:
      CSharp: public static GenericNameSyntax GenericName(SyntaxToken identifier, TypeArgumentListSyntax typeArgumentList)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeArgumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax
        name: TypeArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.yml
    return:
      id: GenericNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GenericName(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70259
  summary: Creates a new GenericNameSyntax instance.
  syntax:
    content:
      CSharp: public static GenericNameSyntax GenericName(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: GenericNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GenericName(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70265
  summary: Creates a new GenericNameSyntax instance.
  syntax:
    content:
      CSharp: public static GenericNameSyntax GenericName(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: GenericNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeArgumentList(SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70271
  summary: Creates a new TypeArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static TypeArgumentListSyntax TypeArgumentList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeSyntax> arguments, SyntaxToken greaterThanToken)
    parameters:
    - id: lessThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax}
    - id: greaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeArgumentList(SeparatedSyntaxList<TypeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70291
  summary: Creates a new TypeArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static TypeArgumentListSyntax TypeArgumentList(SeparatedSyntaxList<TypeSyntax> arguments = default (SeparatedSyntaxList<TypeSyntax>))
    parameters:
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax}
    return:
      id: TypeArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AliasQualifiedName(IdentifierNameSyntax, SyntaxToken, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70297
  summary: Creates a new AliasQualifiedNameSyntax instance.
  syntax:
    content:
      CSharp: public static AliasQualifiedNameSyntax AliasQualifiedName(IdentifierNameSyntax alias, SyntaxToken colonColonToken, SimpleNameSyntax name)
    parameters:
    - id: alias
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: colonColonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: AliasQualifiedNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AliasQualifiedName(IdentifierNameSyntax, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70314
  summary: Creates a new AliasQualifiedNameSyntax instance.
  syntax:
    content:
      CSharp: public static AliasQualifiedNameSyntax AliasQualifiedName(IdentifierNameSyntax alias, SimpleNameSyntax name)
    parameters:
    - id: alias
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: AliasQualifiedNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AliasQualifiedName(string, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(string, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70320
  summary: Creates a new AliasQualifiedNameSyntax instance.
  syntax:
    content:
      CSharp: public static AliasQualifiedNameSyntax AliasQualifiedName(string alias, SimpleNameSyntax name)
    parameters:
    - id: alias
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: AliasQualifiedNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PredefinedType(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70326
  summary: Creates a new PredefinedTypeSyntax instance.
  syntax:
    content:
      CSharp: public static PredefinedTypeSyntax PredefinedType(SyntaxToken keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: PredefinedTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayType(TypeSyntax, SyntaxList<ArrayRankSpecifierSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70354
  summary: Creates a new ArrayTypeSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayTypeSyntax ArrayType(TypeSyntax elementType, SyntaxList<ArrayRankSpecifierSyntax> rankSpecifiers)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: rankSpecifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax}
    return:
      id: ArrayTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayType(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70362
  summary: Creates a new ArrayTypeSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayTypeSyntax ArrayType(TypeSyntax elementType)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: ArrayTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayRankSpecifier(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70368
  summary: Creates a new ArrayRankSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayRankSpecifierSyntax ArrayRankSpecifier(SyntaxToken openBracketToken, SeparatedSyntaxList<ExpressionSyntax> sizes, SyntaxToken closeBracketToken)
    parameters:
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: sizes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ArrayRankSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayRankSpecifier(SeparatedSyntaxList<ExpressionSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70388
  summary: Creates a new ArrayRankSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayRankSpecifierSyntax ArrayRankSpecifier(SeparatedSyntaxList<ExpressionSyntax> sizes = default (SeparatedSyntaxList<ExpressionSyntax>))
    parameters:
    - id: sizes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    return:
      id: ArrayRankSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PointerType(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70394
  summary: Creates a new PointerTypeSyntax instance.
  syntax:
    content:
      CSharp: public static PointerTypeSyntax PointerType(TypeSyntax elementType, SyntaxToken asteriskToken)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: asteriskToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: PointerTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PointerType(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70409
  summary: Creates a new PointerTypeSyntax instance.
  syntax:
    content:
      CSharp: public static PointerTypeSyntax PointerType(TypeSyntax elementType)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: PointerTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NullableType(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70415
  summary: Creates a new NullableTypeSyntax instance.
  syntax:
    content:
      CSharp: public static NullableTypeSyntax NullableType(TypeSyntax elementType, SyntaxToken questionToken)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: questionToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: NullableTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NullableType(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70430
  summary: Creates a new NullableTypeSyntax instance.
  syntax:
    content:
      CSharp: public static NullableTypeSyntax NullableType(TypeSyntax elementType)
    parameters:
    - id: elementType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: NullableTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OmittedTypeArgument(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70436
  summary: Creates a new OmittedTypeArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static OmittedTypeArgumentSyntax OmittedTypeArgument(SyntaxToken omittedTypeArgumentToken)
    parameters:
    - id: omittedTypeArgumentToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OmittedTypeArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OmittedTypeArgument()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70449
  summary: Creates a new OmittedTypeArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static OmittedTypeArgumentSyntax OmittedTypeArgument()
    parameters: []
    return:
      id: OmittedTypeArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParenthesizedExpression(SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70455
  summary: Creates a new ParenthesizedExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ParenthesizedExpressionSyntax ParenthesizedExpression(SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ParenthesizedExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParenthesizedExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70477
  summary: Creates a new ParenthesizedExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ParenthesizedExpressionSyntax ParenthesizedExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ParenthesizedExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PrefixUnaryExpression(SyntaxKind, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70483
  summary: Creates a new PrefixUnaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static PrefixUnaryExpressionSyntax PrefixUnaryExpression(SyntaxKind kind, SyntaxToken operatorToken, ExpressionSyntax operand)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operand
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: PrefixUnaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PrefixUnaryExpression(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70519
  summary: Creates a new PrefixUnaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static PrefixUnaryExpressionSyntax PrefixUnaryExpression(SyntaxKind kind, ExpressionSyntax operand)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: operand
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: PrefixUnaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AwaitExpression(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70550
  summary: Creates a new AwaitExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AwaitExpressionSyntax AwaitExpression(SyntaxToken awaitKeyword, ExpressionSyntax expression)
    parameters:
    - id: awaitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AwaitExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AwaitExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70565
  summary: Creates a new AwaitExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AwaitExpressionSyntax AwaitExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AwaitExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PostfixUnaryExpression(SyntaxKind, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70571
  summary: Creates a new PostfixUnaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static PostfixUnaryExpressionSyntax PostfixUnaryExpression(SyntaxKind kind, ExpressionSyntax operand, SyntaxToken operatorToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: operand
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: PostfixUnaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PostfixUnaryExpression(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70595
  summary: Creates a new PostfixUnaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static PostfixUnaryExpressionSyntax PostfixUnaryExpression(SyntaxKind kind, ExpressionSyntax operand)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: operand
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: PostfixUnaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MemberAccessExpression(SyntaxKind, ExpressionSyntax, SyntaxToken, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70614
  summary: Creates a new MemberAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MemberAccessExpressionSyntax MemberAccessExpression(SyntaxKind kind, ExpressionSyntax expression, SyntaxToken operatorToken, SimpleNameSyntax name)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: MemberAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MemberAccessExpression(SyntaxKind, ExpressionSyntax, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70640
  summary: Creates a new MemberAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MemberAccessExpressionSyntax MemberAccessExpression(SyntaxKind kind, ExpressionSyntax expression, SimpleNameSyntax name)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: MemberAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConditionalAccessExpression(ExpressionSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70659
  summary: Creates a new ConditionalAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ConditionalAccessExpressionSyntax ConditionalAccessExpression(ExpressionSyntax expression, SyntaxToken operatorToken, ExpressionSyntax whenNotNull)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: whenNotNull
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ConditionalAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConditionalAccessExpression(ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70676
  summary: Creates a new ConditionalAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ConditionalAccessExpressionSyntax ConditionalAccessExpression(ExpressionSyntax expression, ExpressionSyntax whenNotNull)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: whenNotNull
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ConditionalAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MemberBindingExpression(SyntaxToken, SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70682
  summary: Creates a new MemberBindingExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MemberBindingExpressionSyntax MemberBindingExpression(SyntaxToken operatorToken, SimpleNameSyntax name)
    parameters:
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: MemberBindingExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MemberBindingExpression(SimpleNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70697
  summary: Creates a new MemberBindingExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MemberBindingExpressionSyntax MemberBindingExpression(SimpleNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
        name: SimpleNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.yml
    return:
      id: MemberBindingExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElementBindingExpression(BracketedArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70703
  summary: Creates a new ElementBindingExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ElementBindingExpressionSyntax ElementBindingExpression(BracketedArgumentListSyntax argumentList)
    parameters:
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
        name: BracketedArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.yml
    return:
      id: ElementBindingExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElementBindingExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70711
  summary: Creates a new ElementBindingExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ElementBindingExpressionSyntax ElementBindingExpression()
    parameters: []
    return:
      id: ElementBindingExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ImplicitElementAccess(BracketedArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70717
  summary: Creates a new ImplicitElementAccessSyntax instance.
  syntax:
    content:
      CSharp: public static ImplicitElementAccessSyntax ImplicitElementAccess(BracketedArgumentListSyntax argumentList)
    parameters:
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
        name: BracketedArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.yml
    return:
      id: ImplicitElementAccessSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ImplicitElementAccess()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70725
  summary: Creates a new ImplicitElementAccessSyntax instance.
  syntax:
    content:
      CSharp: public static ImplicitElementAccessSyntax ImplicitElementAccess()
    parameters: []
    return:
      id: ImplicitElementAccessSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BinaryExpression(SyntaxKind, ExpressionSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70731
  summary: Creates a new BinaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static BinaryExpressionSyntax BinaryExpression(SyntaxKind kind, ExpressionSyntax left, SyntaxToken operatorToken, ExpressionSyntax right)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: BinaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BinaryExpression(SyntaxKind, ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70795
  summary: Creates a new BinaryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static BinaryExpressionSyntax BinaryExpression(SyntaxKind kind, ExpressionSyntax left, ExpressionSyntax right)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: BinaryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AssignmentExpression(SyntaxKind, ExpressionSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70852
  summary: Creates a new AssignmentExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AssignmentExpressionSyntax AssignmentExpression(SyntaxKind kind, ExpressionSyntax left, SyntaxToken operatorToken, ExpressionSyntax right)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AssignmentExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AssignmentExpression(SyntaxKind, ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70896
  summary: Creates a new AssignmentExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AssignmentExpressionSyntax AssignmentExpression(SyntaxKind kind, ExpressionSyntax left, ExpressionSyntax right)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: left
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AssignmentExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConditionalExpression(ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70933
  summary: Creates a new ConditionalExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ConditionalExpressionSyntax ConditionalExpression(ExpressionSyntax condition, SyntaxToken questionToken, ExpressionSyntax whenTrue, SyntaxToken colonToken, ExpressionSyntax whenFalse)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: questionToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: whenTrue
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: whenFalse
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ConditionalExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConditionalExpression(ExpressionSyntax, ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70959
  summary: Creates a new ConditionalExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ConditionalExpressionSyntax ConditionalExpression(ExpressionSyntax condition, ExpressionSyntax whenTrue, ExpressionSyntax whenFalse)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: whenTrue
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: whenFalse
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ConditionalExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ThisExpression(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70965
  summary: Creates a new ThisExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ThisExpressionSyntax ThisExpression(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ThisExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ThisExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70978
  summary: Creates a new ThisExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ThisExpressionSyntax ThisExpression()
    parameters: []
    return:
      id: ThisExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BaseExpression(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70984
  summary: Creates a new BaseExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static BaseExpressionSyntax BaseExpression(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BaseExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BaseExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 70997
  summary: Creates a new BaseExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static BaseExpressionSyntax BaseExpression()
    parameters: []
    return:
      id: BaseExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LiteralExpression(SyntaxKind, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71003
  summary: Creates a new LiteralExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static LiteralExpressionSyntax LiteralExpression(SyntaxKind kind, SyntaxToken token)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: LiteralExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LiteralExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71035
  summary: Creates a new LiteralExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static LiteralExpressionSyntax LiteralExpression(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: LiteralExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MakeRefExpression(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71064
  summary: Creates a new MakeRefExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MakeRefExpressionSyntax MakeRefExpression(SyntaxToken keyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: MakeRefExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MakeRefExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71093
  summary: Creates a new MakeRefExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static MakeRefExpressionSyntax MakeRefExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: MakeRefExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RefTypeExpression(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71099
  summary: Creates a new RefTypeExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static RefTypeExpressionSyntax RefTypeExpression(SyntaxToken keyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: RefTypeExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RefTypeExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71128
  summary: Creates a new RefTypeExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static RefTypeExpressionSyntax RefTypeExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: RefTypeExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RefValueExpression(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71134
  summary: Creates a new RefValueExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static RefValueExpressionSyntax RefValueExpression(SyntaxToken keyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken comma, TypeSyntax type, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: comma
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: RefValueExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RefValueExpression(ExpressionSyntax, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71172
  summary: Creates a new RefValueExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static RefValueExpressionSyntax RefValueExpression(ExpressionSyntax expression, TypeSyntax type)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: RefValueExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CheckedExpression(SyntaxKind, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71178
  summary: Creates a new CheckedExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static CheckedExpressionSyntax CheckedExpression(SyntaxKind kind, SyntaxToken keyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CheckedExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CheckedExpression(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71216
  summary: Creates a new CheckedExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static CheckedExpressionSyntax CheckedExpression(SyntaxKind kind, ExpressionSyntax expression)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: CheckedExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultExpression(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71235
  summary: Creates a new DefaultExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultExpressionSyntax DefaultExpression(SyntaxToken keyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DefaultExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultExpression(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71264
  summary: Creates a new DefaultExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultExpressionSyntax DefaultExpression(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: DefaultExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeOfExpression(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71270
  summary: Creates a new TypeOfExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static TypeOfExpressionSyntax TypeOfExpression(SyntaxToken keyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeOfExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeOfExpression(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71299
  summary: Creates a new TypeOfExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static TypeOfExpressionSyntax TypeOfExpression(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: TypeOfExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SizeOfExpression(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71305
  summary: Creates a new SizeOfExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static SizeOfExpressionSyntax SizeOfExpression(SyntaxToken keyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken closeParenToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: SizeOfExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SizeOfExpression(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71334
  summary: Creates a new SizeOfExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static SizeOfExpressionSyntax SizeOfExpression(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: SizeOfExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InvocationExpression(ExpressionSyntax, ArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71340
  summary: Creates a new InvocationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InvocationExpressionSyntax InvocationExpression(ExpressionSyntax expression, ArgumentListSyntax argumentList)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
        name: ArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.yml
    return:
      id: InvocationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InvocationExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71350
  summary: Creates a new InvocationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InvocationExpressionSyntax InvocationExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: InvocationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElementAccessExpression(ExpressionSyntax, BracketedArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71356
  summary: Creates a new ElementAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ElementAccessExpressionSyntax ElementAccessExpression(ExpressionSyntax expression, BracketedArgumentListSyntax argumentList)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
        name: BracketedArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.yml
    return:
      id: ElementAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElementAccessExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71366
  summary: Creates a new ElementAccessExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ElementAccessExpressionSyntax ElementAccessExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ElementAccessExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArgumentList(SyntaxToken, SeparatedSyntaxList<ArgumentSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71372
  summary: Creates a new ArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static ArgumentListSyntax ArgumentList(SyntaxToken openParenToken, SeparatedSyntaxList<ArgumentSyntax> arguments, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArgumentList(SeparatedSyntaxList<ArgumentSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71392
  summary: Creates a new ArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static ArgumentListSyntax ArgumentList(SeparatedSyntaxList<ArgumentSyntax> arguments = default (SeparatedSyntaxList<ArgumentSyntax>))
    parameters:
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
    return:
      id: ArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BracketedArgumentList(SyntaxToken, SeparatedSyntaxList<ArgumentSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71398
  summary: Creates a new BracketedArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static BracketedArgumentListSyntax BracketedArgumentList(SyntaxToken openBracketToken, SeparatedSyntaxList<ArgumentSyntax> arguments, SyntaxToken closeBracketToken)
    parameters:
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BracketedArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BracketedArgumentList(SeparatedSyntaxList<ArgumentSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71418
  summary: Creates a new BracketedArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static BracketedArgumentListSyntax BracketedArgumentList(SeparatedSyntaxList<ArgumentSyntax> arguments = default (SeparatedSyntaxList<ArgumentSyntax>))
    parameters:
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax}
    return:
      id: BracketedArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Argument(NameColonSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71424
  summary: Creates a new ArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static ArgumentSyntax Argument(NameColonSyntax nameColon, SyntaxToken refOrOutKeyword, ExpressionSyntax expression)
    parameters:
    - id: nameColon
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax
        name: NameColonSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.yml
    - id: refOrOutKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Argument(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71441
  summary: Creates a new ArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static ArgumentSyntax Argument(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameColon(IdentifierNameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71447
  summary: Creates a new NameColonSyntax instance.
  syntax:
    content:
      CSharp: public static NameColonSyntax NameColon(IdentifierNameSyntax name, SyntaxToken colonToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: NameColonSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameColon(IdentifierNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71462
  summary: Creates a new NameColonSyntax instance.
  syntax:
    content:
      CSharp: public static NameColonSyntax NameColon(IdentifierNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    return:
      id: NameColonSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameColon(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71468
  summary: Creates a new NameColonSyntax instance.
  syntax:
    content:
      CSharp: public static NameColonSyntax NameColon(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: NameColonSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CastExpression(SyntaxToken, TypeSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71474
  summary: Creates a new CastExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static CastExpressionSyntax CastExpression(SyntaxToken openParenToken, TypeSyntax type, SyntaxToken closeParenToken, ExpressionSyntax expression)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: CastExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CastExpression(TypeSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71498
  summary: Creates a new CastExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static CastExpressionSyntax CastExpression(TypeSyntax type, ExpressionSyntax expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: CastExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousMethodExpression(SyntaxToken, SyntaxToken, ParameterListSyntax, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71504
  summary: Creates a new AnonymousMethodExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousMethodExpressionSyntax AnonymousMethodExpression(SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax parameterList, CSharpSyntaxNode body)
    parameters:
    - id: asyncKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: delegateKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: AnonymousMethodExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousMethodExpression(ParameterListSyntax, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71527
  summary: Creates a new AnonymousMethodExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousMethodExpressionSyntax AnonymousMethodExpression(ParameterListSyntax parameterList, CSharpSyntaxNode body)
    parameters:
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: AnonymousMethodExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousMethodExpression(CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71533
  summary: Creates a new AnonymousMethodExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousMethodExpressionSyntax AnonymousMethodExpression(CSharpSyntaxNode body)
    parameters:
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: AnonymousMethodExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71539
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxToken asyncKeyword, ParameterSyntax parameter, SyntaxToken arrowToken, CSharpSyntaxNode body)
    parameters:
    - id: asyncKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameter
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax
        name: ParameterSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.yml
    - id: arrowToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: SimpleLambdaExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71564
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(ParameterSyntax parameter, CSharpSyntaxNode body)
    parameters:
    - id: parameter
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax
        name: ParameterSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: SimpleLambdaExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParenthesizedLambdaExpression(SyntaxToken, ParameterListSyntax, SyntaxToken, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71570
  summary: Creates a new ParenthesizedLambdaExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxToken asyncKeyword, ParameterListSyntax parameterList, SyntaxToken arrowToken, CSharpSyntaxNode body)
    parameters:
    - id: asyncKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: arrowToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: ParenthesizedLambdaExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParenthesizedLambdaExpression(ParameterListSyntax, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71595
  summary: Creates a new ParenthesizedLambdaExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(ParameterListSyntax parameterList, CSharpSyntaxNode body)
    parameters:
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: ParenthesizedLambdaExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParenthesizedLambdaExpression(CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71601
  summary: Creates a new ParenthesizedLambdaExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(CSharpSyntaxNode body)
    parameters:
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        name: CSharpSyntaxNode
        href: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.yml
    return:
      id: ParenthesizedLambdaExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InitializerExpression(SyntaxKind, SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71607
  summary: Creates a new InitializerExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InitializerExpressionSyntax InitializerExpression(SyntaxKind kind, SyntaxToken openBraceToken, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken closeBraceToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expressions
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InitializerExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InitializerExpression(SyntaxKind, SeparatedSyntaxList<ExpressionSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71637
  summary: Creates a new InitializerExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InitializerExpressionSyntax InitializerExpression(SyntaxKind kind, SeparatedSyntaxList<ExpressionSyntax> expressions = default (SeparatedSyntaxList<ExpressionSyntax>))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expressions
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    return:
      id: InitializerExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ObjectCreationExpression(SyntaxToken, TypeSyntax, ArgumentListSyntax, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71643
  summary: Creates a new ObjectCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ObjectCreationExpressionSyntax ObjectCreationExpression(SyntaxToken newKeyword, TypeSyntax type, ArgumentListSyntax argumentList, InitializerExpressionSyntax initializer)
    parameters:
    - id: newKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
        name: ArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ObjectCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ObjectCreationExpression(TypeSyntax, ArgumentListSyntax, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71658
  summary: Creates a new ObjectCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ObjectCreationExpressionSyntax ObjectCreationExpression(TypeSyntax type, ArgumentListSyntax argumentList, InitializerExpressionSyntax initializer)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
        name: ArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ObjectCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ObjectCreationExpression(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71664
  summary: Creates a new ObjectCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ObjectCreationExpressionSyntax ObjectCreationExpression(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: ObjectCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousObjectMemberDeclarator(NameEqualsSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71670
  summary: Creates a new AnonymousObjectMemberDeclaratorSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator(NameEqualsSyntax nameEquals, ExpressionSyntax expression)
    parameters:
    - id: nameEquals
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax
        name: NameEqualsSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AnonymousObjectMemberDeclaratorSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousObjectMemberDeclarator(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71678
  summary: Creates a new AnonymousObjectMemberDeclaratorSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AnonymousObjectMemberDeclaratorSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousObjectCreationExpression(SyntaxToken, SyntaxToken, SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71684
  summary: Creates a new AnonymousObjectCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(SyntaxToken newKeyword, SyntaxToken openBraceToken, SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax> initializers, SyntaxToken closeBraceToken)
    parameters:
    - id: newKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: initializers
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AnonymousObjectCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousObjectCreationExpression(SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71711
  summary: Creates a new AnonymousObjectCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax> initializers = default (SeparatedSyntaxList<AnonymousObjectMemberDeclaratorSyntax>))
    parameters:
    - id: initializers
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax}
    return:
      id: AnonymousObjectCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayCreationExpression(SyntaxToken, ArrayTypeSyntax, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71717
  summary: Creates a new ArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayCreationExpressionSyntax ArrayCreationExpression(SyntaxToken newKeyword, ArrayTypeSyntax type, InitializerExpressionSyntax initializer)
    parameters:
    - id: newKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax
        name: ArrayTypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayCreationExpression(ArrayTypeSyntax, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71732
  summary: Creates a new ArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayCreationExpressionSyntax ArrayCreationExpression(ArrayTypeSyntax type, InitializerExpressionSyntax initializer)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax
        name: ArrayTypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrayCreationExpression(ArrayTypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71738
  summary: Creates a new ArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ArrayCreationExpressionSyntax ArrayCreationExpression(ArrayTypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax
        name: ArrayTypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.yml
    return:
      id: ArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ImplicitArrayCreationExpression(SyntaxToken, SyntaxToken, SyntaxTokenList, SyntaxToken, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71744
  summary: Creates a new ImplicitArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(SyntaxToken newKeyword, SyntaxToken openBracketToken, SyntaxTokenList commas, SyntaxToken closeBracketToken, InitializerExpressionSyntax initializer)
    parameters:
    - id: newKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: commas
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ImplicitArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ImplicitArrayCreationExpression(SyntaxTokenList, InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71773
  summary: Creates a new ImplicitArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(SyntaxTokenList commas, InitializerExpressionSyntax initializer)
    parameters:
    - id: commas
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ImplicitArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ImplicitArrayCreationExpression(InitializerExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71779
  summary: Creates a new ImplicitArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(InitializerExpressionSyntax initializer)
    parameters:
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
        name: InitializerExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.yml
    return:
      id: ImplicitArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StackAllocArrayCreationExpression(SyntaxToken, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71785
  summary: Creates a new StackAllocArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression(SyntaxToken stackAllocKeyword, TypeSyntax type)
    parameters:
    - id: stackAllocKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: StackAllocArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StackAllocArrayCreationExpression(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71800
  summary: Creates a new StackAllocArrayCreationExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: StackAllocArrayCreationExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryExpression(FromClauseSyntax, QueryBodySyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71806
  summary: Creates a new QueryExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static QueryExpressionSyntax QueryExpression(FromClauseSyntax fromClause, QueryBodySyntax body)
    parameters:
    - id: fromClause
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax
        name: FromClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax
        name: QueryBodySyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.yml
    return:
      id: QueryExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryBody(SyntaxList<QueryClauseSyntax>, SelectOrGroupClauseSyntax, QueryContinuationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71816
  summary: Creates a new QueryBodySyntax instance.
  syntax:
    content:
      CSharp: public static QueryBodySyntax QueryBody(SyntaxList<QueryClauseSyntax> clauses, SelectOrGroupClauseSyntax selectOrGroup, QueryContinuationSyntax continuation)
    parameters:
    - id: clauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax}
    - id: selectOrGroup
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax
        name: SelectOrGroupClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax.yml
    - id: continuation
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax
        name: QueryContinuationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.yml
    return:
      id: QueryBodySyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryBody(SelectOrGroupClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71824
  summary: Creates a new QueryBodySyntax instance.
  syntax:
    content:
      CSharp: public static QueryBodySyntax QueryBody(SelectOrGroupClauseSyntax selectOrGroup)
    parameters:
    - id: selectOrGroup
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax
        name: SelectOrGroupClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax.yml
    return:
      id: QueryBodySyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FromClause(SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71830
  summary: Creates a new FromClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FromClauseSyntax FromClause(SyntaxToken fromKeyword, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression)
    parameters:
    - id: fromKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: FromClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FromClause(TypeSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71859
  summary: Creates a new FromClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FromClauseSyntax FromClause(TypeSyntax type, SyntaxToken identifier, ExpressionSyntax expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: FromClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FromClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71865
  summary: Creates a new FromClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FromClauseSyntax FromClause(SyntaxToken identifier, ExpressionSyntax expression)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: FromClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FromClause(string, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(string, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71871
  summary: Creates a new FromClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FromClauseSyntax FromClause(string identifier, ExpressionSyntax expression)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: FromClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LetClause(SyntaxToken, SyntaxToken, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71877
  summary: Creates a new LetClauseSyntax instance.
  syntax:
    content:
      CSharp: public static LetClauseSyntax LetClause(SyntaxToken letKeyword, SyntaxToken identifier, SyntaxToken equalsToken, ExpressionSyntax expression)
    parameters:
    - id: letKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: LetClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LetClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71906
  summary: Creates a new LetClauseSyntax instance.
  syntax:
    content:
      CSharp: public static LetClauseSyntax LetClause(SyntaxToken identifier, ExpressionSyntax expression)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: LetClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LetClause(string, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(string, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71912
  summary: Creates a new LetClauseSyntax instance.
  syntax:
    content:
      CSharp: public static LetClauseSyntax LetClause(string identifier, ExpressionSyntax expression)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: LetClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinClause(SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, JoinIntoClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71918
  summary: Creates a new JoinClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinClauseSyntax JoinClause(SyntaxToken joinKeyword, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax inExpression, SyntaxToken onKeyword, ExpressionSyntax leftExpression, SyntaxToken equalsKeyword, ExpressionSyntax rightExpression, JoinIntoClauseSyntax into)
    parameters:
    - id: joinKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: onKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: leftExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: equalsKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: rightExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: into
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax
        name: JoinIntoClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.yml
    return:
      id: JoinClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinClause(TypeSyntax, SyntaxToken, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax, JoinIntoClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71965
  summary: Creates a new JoinClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinClauseSyntax JoinClause(TypeSyntax type, SyntaxToken identifier, ExpressionSyntax inExpression, ExpressionSyntax leftExpression, ExpressionSyntax rightExpression, JoinIntoClauseSyntax into)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: leftExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: rightExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: into
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax
        name: JoinIntoClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.yml
    return:
      id: JoinClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinClause(SyntaxToken, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71971
  summary: Creates a new JoinClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinClauseSyntax JoinClause(SyntaxToken identifier, ExpressionSyntax inExpression, ExpressionSyntax leftExpression, ExpressionSyntax rightExpression)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: leftExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: rightExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: JoinClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinClause(string, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(string, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71977
  summary: Creates a new JoinClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinClauseSyntax JoinClause(string identifier, ExpressionSyntax inExpression, ExpressionSyntax leftExpression, ExpressionSyntax rightExpression)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: inExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: leftExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: rightExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: JoinClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinIntoClause(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 71983
  summary: Creates a new JoinIntoClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinIntoClauseSyntax JoinIntoClause(SyntaxToken intoKeyword, SyntaxToken identifier)
    parameters:
    - id: intoKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: JoinIntoClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinIntoClause(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72003
  summary: Creates a new JoinIntoClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinIntoClauseSyntax JoinIntoClause(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: JoinIntoClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: JoinIntoClause(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72009
  summary: Creates a new JoinIntoClauseSyntax instance.
  syntax:
    content:
      CSharp: public static JoinIntoClauseSyntax JoinIntoClause(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: JoinIntoClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WhereClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72015
  summary: Creates a new WhereClauseSyntax instance.
  syntax:
    content:
      CSharp: public static WhereClauseSyntax WhereClause(SyntaxToken whereKeyword, ExpressionSyntax condition)
    parameters:
    - id: whereKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: WhereClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WhereClause(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72030
  summary: Creates a new WhereClauseSyntax instance.
  syntax:
    content:
      CSharp: public static WhereClauseSyntax WhereClause(ExpressionSyntax condition)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: WhereClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OrderByClause(SyntaxToken, SeparatedSyntaxList<OrderingSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72036
  summary: Creates a new OrderByClauseSyntax instance.
  syntax:
    content:
      CSharp: public static OrderByClauseSyntax OrderByClause(SyntaxToken orderByKeyword, SeparatedSyntaxList<OrderingSyntax> orderings)
    parameters:
    - id: orderByKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: orderings
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax}
    return:
      id: OrderByClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OrderByClause(SeparatedSyntaxList<OrderingSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72049
  summary: Creates a new OrderByClauseSyntax instance.
  syntax:
    content:
      CSharp: public static OrderByClauseSyntax OrderByClause(SeparatedSyntaxList<OrderingSyntax> orderings = default (SeparatedSyntaxList<OrderingSyntax>))
    parameters:
    - id: orderings
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax}
    return:
      id: OrderByClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Ordering(SyntaxKind, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72055
  summary: Creates a new OrderingSyntax instance.
  syntax:
    content:
      CSharp: public static OrderingSyntax Ordering(SyntaxKind kind, ExpressionSyntax expression, SyntaxToken ascendingOrDescendingKeyword)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: ascendingOrDescendingKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OrderingSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Ordering(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72080
  summary: Creates a new OrderingSyntax instance.
  syntax:
    content:
      CSharp: public static OrderingSyntax Ordering(SyntaxKind kind, ExpressionSyntax expression)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: OrderingSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SelectClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72099
  summary: Creates a new SelectClauseSyntax instance.
  syntax:
    content:
      CSharp: public static SelectClauseSyntax SelectClause(SyntaxToken selectKeyword, ExpressionSyntax expression)
    parameters:
    - id: selectKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: SelectClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SelectClause(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72114
  summary: Creates a new SelectClauseSyntax instance.
  syntax:
    content:
      CSharp: public static SelectClauseSyntax SelectClause(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: SelectClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GroupClause(SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72120
  summary: Creates a new GroupClauseSyntax instance.
  syntax:
    content:
      CSharp: public static GroupClauseSyntax GroupClause(SyntaxToken groupKeyword, ExpressionSyntax groupExpression, SyntaxToken byKeyword, ExpressionSyntax byExpression)
    parameters:
    - id: groupKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: groupExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: byKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: byExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: GroupClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GroupClause(ExpressionSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72144
  summary: Creates a new GroupClauseSyntax instance.
  syntax:
    content:
      CSharp: public static GroupClauseSyntax GroupClause(ExpressionSyntax groupExpression, ExpressionSyntax byExpression)
    parameters:
    - id: groupExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: byExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: GroupClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryContinuation(SyntaxToken, SyntaxToken, QueryBodySyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72150
  summary: Creates a new QueryContinuationSyntax instance.
  syntax:
    content:
      CSharp: public static QueryContinuationSyntax QueryContinuation(SyntaxToken intoKeyword, SyntaxToken identifier, QueryBodySyntax body)
    parameters:
    - id: intoKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax
        name: QueryBodySyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.yml
    return:
      id: QueryContinuationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryContinuation(SyntaxToken, QueryBodySyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72172
  summary: Creates a new QueryContinuationSyntax instance.
  syntax:
    content:
      CSharp: public static QueryContinuationSyntax QueryContinuation(SyntaxToken identifier, QueryBodySyntax body)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax
        name: QueryBodySyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.yml
    return:
      id: QueryContinuationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QueryContinuation(string, QueryBodySyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(string, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72178
  summary: Creates a new QueryContinuationSyntax instance.
  syntax:
    content:
      CSharp: public static QueryContinuationSyntax QueryContinuation(string identifier, QueryBodySyntax body)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax
        name: QueryBodySyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.yml
    return:
      id: QueryContinuationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OmittedArraySizeExpression(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72184
  summary: Creates a new OmittedArraySizeExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static OmittedArraySizeExpressionSyntax OmittedArraySizeExpression(SyntaxToken omittedArraySizeExpressionToken)
    parameters:
    - id: omittedArraySizeExpressionToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OmittedArraySizeExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OmittedArraySizeExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72197
  summary: Creates a new OmittedArraySizeExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static OmittedArraySizeExpressionSyntax OmittedArraySizeExpression()
    parameters: []
    return:
      id: OmittedArraySizeExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolatedStringExpression(SyntaxToken, SyntaxList<InterpolatedStringContentSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72203
  summary: Creates a new InterpolatedStringExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolatedStringExpressionSyntax InterpolatedStringExpression(SyntaxToken stringStartToken, SyntaxList<InterpolatedStringContentSyntax> contents, SyntaxToken stringEndToken)
    parameters:
    - id: stringStartToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: contents
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax}
    - id: stringEndToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolatedStringExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolatedStringExpression(SyntaxToken, SyntaxList<InterpolatedStringContentSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72224
  summary: Creates a new InterpolatedStringExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolatedStringExpressionSyntax InterpolatedStringExpression(SyntaxToken stringStartToken, SyntaxList<InterpolatedStringContentSyntax> contents)
    parameters:
    - id: stringStartToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: contents
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax}
    return:
      id: InterpolatedStringExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolatedStringExpression(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72230
  summary: Creates a new InterpolatedStringExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolatedStringExpressionSyntax InterpolatedStringExpression(SyntaxToken stringStartToken)
    parameters:
    - id: stringStartToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolatedStringExpressionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolatedStringText(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72236
  summary: Creates a new InterpolatedStringTextSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolatedStringTextSyntax InterpolatedStringText(SyntaxToken textToken)
    parameters:
    - id: textToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolatedStringTextSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolatedStringText()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72249
  summary: Creates a new InterpolatedStringTextSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolatedStringTextSyntax InterpolatedStringText()
    parameters: []
    return:
      id: InterpolatedStringTextSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Interpolation(SyntaxToken, ExpressionSyntax, InterpolationAlignmentClauseSyntax, InterpolationFormatClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72255
  summary: Creates a new InterpolationSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationSyntax Interpolation(SyntaxToken openBraceToken, ExpressionSyntax expression, InterpolationAlignmentClauseSyntax alignmentClause, InterpolationFormatClauseSyntax formatClause, SyntaxToken closeBraceToken)
    parameters:
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: alignmentClause
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax
        name: InterpolationAlignmentClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.yml
    - id: formatClause
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax
        name: InterpolationFormatClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.yml
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Interpolation(ExpressionSyntax, InterpolationAlignmentClauseSyntax, InterpolationFormatClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72277
  summary: Creates a new InterpolationSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationSyntax Interpolation(ExpressionSyntax expression, InterpolationAlignmentClauseSyntax alignmentClause, InterpolationFormatClauseSyntax formatClause)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: alignmentClause
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax
        name: InterpolationAlignmentClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.yml
    - id: formatClause
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax
        name: InterpolationFormatClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.yml
    return:
      id: InterpolationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Interpolation(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72283
  summary: Creates a new InterpolationSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationSyntax Interpolation(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: InterpolationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolationAlignmentClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72289
  summary: Creates a new InterpolationAlignmentClauseSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(SyntaxToken commaToken, ExpressionSyntax value)
    parameters:
    - id: commaToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: InterpolationAlignmentClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolationFormatClause(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72297
  summary: Creates a new InterpolationFormatClauseSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationFormatClauseSyntax InterpolationFormatClause(SyntaxToken colonToken, SyntaxToken formatStringToken)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: formatStringToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolationFormatClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterpolationFormatClause(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72310
  summary: Creates a new InterpolationFormatClauseSyntax instance.
  syntax:
    content:
      CSharp: public static InterpolationFormatClauseSyntax InterpolationFormatClause(SyntaxToken colonToken)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterpolationFormatClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GlobalStatement(StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72316
  summary: Creates a new GlobalStatementSyntax instance.
  syntax:
    content:
      CSharp: public static GlobalStatementSyntax GlobalStatement(StatementSyntax statement)
    parameters:
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: GlobalStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(SyntaxToken, SyntaxList<StatementSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72324
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(SyntaxToken openBraceToken, SyntaxList<StatementSyntax> statements, SyntaxToken closeBraceToken)
    parameters:
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statements
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BlockSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(SyntaxList<StatementSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72344
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(SyntaxList<StatementSyntax> statements = default (SyntaxList<StatementSyntax>))
    parameters:
    - id: statements
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
    return:
      id: BlockSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LocalDeclarationStatement(SyntaxTokenList, VariableDeclarationSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72350
  summary: Creates a new LocalDeclarationStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LocalDeclarationStatementSyntax LocalDeclarationStatement(SyntaxTokenList modifiers, VariableDeclarationSyntax declaration, SyntaxToken semicolonToken)
    parameters:
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: LocalDeclarationStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LocalDeclarationStatement(SyntaxTokenList, VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72365
  summary: Creates a new LocalDeclarationStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LocalDeclarationStatementSyntax LocalDeclarationStatement(SyntaxTokenList modifiers, VariableDeclarationSyntax declaration)
    parameters:
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: LocalDeclarationStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LocalDeclarationStatement(VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72371
  summary: Creates a new LocalDeclarationStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LocalDeclarationStatementSyntax LocalDeclarationStatement(VariableDeclarationSyntax declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: LocalDeclarationStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VariableDeclaration(TypeSyntax, SeparatedSyntaxList<VariableDeclaratorSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72377
  summary: Creates a new VariableDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static VariableDeclarationSyntax VariableDeclaration(TypeSyntax type, SeparatedSyntaxList<VariableDeclaratorSyntax> variables)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: variables
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax}
    return:
      id: VariableDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VariableDeclaration(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72385
  summary: Creates a new VariableDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static VariableDeclarationSyntax VariableDeclaration(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: VariableDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VariableDeclarator(SyntaxToken, BracketedArgumentListSyntax, EqualsValueClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72391
  summary: Creates a new VariableDeclaratorSyntax instance.
  syntax:
    content:
      CSharp: public static VariableDeclaratorSyntax VariableDeclarator(SyntaxToken identifier, BracketedArgumentListSyntax argumentList, EqualsValueClauseSyntax initializer)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
        name: BracketedArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
        name: EqualsValueClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.yml
    return:
      id: VariableDeclaratorSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VariableDeclarator(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72404
  summary: Creates a new VariableDeclaratorSyntax instance.
  syntax:
    content:
      CSharp: public static VariableDeclaratorSyntax VariableDeclarator(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: VariableDeclaratorSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VariableDeclarator(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72410
  summary: Creates a new VariableDeclaratorSyntax instance.
  syntax:
    content:
      CSharp: public static VariableDeclaratorSyntax VariableDeclarator(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: VariableDeclaratorSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EqualsValueClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72416
  summary: Creates a new EqualsValueClauseSyntax instance.
  syntax:
    content:
      CSharp: public static EqualsValueClauseSyntax EqualsValueClause(SyntaxToken equalsToken, ExpressionSyntax value)
    parameters:
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: EqualsValueClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EqualsValueClause(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72431
  summary: Creates a new EqualsValueClauseSyntax instance.
  syntax:
    content:
      CSharp: public static EqualsValueClauseSyntax EqualsValueClause(ExpressionSyntax value)
    parameters:
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: EqualsValueClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExpressionStatement(ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72437
  summary: Creates a new ExpressionStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ExpressionStatementSyntax ExpressionStatement(ExpressionSyntax expression, SyntaxToken semicolonToken)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ExpressionStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExpressionStatement(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72452
  summary: Creates a new ExpressionStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ExpressionStatementSyntax ExpressionStatement(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ExpressionStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EmptyStatement(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72458
  summary: Creates a new EmptyStatementSyntax instance.
  syntax:
    content:
      CSharp: public static EmptyStatementSyntax EmptyStatement(SyntaxToken semicolonToken)
    parameters:
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EmptyStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EmptyStatement()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72471
  summary: Creates a new EmptyStatementSyntax instance.
  syntax:
    content:
      CSharp: public static EmptyStatementSyntax EmptyStatement()
    parameters: []
    return:
      id: EmptyStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LabeledStatement(SyntaxToken, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72477
  summary: Creates a new LabeledStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LabeledStatementSyntax LabeledStatement(SyntaxToken identifier, SyntaxToken colonToken, StatementSyntax statement)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: LabeledStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LabeledStatement(SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72499
  summary: Creates a new LabeledStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LabeledStatementSyntax LabeledStatement(SyntaxToken identifier, StatementSyntax statement)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: LabeledStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LabeledStatement(string, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(string, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72505
  summary: Creates a new LabeledStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LabeledStatementSyntax LabeledStatement(string identifier, StatementSyntax statement)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: LabeledStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GotoStatement(SyntaxKind, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72511
  summary: Creates a new GotoStatementSyntax instance.
  syntax:
    content:
      CSharp: public static GotoStatementSyntax GotoStatement(SyntaxKind kind, SyntaxToken gotoKeyword, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax expression, SyntaxToken semicolonToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: gotoKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: caseOrDefaultKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: GotoStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GotoStatement(SyntaxKind, SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72549
  summary: Creates a new GotoStatementSyntax instance.
  syntax:
    content:
      CSharp: public static GotoStatementSyntax GotoStatement(SyntaxKind kind, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax expression)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: caseOrDefaultKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: GotoStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GotoStatement(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72555
  summary: Creates a new GotoStatementSyntax instance.
  syntax:
    content:
      CSharp: public static GotoStatementSyntax GotoStatement(SyntaxKind kind, ExpressionSyntax expression = default (ExpressionSyntax))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: GotoStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BreakStatement(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72561
  summary: Creates a new BreakStatementSyntax instance.
  syntax:
    content:
      CSharp: public static BreakStatementSyntax BreakStatement(SyntaxToken breakKeyword, SyntaxToken semicolonToken)
    parameters:
    - id: breakKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BreakStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BreakStatement()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72581
  summary: Creates a new BreakStatementSyntax instance.
  syntax:
    content:
      CSharp: public static BreakStatementSyntax BreakStatement()
    parameters: []
    return:
      id: BreakStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ContinueStatement(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72587
  summary: Creates a new ContinueStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ContinueStatementSyntax ContinueStatement(SyntaxToken continueKeyword, SyntaxToken semicolonToken)
    parameters:
    - id: continueKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ContinueStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ContinueStatement()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72607
  summary: Creates a new ContinueStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ContinueStatementSyntax ContinueStatement()
    parameters: []
    return:
      id: ContinueStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ReturnStatement(SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72613
  summary: Creates a new ReturnStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ReturnStatementSyntax ReturnStatement(SyntaxToken returnKeyword, ExpressionSyntax expression, SyntaxToken semicolonToken)
    parameters:
    - id: returnKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ReturnStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ReturnStatement(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72633
  summary: Creates a new ReturnStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ReturnStatementSyntax ReturnStatement(ExpressionSyntax expression = default (ExpressionSyntax))
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ReturnStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ThrowStatement(SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72639
  summary: Creates a new ThrowStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ThrowStatementSyntax ThrowStatement(SyntaxToken throwKeyword, ExpressionSyntax expression, SyntaxToken semicolonToken)
    parameters:
    - id: throwKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ThrowStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ThrowStatement(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72659
  summary: Creates a new ThrowStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ThrowStatementSyntax ThrowStatement(ExpressionSyntax expression = default (ExpressionSyntax))
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ThrowStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: YieldStatement(SyntaxKind, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72665
  summary: Creates a new YieldStatementSyntax instance.
  syntax:
    content:
      CSharp: public static YieldStatementSyntax YieldStatement(SyntaxKind kind, SyntaxToken yieldKeyword, SyntaxToken returnOrBreakKeyword, ExpressionSyntax expression, SyntaxToken semicolonToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: yieldKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: returnOrBreakKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: YieldStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: YieldStatement(SyntaxKind, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72701
  summary: Creates a new YieldStatementSyntax instance.
  syntax:
    content:
      CSharp: public static YieldStatementSyntax YieldStatement(SyntaxKind kind, ExpressionSyntax expression = default (ExpressionSyntax))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: YieldStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WhileStatement(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72720
  summary: Creates a new WhileStatementSyntax instance.
  syntax:
    content:
      CSharp: public static WhileStatementSyntax WhileStatement(SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: whileKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: WhileStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WhileStatement(ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72751
  summary: Creates a new WhileStatementSyntax instance.
  syntax:
    content:
      CSharp: public static WhileStatementSyntax WhileStatement(ExpressionSyntax condition, StatementSyntax statement)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: WhileStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DoStatement(SyntaxToken, StatementSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72757
  summary: Creates a new DoStatementSyntax instance.
  syntax:
    content:
      CSharp: public static DoStatementSyntax DoStatement(SyntaxToken doKeyword, StatementSyntax statement, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, SyntaxToken semicolonToken)
    parameters:
    - id: doKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    - id: whileKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DoStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DoStatement(StatementSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72802
  summary: Creates a new DoStatementSyntax instance.
  syntax:
    content:
      CSharp: public static DoStatementSyntax DoStatement(StatementSyntax statement, ExpressionSyntax condition)
    parameters:
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: DoStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForStatement(SyntaxToken, SyntaxToken, VariableDeclarationSyntax, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken, ExpressionSyntax, SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72808
  summary: Creates a new ForStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForStatementSyntax ForStatement(SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, SyntaxToken firstSemicolonToken, ExpressionSyntax condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExpressionSyntax> incrementors, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: forKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: initializers
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: firstSemicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: secondSemicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: incrementors
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForStatement(VariableDeclarationSyntax, SeparatedSyntaxList<ExpressionSyntax>, ExpressionSyntax, SeparatedSyntaxList<ExpressionSyntax>, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72851
  summary: Creates a new ForStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForStatementSyntax ForStatement(VariableDeclarationSyntax declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, ExpressionSyntax condition, SeparatedSyntaxList<ExpressionSyntax> incrementors, StatementSyntax statement)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: initializers
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: incrementors
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForStatement(StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72857
  summary: Creates a new ForStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForStatementSyntax ForStatement(StatementSyntax statement)
    parameters:
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72863
  summary: Creates a new ForEachStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForEachStatementSyntax ForEachStatement(SyntaxToken forEachKeyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: forEachKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: inKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForEachStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72910
  summary: Creates a new ForEachStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForEachStatementSyntax ForEachStatement(TypeSyntax type, SyntaxToken identifier, ExpressionSyntax expression, StatementSyntax statement)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForEachStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ForEachStatement(TypeSyntax, string, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, string, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72916
  summary: Creates a new ForEachStatementSyntax instance.
  syntax:
    content:
      CSharp: public static ForEachStatementSyntax ForEachStatement(TypeSyntax type, string identifier, ExpressionSyntax expression, StatementSyntax statement)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ForEachStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingStatement(SyntaxToken, SyntaxToken, VariableDeclarationSyntax, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72922
  summary: Creates a new UsingStatementSyntax instance.
  syntax:
    content:
      CSharp: public static UsingStatementSyntax UsingStatement(SyntaxToken usingKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax declaration, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: usingKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: UsingStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingStatement(VariableDeclarationSyntax, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72951
  summary: Creates a new UsingStatementSyntax instance.
  syntax:
    content:
      CSharp: public static UsingStatementSyntax UsingStatement(VariableDeclarationSyntax declaration, ExpressionSyntax expression, StatementSyntax statement)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: UsingStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingStatement(StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72957
  summary: Creates a new UsingStatementSyntax instance.
  syntax:
    content:
      CSharp: public static UsingStatementSyntax UsingStatement(StatementSyntax statement)
    parameters:
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: UsingStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FixedStatement(SyntaxToken, SyntaxToken, VariableDeclarationSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72963
  summary: Creates a new FixedStatementSyntax instance.
  syntax:
    content:
      CSharp: public static FixedStatementSyntax FixedStatement(SyntaxToken fixedKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax declaration, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: fixedKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: FixedStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FixedStatement(VariableDeclarationSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 72994
  summary: Creates a new FixedStatementSyntax instance.
  syntax:
    content:
      CSharp: public static FixedStatementSyntax FixedStatement(VariableDeclarationSyntax declaration, StatementSyntax statement)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: FixedStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CheckedStatement(SyntaxKind, SyntaxToken, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73000
  summary: Creates a new CheckedStatementSyntax instance.
  syntax:
    content:
      CSharp: public static CheckedStatementSyntax CheckedStatement(SyntaxKind kind, SyntaxToken keyword, BlockSyntax block)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: CheckedStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CheckedStatement(SyntaxKind, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73024
  summary: Creates a new CheckedStatementSyntax instance.
  syntax:
    content:
      CSharp: public static CheckedStatementSyntax CheckedStatement(SyntaxKind kind, BlockSyntax block = default (BlockSyntax))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: CheckedStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UnsafeStatement(SyntaxToken, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73043
  summary: Creates a new UnsafeStatementSyntax instance.
  syntax:
    content:
      CSharp: public static UnsafeStatementSyntax UnsafeStatement(SyntaxToken unsafeKeyword, BlockSyntax block)
    parameters:
    - id: unsafeKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: UnsafeStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UnsafeStatement(BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73058
  summary: Creates a new UnsafeStatementSyntax instance.
  syntax:
    content:
      CSharp: public static UnsafeStatementSyntax UnsafeStatement(BlockSyntax block = default (BlockSyntax))
    parameters:
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: UnsafeStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LockStatement(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73064
  summary: Creates a new LockStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LockStatementSyntax LockStatement(SyntaxToken lockKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
    parameters:
    - id: lockKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: LockStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LockStatement(ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73095
  summary: Creates a new LockStatementSyntax instance.
  syntax:
    content:
      CSharp: public static LockStatementSyntax LockStatement(ExpressionSyntax expression, StatementSyntax statement)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: LockStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IfStatement(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax, ElseClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73101
  summary: Creates a new IfStatementSyntax instance.
  syntax:
    content:
      CSharp: public static IfStatementSyntax IfStatement(SyntaxToken ifKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement, ElseClauseSyntax @else)
    parameters:
    - id: ifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    - id: else
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax
        name: ElseClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.yml
    return:
      id: IfStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IfStatement(ExpressionSyntax, StatementSyntax, ElseClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73132
  summary: Creates a new IfStatementSyntax instance.
  syntax:
    content:
      CSharp: public static IfStatementSyntax IfStatement(ExpressionSyntax condition, StatementSyntax statement, ElseClauseSyntax @else)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    - id: else
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax
        name: ElseClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.yml
    return:
      id: IfStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IfStatement(ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73138
  summary: Creates a new IfStatementSyntax instance.
  syntax:
    content:
      CSharp: public static IfStatementSyntax IfStatement(ExpressionSyntax condition, StatementSyntax statement)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: IfStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElseClause(SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73144
  summary: Creates a new ElseClauseSyntax instance.
  syntax:
    content:
      CSharp: public static ElseClauseSyntax ElseClause(SyntaxToken elseKeyword, StatementSyntax statement)
    parameters:
    - id: elseKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ElseClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElseClause(StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73159
  summary: Creates a new ElseClauseSyntax instance.
  syntax:
    content:
      CSharp: public static ElseClauseSyntax ElseClause(StatementSyntax statement)
    parameters:
    - id: statement
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
        name: StatementSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax.yml
    return:
      id: ElseClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SwitchStatement(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, SyntaxToken, SyntaxList<SwitchSectionSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73165
  summary: Creates a new SwitchStatementSyntax instance.
  syntax:
    content:
      CSharp: public static SwitchStatementSyntax SwitchStatement(SyntaxToken switchKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, SyntaxToken openBraceToken, SyntaxList<SwitchSectionSyntax> sections, SyntaxToken closeBraceToken)
    parameters:
    - id: switchKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: sections
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: SwitchStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SwitchStatement(ExpressionSyntax, SyntaxList<SwitchSectionSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73208
  summary: Creates a new SwitchStatementSyntax instance.
  syntax:
    content:
      CSharp: public static SwitchStatementSyntax SwitchStatement(ExpressionSyntax expression, SyntaxList<SwitchSectionSyntax> sections)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: sections
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax}
    return:
      id: SwitchStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SwitchStatement(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73214
  summary: Creates a new SwitchStatementSyntax instance.
  syntax:
    content:
      CSharp: public static SwitchStatementSyntax SwitchStatement(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: SwitchStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SwitchSection(SyntaxList<SwitchLabelSyntax>, SyntaxList<StatementSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73220
  summary: Creates a new SwitchSectionSyntax instance.
  syntax:
    content:
      CSharp: public static SwitchSectionSyntax SwitchSection(SyntaxList<SwitchLabelSyntax> labels, SyntaxList<StatementSyntax> statements)
    parameters:
    - id: labels
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax}
    - id: statements
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}
    return:
      id: SwitchSectionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SwitchSection()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73226
  summary: Creates a new SwitchSectionSyntax instance.
  syntax:
    content:
      CSharp: public static SwitchSectionSyntax SwitchSection()
    parameters: []
    return:
      id: SwitchSectionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CaseSwitchLabel(SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73232
  summary: Creates a new CaseSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static CaseSwitchLabelSyntax CaseSwitchLabel(SyntaxToken keyword, ExpressionSyntax value, SyntaxToken colonToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CaseSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CaseSwitchLabel(ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73247
  summary: Creates a new CaseSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static CaseSwitchLabelSyntax CaseSwitchLabel(ExpressionSyntax value, SyntaxToken colonToken)
    parameters:
    - id: value
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CaseSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultSwitchLabel(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73253
  summary: Creates a new DefaultSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultSwitchLabelSyntax DefaultSwitchLabel(SyntaxToken keyword, SyntaxToken colonToken)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DefaultSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultSwitchLabel(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73266
  summary: Creates a new DefaultSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultSwitchLabelSyntax DefaultSwitchLabel(SyntaxToken colonToken)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DefaultSwitchLabelSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TryStatement(SyntaxToken, BlockSyntax, SyntaxList<CatchClauseSyntax>, FinallyClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73272
  summary: Creates a new TryStatementSyntax instance.
  syntax:
    content:
      CSharp: public static TryStatementSyntax TryStatement(SyntaxToken tryKeyword, BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax @finally)
    parameters:
    - id: tryKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: catches
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
    - id: finally
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax
        name: FinallyClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.yml
    return:
      id: TryStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TryStatement(BlockSyntax, SyntaxList<CatchClauseSyntax>, FinallyClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73287
  summary: Creates a new TryStatementSyntax instance.
  syntax:
    content:
      CSharp: public static TryStatementSyntax TryStatement(BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax @finally)
    parameters:
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: catches
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
    - id: finally
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax
        name: FinallyClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.yml
    return:
      id: TryStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TryStatement(SyntaxList<CatchClauseSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73293
  summary: Creates a new TryStatementSyntax instance.
  syntax:
    content:
      CSharp: public static TryStatementSyntax TryStatement(SyntaxList<CatchClauseSyntax> catches = default (SyntaxList<CatchClauseSyntax>))
    parameters:
    - id: catches
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax}
    return:
      id: TryStatementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchClause(SyntaxToken, CatchDeclarationSyntax, CatchFilterClauseSyntax, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73299
  summary: Creates a new CatchClauseSyntax instance.
  syntax:
    content:
      CSharp: public static CatchClauseSyntax CatchClause(SyntaxToken catchKeyword, CatchDeclarationSyntax declaration, CatchFilterClauseSyntax filter, BlockSyntax block)
    parameters:
    - id: catchKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
        name: CatchDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.yml
    - id: filter
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
        name: CatchFilterClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.yml
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: CatchClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchClause(CatchDeclarationSyntax, CatchFilterClauseSyntax, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73314
  summary: Creates a new CatchClauseSyntax instance.
  syntax:
    content:
      CSharp: public static CatchClauseSyntax CatchClause(CatchDeclarationSyntax declaration, CatchFilterClauseSyntax filter, BlockSyntax block)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
        name: CatchDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.yml
    - id: filter
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
        name: CatchFilterClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.yml
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: CatchClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchClause()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73320
  summary: Creates a new CatchClauseSyntax instance.
  syntax:
    content:
      CSharp: public static CatchClauseSyntax CatchClause()
    parameters: []
    return:
      id: CatchClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchDeclaration(SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73326
  summary: Creates a new CatchDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static CatchDeclarationSyntax CatchDeclaration(SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CatchDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73356
  summary: Creates a new CatchDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static CatchDeclarationSyntax CatchDeclaration(TypeSyntax type, SyntaxToken identifier)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CatchDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchDeclaration(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73362
  summary: Creates a new CatchDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static CatchDeclarationSyntax CatchDeclaration(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: CatchDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchFilterClause(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73368
  summary: Creates a new CatchFilterClauseSyntax instance.
  syntax:
    content:
      CSharp: public static CatchFilterClauseSyntax CatchFilterClause(SyntaxToken whenKeyword, SyntaxToken openParenToken, ExpressionSyntax filterExpression, SyntaxToken closeParenToken)
    parameters:
    - id: whenKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: filterExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CatchFilterClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CatchFilterClause(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73397
  summary: Creates a new CatchFilterClauseSyntax instance.
  syntax:
    content:
      CSharp: public static CatchFilterClauseSyntax CatchFilterClause(ExpressionSyntax filterExpression)
    parameters:
    - id: filterExpression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: CatchFilterClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FinallyClause(SyntaxToken, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73403
  summary: Creates a new FinallyClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FinallyClauseSyntax FinallyClause(SyntaxToken finallyKeyword, BlockSyntax block)
    parameters:
    - id: finallyKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: FinallyClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FinallyClause(BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73418
  summary: Creates a new FinallyClauseSyntax instance.
  syntax:
    content:
      CSharp: public static FinallyClauseSyntax FinallyClause(BlockSyntax block = default (BlockSyntax))
    parameters:
    - id: block
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: FinallyClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CompilationUnit(SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<AttributeListSyntax>, SyntaxList<MemberDeclarationSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73424
  summary: Creates a new CompilationUnitSyntax instance.
  syntax:
    content:
      CSharp: public static CompilationUnitSyntax CompilationUnit(SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<AttributeListSyntax> attributeLists, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken endOfFileToken)
    parameters:
    - id: externs
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
    - id: usings
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: endOfFileToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CompilationUnitSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CompilationUnit(SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<AttributeListSyntax>, SyntaxList<MemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73437
  summary: Creates a new CompilationUnitSyntax instance.
  syntax:
    content:
      CSharp: public static CompilationUnitSyntax CompilationUnit(SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<AttributeListSyntax> attributeLists, SyntaxList<MemberDeclarationSyntax> members)
    parameters:
    - id: externs
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
    - id: usings
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    return:
      id: CompilationUnitSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CompilationUnit()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73443
  summary: Creates a new CompilationUnitSyntax instance.
  syntax:
    content:
      CSharp: public static CompilationUnitSyntax CompilationUnit()
    parameters: []
    return:
      id: CompilationUnitSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExternAliasDirective(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73449
  summary: Creates a new ExternAliasDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static ExternAliasDirectiveSyntax ExternAliasDirective(SyntaxToken externKeyword, SyntaxToken aliasKeyword, SyntaxToken identifier, SyntaxToken semicolonToken)
    parameters:
    - id: externKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: aliasKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ExternAliasDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExternAliasDirective(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73483
  summary: Creates a new ExternAliasDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static ExternAliasDirectiveSyntax ExternAliasDirective(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ExternAliasDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExternAliasDirective(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73489
  summary: Creates a new ExternAliasDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static ExternAliasDirectiveSyntax ExternAliasDirective(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: ExternAliasDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingDirective(SyntaxToken, SyntaxToken, NameEqualsSyntax, NameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73495
  summary: Creates a new UsingDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static UsingDirectiveSyntax UsingDirective(SyntaxToken usingKeyword, SyntaxToken staticKeyword, NameEqualsSyntax alias, NameSyntax name, SyntaxToken semicolonToken)
    parameters:
    - id: usingKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: staticKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: alias
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax
        name: NameEqualsSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.yml
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: UsingDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingDirective(SyntaxToken, NameEqualsSyntax, NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73517
  summary: Creates a new UsingDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static UsingDirectiveSyntax UsingDirective(SyntaxToken staticKeyword, NameEqualsSyntax alias, NameSyntax name)
    parameters:
    - id: staticKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: alias
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax
        name: NameEqualsSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.yml
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: UsingDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingDirective(NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73523
  summary: Creates a new UsingDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static UsingDirectiveSyntax UsingDirective(NameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: UsingDirectiveSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NamespaceDeclaration(SyntaxToken, NameSyntax, SyntaxToken, SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73529
  summary: Creates a new NamespaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static NamespaceDeclarationSyntax NamespaceDeclaration(SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken openBraceToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: namespaceKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: externs
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
    - id: usings
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: NamespaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NamespaceDeclaration(NameSyntax, SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<MemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73566
  summary: Creates a new NamespaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static NamespaceDeclarationSyntax NamespaceDeclaration(NameSyntax name, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: externs
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax}
    - id: usings
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    return:
      id: NamespaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NamespaceDeclaration(NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73572
  summary: Creates a new NamespaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static NamespaceDeclarationSyntax NamespaceDeclaration(NameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: NamespaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeList(SyntaxToken, AttributeTargetSpecifierSyntax, SeparatedSyntaxList<AttributeSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73578
  summary: Creates a new AttributeListSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeListSyntax AttributeList(SyntaxToken openBracketToken, AttributeTargetSpecifierSyntax target, SeparatedSyntaxList<AttributeSyntax> attributes, SyntaxToken closeBracketToken)
    parameters:
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: target
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax
        name: AttributeTargetSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AttributeListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeList(AttributeTargetSpecifierSyntax, SeparatedSyntaxList<AttributeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73598
  summary: Creates a new AttributeListSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeListSyntax AttributeList(AttributeTargetSpecifierSyntax target, SeparatedSyntaxList<AttributeSyntax> attributes)
    parameters:
    - id: target
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax
        name: AttributeTargetSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
    return:
      id: AttributeListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeList(SeparatedSyntaxList<AttributeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73604
  summary: Creates a new AttributeListSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeListSyntax AttributeList(SeparatedSyntaxList<AttributeSyntax> attributes = default (SeparatedSyntaxList<AttributeSyntax>))
    parameters:
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax}
    return:
      id: AttributeListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeTargetSpecifier(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73610
  summary: Creates a new AttributeTargetSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeTargetSpecifierSyntax AttributeTargetSpecifier(SyntaxToken identifier, SyntaxToken colonToken)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AttributeTargetSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeTargetSpecifier(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73623
  summary: Creates a new AttributeTargetSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeTargetSpecifierSyntax AttributeTargetSpecifier(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AttributeTargetSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Attribute(NameSyntax, AttributeArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73629
  summary: Creates a new AttributeSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeSyntax Attribute(NameSyntax name, AttributeArgumentListSyntax argumentList)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax
        name: AttributeArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.yml
    return:
      id: AttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Attribute(NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73637
  summary: Creates a new AttributeSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeSyntax Attribute(NameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: AttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeArgumentList(SyntaxToken, SeparatedSyntaxList<AttributeArgumentSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73643
  summary: Creates a new AttributeArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeArgumentListSyntax AttributeArgumentList(SyntaxToken openParenToken, SeparatedSyntaxList<AttributeArgumentSyntax> arguments, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax}
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AttributeArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeArgumentList(SeparatedSyntaxList<AttributeArgumentSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73663
  summary: Creates a new AttributeArgumentListSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeArgumentListSyntax AttributeArgumentList(SeparatedSyntaxList<AttributeArgumentSyntax> arguments = default (SeparatedSyntaxList<AttributeArgumentSyntax>))
    parameters:
    - id: arguments
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax}
    return:
      id: AttributeArgumentListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeArgument(NameEqualsSyntax, NameColonSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73669
  summary: Creates a new AttributeArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeArgumentSyntax AttributeArgument(NameEqualsSyntax nameEquals, NameColonSyntax nameColon, ExpressionSyntax expression)
    parameters:
    - id: nameEquals
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax
        name: NameEqualsSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.yml
    - id: nameColon
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax
        name: NameColonSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.yml
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AttributeArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AttributeArgument(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73677
  summary: Creates a new AttributeArgumentSyntax instance.
  syntax:
    content:
      CSharp: public static AttributeArgumentSyntax AttributeArgument(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: AttributeArgumentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameEquals(IdentifierNameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73683
  summary: Creates a new NameEqualsSyntax instance.
  syntax:
    content:
      CSharp: public static NameEqualsSyntax NameEquals(IdentifierNameSyntax name, SyntaxToken equalsToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: NameEqualsSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameEquals(IdentifierNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73698
  summary: Creates a new NameEqualsSyntax instance.
  syntax:
    content:
      CSharp: public static NameEqualsSyntax NameEquals(IdentifierNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    return:
      id: NameEqualsSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameEquals(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73704
  summary: Creates a new NameEqualsSyntax instance.
  syntax:
    content:
      CSharp: public static NameEqualsSyntax NameEquals(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: NameEqualsSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterList(SyntaxToken, SeparatedSyntaxList<TypeParameterSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73710
  summary: Creates a new TypeParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterListSyntax TypeParameterList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeParameterSyntax> parameters, SyntaxToken greaterThanToken)
    parameters:
    - id: lessThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax}
    - id: greaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterList(SeparatedSyntaxList<TypeParameterSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73730
  summary: Creates a new TypeParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterListSyntax TypeParameterList(SeparatedSyntaxList<TypeParameterSyntax> parameters = default (SeparatedSyntaxList<TypeParameterSyntax>))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax}
    return:
      id: TypeParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameter(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73736
  summary: Creates a new TypeParameterSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterSyntax TypeParameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken varianceKeyword, SyntaxToken identifier)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: varianceKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameter(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73758
  summary: Creates a new TypeParameterSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterSyntax TypeParameter(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameter(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73764
  summary: Creates a new TypeParameterSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterSyntax TypeParameter(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: TypeParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73770
  summary: Creates a new ClassDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ClassDeclarationSyntax ClassDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ClassDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxList<MemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73812
  summary: Creates a new ClassDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ClassDeclarationSyntax ClassDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    return:
      id: ClassDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73818
  summary: Creates a new ClassDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ClassDeclarationSyntax ClassDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ClassDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73824
  summary: Creates a new ClassDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ClassDeclarationSyntax ClassDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: ClassDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StructDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73830
  summary: Creates a new StructDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static StructDeclarationSyntax StructDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: StructDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StructDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxList<MemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73872
  summary: Creates a new StructDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static StructDeclarationSyntax StructDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    return:
      id: StructDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StructDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73878
  summary: Creates a new StructDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static StructDeclarationSyntax StructDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: StructDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: StructDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73884
  summary: Creates a new StructDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static StructDeclarationSyntax StructDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: StructDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterfaceDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73890
  summary: Creates a new InterfaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static InterfaceDeclarationSyntax InterfaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterfaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterfaceDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxList<MemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73932
  summary: Creates a new InterfaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static InterfaceDeclarationSyntax InterfaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}
    return:
      id: InterfaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterfaceDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73938
  summary: Creates a new InterfaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static InterfaceDeclarationSyntax InterfaceDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: InterfaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: InterfaceDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73944
  summary: Creates a new InterfaceDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static InterfaceDeclarationSyntax InterfaceDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: InterfaceDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, BaseListSyntax, SyntaxToken, SeparatedSyntaxList<EnumMemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73950
  summary: Creates a new EnumDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumDeclarationSyntax EnumDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken enumKeyword, SyntaxToken identifier, BaseListSyntax baseList, SyntaxToken openBraceToken, SeparatedSyntaxList<EnumMemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: enumKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EnumDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, BaseListSyntax, SeparatedSyntaxList<EnumMemberDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73992
  summary: Creates a new EnumDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumDeclarationSyntax EnumDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, BaseListSyntax baseList, SeparatedSyntaxList<EnumMemberDeclarationSyntax> members)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: baseList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax
        name: BaseListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.yml
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax}
    return:
      id: EnumDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 73998
  summary: Creates a new EnumDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumDeclarationSyntax EnumDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EnumDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74004
  summary: Creates a new EnumDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumDeclarationSyntax EnumDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: EnumDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DelegateDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74010
  summary: Creates a new DelegateDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DelegateDeclarationSyntax DelegateDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken delegateKeyword, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: delegateKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DelegateDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DelegateDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74041
  summary: Creates a new DelegateDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DelegateDeclarationSyntax DelegateDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    return:
      id: DelegateDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DelegateDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74047
  summary: Creates a new DelegateDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DelegateDeclarationSyntax DelegateDeclaration(TypeSyntax returnType, SyntaxToken identifier)
    parameters:
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DelegateDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DelegateDeclaration(TypeSyntax, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74053
  summary: Creates a new DelegateDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DelegateDeclarationSyntax DelegateDeclaration(TypeSyntax returnType, string identifier)
    parameters:
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: DelegateDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumMemberDeclaration(SyntaxList<AttributeListSyntax>, SyntaxToken, EqualsValueClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74059
  summary: Creates a new EnumMemberDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumMemberDeclarationSyntax EnumMemberDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, EqualsValueClauseSyntax equalsValue)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: equalsValue
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
        name: EqualsValueClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.yml
    return:
      id: EnumMemberDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumMemberDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74072
  summary: Creates a new EnumMemberDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumMemberDeclarationSyntax EnumMemberDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EnumMemberDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EnumMemberDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74078
  summary: Creates a new EnumMemberDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EnumMemberDeclarationSyntax EnumMemberDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: EnumMemberDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BaseList(SyntaxToken, SeparatedSyntaxList<BaseTypeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74084
  summary: Creates a new BaseListSyntax instance.
  syntax:
    content:
      CSharp: public static BaseListSyntax BaseList(SyntaxToken colonToken, SeparatedSyntaxList<BaseTypeSyntax> types)
    parameters:
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: types
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BaseList(SeparatedSyntaxList<BaseTypeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74097
  summary: Creates a new BaseListSyntax instance.
  syntax:
    content:
      CSharp: public static BaseListSyntax BaseList(SeparatedSyntaxList<BaseTypeSyntax> types = default (SeparatedSyntaxList<BaseTypeSyntax>))
    parameters:
    - id: types
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax}
    return:
      id: BaseListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SimpleBaseType(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74103
  summary: Creates a new SimpleBaseTypeSyntax instance.
  syntax:
    content:
      CSharp: public static SimpleBaseTypeSyntax SimpleBaseType(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: SimpleBaseTypeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterConstraintClause(SyntaxToken, IdentifierNameSyntax, SyntaxToken, SeparatedSyntaxList<TypeParameterConstraintSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74111
  summary: Creates a new TypeParameterConstraintClauseSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(SyntaxToken whereKeyword, IdentifierNameSyntax name, SyntaxToken colonToken, SeparatedSyntaxList<TypeParameterConstraintSyntax> constraints)
    parameters:
    - id: whereKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: constraints
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax}
    return:
      id: TypeParameterConstraintClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterConstraintClause(IdentifierNameSyntax, SeparatedSyntaxList<TypeParameterConstraintSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74133
  summary: Creates a new TypeParameterConstraintClauseSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(IdentifierNameSyntax name, SeparatedSyntaxList<TypeParameterConstraintSyntax> constraints)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: constraints
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax}
    return:
      id: TypeParameterConstraintClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterConstraintClause(IdentifierNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74139
  summary: Creates a new TypeParameterConstraintClauseSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(IdentifierNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    return:
      id: TypeParameterConstraintClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeParameterConstraintClause(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74145
  summary: Creates a new TypeParameterConstraintClauseSyntax instance.
  syntax:
    content:
      CSharp: public static TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: TypeParameterConstraintClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorConstraint(SyntaxToken, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74151
  summary: Creates a new ConstructorConstraintSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorConstraintSyntax ConstructorConstraint(SyntaxToken newKeyword, SyntaxToken openParenToken, SyntaxToken closeParenToken)
    parameters:
    - id: newKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConstructorConstraintSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorConstraint()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74178
  summary: Creates a new ConstructorConstraintSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorConstraintSyntax ConstructorConstraint()
    parameters: []
    return:
      id: ConstructorConstraintSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassOrStructConstraint(SyntaxKind, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74184
  summary: Creates a new ClassOrStructConstraintSyntax instance.
  syntax:
    content:
      CSharp: public static ClassOrStructConstraintSyntax ClassOrStructConstraint(SyntaxKind kind, SyntaxToken classOrStructKeyword)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: classOrStructKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ClassOrStructConstraintSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ClassOrStructConstraint(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74206
  summary: Creates a new ClassOrStructConstraintSyntax instance.
  syntax:
    content:
      CSharp: public static ClassOrStructConstraintSyntax ClassOrStructConstraint(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: ClassOrStructConstraintSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeConstraint(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74225
  summary: Creates a new TypeConstraintSyntax instance.
  syntax:
    content:
      CSharp: public static TypeConstraintSyntax TypeConstraint(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: TypeConstraintSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FieldDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, VariableDeclarationSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74233
  summary: Creates a new FieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static FieldDeclarationSyntax FieldDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: FieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FieldDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74248
  summary: Creates a new FieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static FieldDeclarationSyntax FieldDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: FieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: FieldDeclaration(VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74254
  summary: Creates a new FieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static FieldDeclarationSyntax FieldDeclaration(VariableDeclarationSyntax declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: FieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventFieldDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, VariableDeclarationSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74260
  summary: Creates a new EventFieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventFieldDeclarationSyntax EventFieldDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, VariableDeclarationSyntax declaration, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: eventKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EventFieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventFieldDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74282
  summary: Creates a new EventFieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventFieldDeclarationSyntax EventFieldDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: EventFieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventFieldDeclaration(VariableDeclarationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74288
  summary: Creates a new EventFieldDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventFieldDeclarationSyntax EventFieldDeclaration(VariableDeclarationSyntax declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
        name: VariableDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.yml
    return:
      id: EventFieldDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExplicitInterfaceSpecifier(NameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74294
  summary: Creates a new ExplicitInterfaceSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier(NameSyntax name, SyntaxToken dotToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    - id: dotToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ExplicitInterfaceSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ExplicitInterfaceSpecifier(NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74309
  summary: Creates a new ExplicitInterfaceSpecifierSyntax instance.
  syntax:
    content:
      CSharp: public static ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier(NameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: ExplicitInterfaceSpecifierSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, BlockSyntax, ArrowExpressionClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74315
  summary: Creates a new MethodDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: MethodDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, BlockSyntax, ArrowExpressionClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74340
  summary: Creates a new MethodDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax
        name: TypeParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax}
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    return:
      id: MethodDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74346
  summary: Creates a new MethodDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(TypeSyntax returnType, SyntaxToken identifier)
    parameters:
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: MethodDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(TypeSyntax, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74352
  summary: Creates a new MethodDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(TypeSyntax returnType, string identifier)
    parameters:
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: MethodDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, SyntaxToken, ParameterListSyntax, BlockSyntax, ArrowExpressionClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74358
  summary: Creates a new OperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, ParameterListSyntax, BlockSyntax, ArrowExpressionClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74411
  summary: Creates a new OperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    return:
      id: OperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74417
  summary: Creates a new OperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorDeclarationSyntax OperatorDeclaration(TypeSyntax returnType, SyntaxToken operatorToken)
    parameters:
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeSyntax, ParameterListSyntax, BlockSyntax, ArrowExpressionClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74423
  summary: Creates a new ConversionOperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeSyntax, ParameterListSyntax, BlockSyntax, ArrowExpressionClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74456
  summary: Creates a new ConversionOperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax body, ArrowExpressionClauseSyntax expressionBody)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorDeclaration(SyntaxToken, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74462
  summary: Creates a new ConversionOperatorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxToken implicitOrExplicitKeyword, TypeSyntax type)
    parameters:
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: ConversionOperatorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, ConstructorInitializerSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74468
  summary: Creates a new ConstructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorDeclarationSyntax ConstructorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, ParameterListSyntax parameterList, ConstructorInitializerSyntax initializer, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
        name: ConstructorInitializerSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConstructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, ConstructorInitializerSyntax, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74491
  summary: Creates a new ConstructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorDeclarationSyntax ConstructorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, ParameterListSyntax parameterList, ConstructorInitializerSyntax initializer, BlockSyntax body)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
        name: ConstructorInitializerSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: ConstructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74497
  summary: Creates a new ConstructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorDeclarationSyntax ConstructorDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConstructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74503
  summary: Creates a new ConstructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorDeclarationSyntax ConstructorDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: ConstructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorInitializer(SyntaxKind, SyntaxToken, SyntaxToken, ArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74509
  summary: Creates a new ConstructorInitializerSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorInitializerSyntax ConstructorInitializer(SyntaxKind kind, SyntaxToken colonToken, SyntaxToken thisOrBaseKeyword, ArgumentListSyntax argumentList)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: thisOrBaseKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
        name: ArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.yml
    return:
      id: ConstructorInitializerSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConstructorInitializer(SyntaxKind, ArgumentListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74540
  summary: Creates a new ConstructorInitializerSyntax instance.
  syntax:
    content:
      CSharp: public static ConstructorInitializerSyntax ConstructorInitializer(SyntaxKind kind, ArgumentListSyntax argumentList = default (ArgumentListSyntax))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: argumentList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
        name: ArgumentListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.yml
    return:
      id: ConstructorInitializerSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DestructorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74559
  summary: Creates a new DestructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DestructorDeclarationSyntax DestructorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken tildeToken, SyntaxToken identifier, ParameterListSyntax parameterList, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: tildeToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DestructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DestructorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74589
  summary: Creates a new DestructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DestructorDeclarationSyntax DestructorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, ParameterListSyntax parameterList, BlockSyntax body)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: DestructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DestructorDeclaration(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74595
  summary: Creates a new DestructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DestructorDeclarationSyntax DestructorDeclaration(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DestructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DestructorDeclaration(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74601
  summary: Creates a new DestructorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static DestructorDeclarationSyntax DestructorDeclaration(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: DestructorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax, ArrowExpressionClauseSyntax, EqualsValueClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74607
  summary: Creates a new PropertyDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList, ArrowExpressionClauseSyntax expressionBody, EqualsValueClauseSyntax initializer, SyntaxToken semicolon)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
        name: EqualsValueClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.yml
    - id: semicolon
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: PropertyDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax, ArrowExpressionClauseSyntax, EqualsValueClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74630
  summary: Creates a new PropertyDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList, ArrowExpressionClauseSyntax expressionBody, EqualsValueClauseSyntax initializer)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
        name: EqualsValueClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.yml
    return:
      id: PropertyDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74636
  summary: Creates a new PropertyDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(TypeSyntax type, SyntaxToken identifier)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: PropertyDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(TypeSyntax, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74642
  summary: Creates a new PropertyDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(TypeSyntax type, string identifier)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: PropertyDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrowExpressionClause(SyntaxToken, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74648
  summary: Creates a new ArrowExpressionClauseSyntax instance.
  syntax:
    content:
      CSharp: public static ArrowExpressionClauseSyntax ArrowExpressionClause(SyntaxToken arrowToken, ExpressionSyntax expression)
    parameters:
    - id: arrowToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ArrowExpressionClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ArrowExpressionClause(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74663
  summary: Creates a new ArrowExpressionClauseSyntax instance.
  syntax:
    content:
      CSharp: public static ArrowExpressionClauseSyntax ArrowExpressionClause(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: ArrowExpressionClauseSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74669
  summary: Creates a new EventDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventDeclarationSyntax EventDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: eventKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    return:
      id: EventDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74693
  summary: Creates a new EventDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventDeclarationSyntax EventDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    return:
      id: EventDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventDeclaration(TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74699
  summary: Creates a new EventDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventDeclarationSyntax EventDeclaration(TypeSyntax type, SyntaxToken identifier)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: EventDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EventDeclaration(TypeSyntax, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74705
  summary: Creates a new EventDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static EventDeclarationSyntax EventDeclaration(TypeSyntax type, string identifier)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: EventDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, BracketedParameterListSyntax, AccessorListSyntax, ArrowExpressionClauseSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74711
  summary: Creates a new IndexerDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static IndexerDeclarationSyntax IndexerDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken thisKeyword, BracketedParameterListSyntax parameterList, AccessorListSyntax accessorList, ArrowExpressionClauseSyntax expressionBody, SyntaxToken semicolon)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: thisKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax
        name: BracketedParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.yml
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    - id: semicolon
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: IndexerDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, BracketedParameterListSyntax, AccessorListSyntax, ArrowExpressionClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74736
  summary: Creates a new IndexerDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static IndexerDeclarationSyntax IndexerDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, BracketedParameterListSyntax parameterList, AccessorListSyntax accessorList, ArrowExpressionClauseSyntax expressionBody)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax
        name: BracketedParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.yml
    - id: accessorList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax
        name: AccessorListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.yml
    - id: expressionBody
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
        name: ArrowExpressionClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.yml
    return:
      id: IndexerDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerDeclaration(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74742
  summary: Creates a new IndexerDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static IndexerDeclarationSyntax IndexerDeclaration(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: IndexerDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AccessorList(SyntaxToken, SyntaxList<AccessorDeclarationSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74748
  summary: Creates a new AccessorListSyntax instance.
  syntax:
    content:
      CSharp: public static AccessorListSyntax AccessorList(SyntaxToken openBraceToken, SyntaxList<AccessorDeclarationSyntax> accessors, SyntaxToken closeBraceToken)
    parameters:
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessors
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AccessorListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AccessorList(SyntaxList<AccessorDeclarationSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74768
  summary: Creates a new AccessorListSyntax instance.
  syntax:
    content:
      CSharp: public static AccessorListSyntax AccessorList(SyntaxList<AccessorDeclarationSyntax> accessors = default (SyntaxList<AccessorDeclarationSyntax>))
    parameters:
    - id: accessors
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax}
    return:
      id: AccessorListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AccessorDeclaration(SyntaxKind, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74774
  summary: Creates a new AccessorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static AccessorDeclarationSyntax AccessorDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: AccessorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AccessorDeclaration(SyntaxKind, SyntaxList<AttributeListSyntax>, SyntaxTokenList, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74810
  summary: Creates a new AccessorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static AccessorDeclarationSyntax AccessorDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, BlockSyntax body)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: AccessorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AccessorDeclaration(SyntaxKind, BlockSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74816
  summary: Creates a new AccessorDeclarationSyntax instance.
  syntax:
    content:
      CSharp: public static AccessorDeclarationSyntax AccessorDeclaration(SyntaxKind kind, BlockSyntax body = default (BlockSyntax))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: body
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
        name: BlockSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.yml
    return:
      id: AccessorDeclarationSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParameterList(SyntaxToken, SeparatedSyntaxList<ParameterSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74841
  summary: Creates a new ParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static ParameterListSyntax ParameterList(SyntaxToken openParenToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParameterList(SeparatedSyntaxList<ParameterSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74861
  summary: Creates a new ParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static ParameterListSyntax ParameterList(SeparatedSyntaxList<ParameterSyntax> parameters = default (SeparatedSyntaxList<ParameterSyntax>))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
    return:
      id: ParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BracketedParameterList(SyntaxToken, SeparatedSyntaxList<ParameterSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74867
  summary: Creates a new BracketedParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static BracketedParameterListSyntax BracketedParameterList(SyntaxToken openBracketToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeBracketToken)
    parameters:
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: BracketedParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BracketedParameterList(SeparatedSyntaxList<ParameterSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74887
  summary: Creates a new BracketedParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static BracketedParameterListSyntax BracketedParameterList(SeparatedSyntaxList<ParameterSyntax> parameters = default (SeparatedSyntaxList<ParameterSyntax>))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax}
    return:
      id: BracketedParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Parameter(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, EqualsValueClauseSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74893
  summary: Creates a new ParameterSyntax instance.
  syntax:
    content:
      CSharp: public static ParameterSyntax Parameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, SyntaxToken identifier, EqualsValueClauseSyntax @default)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: default
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
        name: EqualsValueClauseSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.yml
    return:
      id: ParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Parameter(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74907
  summary: Creates a new ParameterSyntax instance.
  syntax:
    content:
      CSharp: public static ParameterSyntax Parameter(SyntaxToken identifier)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IncompleteMember(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74913
  summary: Creates a new IncompleteMemberSyntax instance.
  syntax:
    content:
      CSharp: public static IncompleteMemberSyntax IncompleteMember(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: IncompleteMemberSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IncompleteMember(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74919
  summary: Creates a new IncompleteMemberSyntax instance.
  syntax:
    content:
      CSharp: public static IncompleteMemberSyntax IncompleteMember(TypeSyntax type = default (TypeSyntax))
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: IncompleteMemberSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SkippedTokensTrivia(SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74925
  summary: Creates a new SkippedTokensTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static SkippedTokensTriviaSyntax SkippedTokensTrivia(SyntaxTokenList tokens)
    parameters:
    - id: tokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: SkippedTokensTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SkippedTokensTrivia()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74931
  summary: Creates a new SkippedTokensTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static SkippedTokensTriviaSyntax SkippedTokensTrivia()
    parameters: []
    return:
      id: SkippedTokensTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DocumentationCommentTrivia(SyntaxKind, SyntaxList<XmlNodeSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74937
  summary: Creates a new DocumentationCommentTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static DocumentationCommentTriviaSyntax DocumentationCommentTrivia(SyntaxKind kind, SyntaxList<XmlNodeSyntax> content, SyntaxToken endOfComment)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: content
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
    - id: endOfComment
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: DocumentationCommentTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DocumentationCommentTrivia(SyntaxKind, SyntaxList<XmlNodeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74958
  summary: Creates a new DocumentationCommentTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static DocumentationCommentTriviaSyntax DocumentationCommentTrivia(SyntaxKind kind, SyntaxList<XmlNodeSyntax> content = default (SyntaxList<XmlNodeSyntax>))
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: content
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
    return:
      id: DocumentationCommentTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeCref(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74964
  summary: Creates a new TypeCrefSyntax instance.
  syntax:
    content:
      CSharp: public static TypeCrefSyntax TypeCref(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: TypeCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QualifiedCref(TypeSyntax, SyntaxToken, MemberCrefSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74972
  summary: Creates a new QualifiedCrefSyntax instance.
  syntax:
    content:
      CSharp: public static QualifiedCrefSyntax QualifiedCref(TypeSyntax container, SyntaxToken dotToken, MemberCrefSyntax member)
    parameters:
    - id: container
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: dotToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: member
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax
        name: MemberCrefSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax.yml
    return:
      id: QualifiedCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: QualifiedCref(TypeSyntax, MemberCrefSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74989
  summary: Creates a new QualifiedCrefSyntax instance.
  syntax:
    content:
      CSharp: public static QualifiedCrefSyntax QualifiedCref(TypeSyntax container, MemberCrefSyntax member)
    parameters:
    - id: container
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: member
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax
        name: MemberCrefSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax.yml
    return:
      id: QualifiedCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameMemberCref(TypeSyntax, CrefParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 74995
  summary: Creates a new NameMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static NameMemberCrefSyntax NameMemberCref(TypeSyntax name, CrefParameterListSyntax parameters)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax
        name: CrefParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.yml
    return:
      id: NameMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NameMemberCref(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75003
  summary: Creates a new NameMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static NameMemberCrefSyntax NameMemberCref(TypeSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: NameMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerMemberCref(SyntaxToken, CrefBracketedParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75009
  summary: Creates a new IndexerMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static IndexerMemberCrefSyntax IndexerMemberCref(SyntaxToken thisKeyword, CrefBracketedParameterListSyntax parameters)
    parameters:
    - id: thisKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax
        name: CrefBracketedParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.yml
    return:
      id: IndexerMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerMemberCref(CrefBracketedParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75022
  summary: Creates a new IndexerMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static IndexerMemberCrefSyntax IndexerMemberCref(CrefBracketedParameterListSyntax parameters = default (CrefBracketedParameterListSyntax))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax
        name: CrefBracketedParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.yml
    return:
      id: IndexerMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorMemberCref(SyntaxToken, SyntaxToken, CrefParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75028
  summary: Creates a new OperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorKeyword, SyntaxToken operatorToken, CrefParameterListSyntax parameters)
    parameters:
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax
        name: CrefParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.yml
    return:
      id: OperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorMemberCref(SyntaxToken, CrefParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75069
  summary: Creates a new OperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorToken, CrefParameterListSyntax parameters)
    parameters:
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax
        name: CrefParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.yml
    return:
      id: OperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorMemberCref(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75075
  summary: Creates a new OperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorToken)
    parameters:
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorMemberCref(SyntaxToken, SyntaxToken, TypeSyntax, CrefParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75081
  summary: Creates a new ConversionOperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeSyntax type, CrefParameterListSyntax parameters)
    parameters:
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax
        name: CrefParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.yml
    return:
      id: ConversionOperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorMemberCref(SyntaxToken, TypeSyntax, CrefParameterListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75104
  summary: Creates a new ConversionOperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, TypeSyntax type, CrefParameterListSyntax parameters)
    parameters:
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax
        name: CrefParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.yml
    return:
      id: ConversionOperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorMemberCref(SyntaxToken, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75110
  summary: Creates a new ConversionOperatorMemberCrefSyntax instance.
  syntax:
    content:
      CSharp: public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, TypeSyntax type)
    parameters:
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: ConversionOperatorMemberCrefSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefParameterList(SyntaxToken, SeparatedSyntaxList<CrefParameterSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75116
  summary: Creates a new CrefParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static CrefParameterListSyntax CrefParameterList(SyntaxToken openParenToken, SeparatedSyntaxList<CrefParameterSyntax> parameters, SyntaxToken closeParenToken)
    parameters:
    - id: openParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
    - id: closeParenToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CrefParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefParameterList(SeparatedSyntaxList<CrefParameterSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75136
  summary: Creates a new CrefParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static CrefParameterListSyntax CrefParameterList(SeparatedSyntaxList<CrefParameterSyntax> parameters = default (SeparatedSyntaxList<CrefParameterSyntax>))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
    return:
      id: CrefParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefBracketedParameterList(SyntaxToken, SeparatedSyntaxList<CrefParameterSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75142
  summary: Creates a new CrefBracketedParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static CrefBracketedParameterListSyntax CrefBracketedParameterList(SyntaxToken openBracketToken, SeparatedSyntaxList<CrefParameterSyntax> parameters, SyntaxToken closeBracketToken)
    parameters:
    - id: openBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
    - id: closeBracketToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: CrefBracketedParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefBracketedParameterList(SeparatedSyntaxList<CrefParameterSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75162
  summary: Creates a new CrefBracketedParameterListSyntax instance.
  syntax:
    content:
      CSharp: public static CrefBracketedParameterListSyntax CrefBracketedParameterList(SeparatedSyntaxList<CrefParameterSyntax> parameters = default (SeparatedSyntaxList<CrefParameterSyntax>))
    parameters:
    - id: parameters
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax}
    return:
      id: CrefBracketedParameterListSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefParameter(SyntaxToken, TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75168
  summary: Creates a new CrefParameterSyntax instance.
  syntax:
    content:
      CSharp: public static CrefParameterSyntax CrefParameter(SyntaxToken refOrOutKeyword, TypeSyntax type)
    parameters:
    - id: refOrOutKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: CrefParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CrefParameter(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75185
  summary: Creates a new CrefParameterSyntax instance.
  syntax:
    content:
      CSharp: public static CrefParameterSyntax CrefParameter(TypeSyntax type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    return:
      id: CrefParameterSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElement(XmlElementStartTagSyntax, SyntaxList<XmlNodeSyntax>, XmlElementEndTagSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax>, Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75191
  summary: Creates a new XmlElementSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementSyntax XmlElement(XmlElementStartTagSyntax startTag, SyntaxList<XmlNodeSyntax> content, XmlElementEndTagSyntax endTag)
    parameters:
    - id: startTag
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax
        name: XmlElementStartTagSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.yml
    - id: content
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax}
    - id: endTag
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax
        name: XmlElementEndTagSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.yml
    return:
      id: XmlElementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElement(XmlElementStartTagSyntax, XmlElementEndTagSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75201
  summary: Creates a new XmlElementSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementSyntax XmlElement(XmlElementStartTagSyntax startTag, XmlElementEndTagSyntax endTag)
    parameters:
    - id: startTag
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax
        name: XmlElementStartTagSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.yml
    - id: endTag
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax
        name: XmlElementEndTagSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.yml
    return:
      id: XmlElementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElementStartTag(SyntaxToken, XmlNameSyntax, SyntaxList<XmlAttributeSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75207
  summary: Creates a new XmlElementStartTagSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementStartTagSyntax XmlElementStartTag(SyntaxToken lessThanToken, XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes, SyntaxToken greaterThanToken)
    parameters:
    - id: lessThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
    - id: greaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlElementStartTagSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElementStartTag(XmlNameSyntax, SyntaxList<XmlAttributeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75229
  summary: Creates a new XmlElementStartTagSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementStartTagSyntax XmlElementStartTag(XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
    return:
      id: XmlElementStartTagSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElementStartTag(XmlNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75235
  summary: Creates a new XmlElementStartTagSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementStartTagSyntax XmlElementStartTag(XmlNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    return:
      id: XmlElementStartTagSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElementEndTag(SyntaxToken, XmlNameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75241
  summary: Creates a new XmlElementEndTagSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementEndTagSyntax XmlElementEndTag(SyntaxToken lessThanSlashToken, XmlNameSyntax name, SyntaxToken greaterThanToken)
    parameters:
    - id: lessThanSlashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: greaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlElementEndTagSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlElementEndTag(XmlNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75263
  summary: Creates a new XmlElementEndTagSyntax instance.
  syntax:
    content:
      CSharp: public static XmlElementEndTagSyntax XmlElementEndTag(XmlNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    return:
      id: XmlElementEndTagSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlEmptyElement(SyntaxToken, XmlNameSyntax, SyntaxList<XmlAttributeSyntax>, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax>, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75269
  summary: Creates a new XmlEmptyElementSyntax instance.
  syntax:
    content:
      CSharp: public static XmlEmptyElementSyntax XmlEmptyElement(SyntaxToken lessThanToken, XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes, SyntaxToken slashGreaterThanToken)
    parameters:
    - id: lessThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
    - id: slashGreaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlEmptyElementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlEmptyElement(XmlNameSyntax, SyntaxList<XmlAttributeSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75291
  summary: Creates a new XmlEmptyElementSyntax instance.
  syntax:
    content:
      CSharp: public static XmlEmptyElementSyntax XmlEmptyElement(XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax}
    return:
      id: XmlEmptyElementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlEmptyElement(XmlNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75297
  summary: Creates a new XmlEmptyElementSyntax instance.
  syntax:
    content:
      CSharp: public static XmlEmptyElementSyntax XmlEmptyElement(XmlNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    return:
      id: XmlEmptyElementSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlName(XmlPrefixSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75303
  summary: Creates a new XmlNameSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameSyntax XmlName(XmlPrefixSyntax prefix, SyntaxToken localName)
    parameters:
    - id: prefix
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax
        name: XmlPrefixSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.yml
    - id: localName
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlName(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75316
  summary: Creates a new XmlNameSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameSyntax XmlName(SyntaxToken localName)
    parameters:
    - id: localName
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlName(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75322
  summary: Creates a new XmlNameSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameSyntax XmlName(string localName)
    parameters:
    - id: localName
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: XmlNameSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlPrefix(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75328
  summary: Creates a new XmlPrefixSyntax instance.
  syntax:
    content:
      CSharp: public static XmlPrefixSyntax XmlPrefix(SyntaxToken prefix, SyntaxToken colonToken)
    parameters:
    - id: prefix
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: colonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlPrefixSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlPrefix(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75348
  summary: Creates a new XmlPrefixSyntax instance.
  syntax:
    content:
      CSharp: public static XmlPrefixSyntax XmlPrefix(SyntaxToken prefix)
    parameters:
    - id: prefix
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlPrefixSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlPrefix(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75354
  summary: Creates a new XmlPrefixSyntax instance.
  syntax:
    content:
      CSharp: public static XmlPrefixSyntax XmlPrefix(string prefix)
    parameters:
    - id: prefix
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: XmlPrefixSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextAttribute(XmlNameSyntax, SyntaxToken, SyntaxToken, SyntaxTokenList, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75360
  summary: Creates a new XmlTextAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, SyntaxTokenList textTokens, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlTextAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextAttribute(XmlNameSyntax, SyntaxToken, SyntaxTokenList, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75391
  summary: Creates a new XmlTextAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, SyntaxTokenList textTokens, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlTextAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextAttribute(XmlNameSyntax, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75397
  summary: Creates a new XmlTextAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlTextAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlCrefAttribute(XmlNameSyntax, SyntaxToken, SyntaxToken, CrefSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75403
  summary: Creates a new XmlCrefAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCrefAttributeSyntax XmlCrefAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, CrefSyntax cref, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: cref
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
        name: CrefSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax.yml
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlCrefAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlCrefAttribute(XmlNameSyntax, SyntaxToken, CrefSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75436
  summary: Creates a new XmlCrefAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCrefAttributeSyntax XmlCrefAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, CrefSyntax cref, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: cref
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
        name: CrefSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax.yml
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlCrefAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlNameAttribute(XmlNameSyntax, SyntaxToken, SyntaxToken, IdentifierNameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75442
  summary: Creates a new XmlNameAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameAttributeSyntax XmlNameAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, IdentifierNameSyntax identifier, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: equalsToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlNameAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlNameAttribute(XmlNameSyntax, SyntaxToken, IdentifierNameSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75475
  summary: Creates a new XmlNameAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameAttributeSyntax XmlNameAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, IdentifierNameSyntax identifier, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
        name: IdentifierNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.yml
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlNameAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlNameAttribute(XmlNameSyntax, SyntaxToken, string, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxToken, string, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75481
  summary: Creates a new XmlNameAttributeSyntax instance.
  syntax:
    content:
      CSharp: public static XmlNameAttributeSyntax XmlNameAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, string identifier, SyntaxToken endQuoteToken)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: startQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: endQuoteToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlNameAttributeSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlText(SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75487
  summary: Creates a new XmlTextSyntax instance.
  syntax:
    content:
      CSharp: public static XmlTextSyntax XmlText(SyntaxTokenList textTokens)
    parameters:
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: XmlTextSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlText()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75493
  summary: Creates a new XmlTextSyntax instance.
  syntax:
    content:
      CSharp: public static XmlTextSyntax XmlText()
    parameters: []
    return:
      id: XmlTextSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlCDataSection(SyntaxToken, SyntaxTokenList, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75499
  summary: Creates a new XmlCDataSectionSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCDataSectionSyntax XmlCDataSection(SyntaxToken startCDataToken, SyntaxTokenList textTokens, SyntaxToken endCDataToken)
    parameters:
    - id: startCDataToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: endCDataToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlCDataSectionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlCDataSection(SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75519
  summary: Creates a new XmlCDataSectionSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCDataSectionSyntax XmlCDataSection(SyntaxTokenList textTokens = default (SyntaxTokenList))
    parameters:
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: XmlCDataSectionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlProcessingInstruction(SyntaxToken, XmlNameSyntax, SyntaxTokenList, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75525
  summary: Creates a new XmlProcessingInstructionSyntax instance.
  syntax:
    content:
      CSharp: public static XmlProcessingInstructionSyntax XmlProcessingInstruction(SyntaxToken startProcessingInstructionToken, XmlNameSyntax name, SyntaxTokenList textTokens, SyntaxToken endProcessingInstructionToken)
    parameters:
    - id: startProcessingInstructionToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: endProcessingInstructionToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlProcessingInstructionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlProcessingInstruction(XmlNameSyntax, SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax, Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75547
  summary: Creates a new XmlProcessingInstructionSyntax instance.
  syntax:
    content:
      CSharp: public static XmlProcessingInstructionSyntax XmlProcessingInstruction(XmlNameSyntax name, SyntaxTokenList textTokens)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: XmlProcessingInstructionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlProcessingInstruction(XmlNameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75553
  summary: Creates a new XmlProcessingInstructionSyntax instance.
  syntax:
    content:
      CSharp: public static XmlProcessingInstructionSyntax XmlProcessingInstruction(XmlNameSyntax name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax
        name: XmlNameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.yml
    return:
      id: XmlProcessingInstructionSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlComment(SyntaxToken, SyntaxTokenList, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75559
  summary: Creates a new XmlCommentSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCommentSyntax XmlComment(SyntaxToken lessThanExclamationMinusMinusToken, SyntaxTokenList textTokens, SyntaxToken minusMinusGreaterThanToken)
    parameters:
    - id: lessThanExclamationMinusMinusToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: minusMinusGreaterThanToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: XmlCommentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlComment(SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75579
  summary: Creates a new XmlCommentSyntax instance.
  syntax:
    content:
      CSharp: public static XmlCommentSyntax XmlComment(SyntaxTokenList textTokens = default (SyntaxTokenList))
    parameters:
    - id: textTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    return:
      id: XmlCommentSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IfDirectiveTrivia(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, bool, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, bool, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75585
  summary: Creates a new IfDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static IfDirectiveTriviaSyntax IfDirectiveTrivia(SyntaxToken hashToken, SyntaxToken ifKeyword, ExpressionSyntax condition, SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: ifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: IfDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IfDirectiveTrivia(ExpressionSyntax, bool, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, bool, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75614
  summary: Creates a new IfDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static IfDirectiveTriviaSyntax IfDirectiveTrivia(ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: IfDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElifDirectiveTrivia(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, bool, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.SyntaxToken, bool, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75620
  summary: Creates a new ElifDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ElifDirectiveTriviaSyntax ElifDirectiveTrivia(SyntaxToken hashToken, SyntaxToken elifKeyword, ExpressionSyntax condition, SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: elifKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElifDirectiveTrivia(ExpressionSyntax, bool, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, bool, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75649
  summary: Creates a new ElifDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ElifDirectiveTriviaSyntax ElifDirectiveTrivia(ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: conditionValue
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElifDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElseDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75655
  summary: Creates a new ElseDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ElseDirectiveTriviaSyntax ElseDirectiveTrivia(SyntaxToken hashToken, SyntaxToken elseKeyword, SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: elseKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElseDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElseDirectiveTrivia(bool, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(bool, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75682
  summary: Creates a new ElseDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ElseDirectiveTriviaSyntax ElseDirectiveTrivia(bool isActive, bool branchTaken)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    - id: branchTaken
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ElseDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndIfDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75688
  summary: Creates a new EndIfDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(SyntaxToken hashToken, SyntaxToken endIfKeyword, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endIfKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: EndIfDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndIfDirectiveTrivia(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75715
  summary: Creates a new EndIfDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: EndIfDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RegionDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75721
  summary: Creates a new RegionDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static RegionDirectiveTriviaSyntax RegionDirectiveTrivia(SyntaxToken hashToken, SyntaxToken regionKeyword, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: regionKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: RegionDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: RegionDirectiveTrivia(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75748
  summary: Creates a new RegionDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static RegionDirectiveTriviaSyntax RegionDirectiveTrivia(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: RegionDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndRegionDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75754
  summary: Creates a new EndRegionDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(SyntaxToken hashToken, SyntaxToken endRegionKeyword, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endRegionKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: EndRegionDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndRegionDirectiveTrivia(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75781
  summary: Creates a new EndRegionDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: EndRegionDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ErrorDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75787
  summary: Creates a new ErrorDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia(SyntaxToken hashToken, SyntaxToken errorKeyword, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: errorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ErrorDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ErrorDirectiveTrivia(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75814
  summary: Creates a new ErrorDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ErrorDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WarningDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75820
  summary: Creates a new WarningDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static WarningDirectiveTriviaSyntax WarningDirectiveTrivia(SyntaxToken hashToken, SyntaxToken warningKeyword, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: warningKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: WarningDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: WarningDirectiveTrivia(bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75847
  summary: Creates a new WarningDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static WarningDirectiveTriviaSyntax WarningDirectiveTrivia(bool isActive)
    parameters:
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: WarningDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BadDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75853
  summary: Creates a new BadDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static BadDirectiveTriviaSyntax BadDirectiveTrivia(SyntaxToken hashToken, SyntaxToken identifier, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: BadDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BadDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75873
  summary: Creates a new BadDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static BadDirectiveTriviaSyntax BadDirectiveTrivia(SyntaxToken identifier, bool isActive)
    parameters:
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: BadDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefineDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75879
  summary: Creates a new DefineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static DefineDirectiveTriviaSyntax DefineDirectiveTrivia(SyntaxToken hashToken, SyntaxToken defineKeyword, SyntaxToken name, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: defineKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: DefineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefineDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75913
  summary: Creates a new DefineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static DefineDirectiveTriviaSyntax DefineDirectiveTrivia(SyntaxToken name, bool isActive)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: DefineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefineDirectiveTrivia(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75919
  summary: Creates a new DefineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static DefineDirectiveTriviaSyntax DefineDirectiveTrivia(string name, bool isActive)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: DefineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UndefDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75925
  summary: Creates a new UndefDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static UndefDirectiveTriviaSyntax UndefDirectiveTrivia(SyntaxToken hashToken, SyntaxToken undefKeyword, SyntaxToken name, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: undefKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: UndefDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UndefDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75959
  summary: Creates a new UndefDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static UndefDirectiveTriviaSyntax UndefDirectiveTrivia(SyntaxToken name, bool isActive)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: UndefDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UndefDirectiveTrivia(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75965
  summary: Creates a new UndefDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static UndefDirectiveTriviaSyntax UndefDirectiveTrivia(string name, bool isActive)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: UndefDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LineDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 75971
  summary: Creates a new LineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static LineDirectiveTriviaSyntax LineDirectiveTrivia(SyntaxToken hashToken, SyntaxToken lineKeyword, SyntaxToken line, SyntaxToken file, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: lineKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: line
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: LineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LineDirectiveTrivia(SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76015
  summary: Creates a new LineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static LineDirectiveTriviaSyntax LineDirectiveTrivia(SyntaxToken line, SyntaxToken file, bool isActive)
    parameters:
    - id: line
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: LineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LineDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76021
  summary: Creates a new LineDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static LineDirectiveTriviaSyntax LineDirectiveTrivia(SyntaxToken line, bool isActive)
    parameters:
    - id: line
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: LineDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PragmaWarningDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76027
  summary: Creates a new PragmaWarningDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(SyntaxToken hashToken, SyntaxToken pragmaKeyword, SyntaxToken warningKeyword, SyntaxToken disableOrRestoreKeyword, SeparatedSyntaxList<ExpressionSyntax> errorCodes, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: pragmaKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: warningKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: disableOrRestoreKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: errorCodes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: PragmaWarningDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PragmaWarningDirectiveTrivia(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76069
  summary: Creates a new PragmaWarningDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(SyntaxToken disableOrRestoreKeyword, SeparatedSyntaxList<ExpressionSyntax> errorCodes, bool isActive)
    parameters:
    - id: disableOrRestoreKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: errorCodes
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax}
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: PragmaWarningDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PragmaWarningDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76075
  summary: Creates a new PragmaWarningDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(SyntaxToken disableOrRestoreKeyword, bool isActive)
    parameters:
    - id: disableOrRestoreKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: PragmaWarningDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PragmaChecksumDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76081
  summary: Creates a new PragmaChecksumDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia(SyntaxToken hashToken, SyntaxToken pragmaKeyword, SyntaxToken checksumKeyword, SyntaxToken file, SyntaxToken guid, SyntaxToken bytes, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: pragmaKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: checksumKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: guid
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: bytes
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: PragmaChecksumDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PragmaChecksumDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76136
  summary: Creates a new PragmaChecksumDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia(SyntaxToken file, SyntaxToken guid, SyntaxToken bytes, bool isActive)
    parameters:
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: guid
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: bytes
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: PragmaChecksumDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ReferenceDirectiveTrivia(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76142
  summary: Creates a new ReferenceDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(SyntaxToken hashToken, SyntaxToken referenceKeyword, SyntaxToken file, SyntaxToken endOfDirectiveToken, bool isActive)
    parameters:
    - id: hashToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: referenceKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: endOfDirectiveToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ReferenceDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ReferenceDirectiveTrivia(SyntaxToken, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/obj/Debug/Syntax.xml.Generated.cs
    startLine: 76176
  summary: Creates a new ReferenceDirectiveTriviaSyntax instance.
  syntax:
    content:
      CSharp: public static ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(SyntaxToken file, bool isActive)
    parameters:
    - id: file
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: isActive
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: ReferenceDirectiveTriviaSyntax
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)
