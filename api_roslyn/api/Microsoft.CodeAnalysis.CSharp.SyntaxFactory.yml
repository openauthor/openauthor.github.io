items:
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxFactory
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  type: Class
  source:
    remote: &o1
      path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 25
  summary: A class containing factory methods for constructing syntax nodes, tokens and trivia.
  syntax:
    content:
      CSharp: 'public class SyntaxFactory : object'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory
  children:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(IEnumerable{``0})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0},IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding,CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,CancellationToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(StatementSyntax[])
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(IEnumerable{StatementSyntax})
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,BracketedParameterListSyntax,AccessorListSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AnonymousMethodExpression()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression()
  type: Method
  source:
    remote:
      path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/AnonymousMethodExpressionSyntax.cs
    startLine: 27
  summary: Creates a new AnonymousMethodExpressionSyntax instance.
  syntax:
    content:
      CSharp: public static AnonymousMethodExpressionSyntax AnonymousMethodExpression()
    parameters: []
    return:
      id: AnonymousMethodExpressionSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
        name: AnonymousMethodExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CarriageReturnLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
  type: Field
  source:
    remote: &o0
      path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 24
  summary: >-
    A trivia with kind EndOfLineTrivia containing both the carriage return and line feed

    characters.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia CarriageReturnLineFeed;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: LineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 29
  summary: A trivia with kind EndOfLineTrivia containing a single line feed character.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia LineFeed;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CarriageReturn
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 34
  summary: A trivia with kind EndOfLineTrivia containing a single carriage return character.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia CarriageReturn;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Space
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 39
  summary: A trivia with kind WhitespaceTrivia containing a single space character.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia Space;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Tab
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 44
  summary: A trivia with kind WhitespaceTrivia containing a single tab character.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia Tab;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticCarriageReturnLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 51
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.

    Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not

    preserved during formatting.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticCarriageReturnLineFeed;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticLineFeed
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 58
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used

    to denote trivia that was not produced by parsing source text, and are usually not preserved during

    formatting.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticLineFeed;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticCarriageReturn
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 65
  summary: >-
    An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia

    are used to denote trivia that was not produced by parsing source text, and are usually not preserved during

    formatting.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticCarriageReturn;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticSpace
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 71
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to

    denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticSpace;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticTab
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 77
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to

    denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticTab;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ElasticMarker
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 84
  summary: >-
    An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included

    automatically by factory methods when trivia is not specified. Syntax formatting will replace elastic

    markers with appropriate trivia.
  syntax:
    content:
      CSharp: public static readonly SyntaxTrivia ElasticMarker;
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: EndOfLine(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 94
  summary: Creates a trivia with kind EndOfLineTrivia containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia EndOfLine(string text, bool elastic = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The text of the trivia. Any text can be specified here, however only carriage return and

        line feed characters are recognized by the parser as end of line.
    - id: elastic
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true, the trivia produced is an elastic trivia. Elastic trivia are used to denote

        trivia that was not produced by parsing source text, and are usually not preserved during

        formatting.
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Whitespace(string, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(string, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 107
  summary: Creates a trivia with kind WhitespaceTrivia containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Whitespace(string text, bool elastic = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The text of the whitespace. Any text can be specified here, however only specific

        whitespace characters are recognized by the parser.
    - id: elastic
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true, the trivia produced is an elastic trivia. Elastic trivia are used to denote

        trivia that was not produced by parsing source text, and are usually not preserved during

        formatting.
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Comment(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 118
  summary: >-
    Creates a trivia with kind either SingleLineCommentTrivia or MultiLineCommentTrivia containing the specified

    text.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Comment(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The entire text of the comment including the leading '//' token for single line comments

        or stop or start tokens for multiline comments.
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DisabledText(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 127
  summary: >-
    Creates a trivia with kind DisabledTextTrivia. Disabled text corresponds to any text between directives that

    is not considered active.
  syntax:
    content:
      CSharp: public static SyntaxTrivia DisabledText(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PreprocessingMessage(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 135
  summary: Creates a trivia with kind PreprocessingMessageTrivia.
  syntax:
    content:
      CSharp: public static SyntaxTrivia PreprocessingMessage(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxTrivia(SyntaxKind, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 153
  summary: >-
    Trivia nodes represents parts of the program text that are not parts of the

    syntactic grammar, such as spaces, newlines, comments, preprocessors

    directives, and disabled code.
  syntax:
    content:
      CSharp: public static SyntaxTrivia SyntaxTrivia(SyntaxKind kind, string text)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: >-
        A  representing the specific kind of SyntaxTrivia. One of

        WhitespaceTrivia, EndOfLineTrivia, CommentTrivia,

        DocumentationCommentExteriorTrivia, DisabledTextTrivia.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The actual text of this token.
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 181
  summary: >-
    Creates a token corresponding to a syntax kind. This method can be used for token syntax kinds whose text

    can be inferred by the kind alone.
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 193
  summary: >-
    Creates a token corresponding to syntax kind. This method can be used for token syntax kinds whose text can

    be inferred by the kind alone.
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Token(SyntaxTriviaList, SyntaxKind, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 210
  summary: >-
    Creates a token corresponding to syntax kind. This method gives control over token Text and ValueText.



    For example, consider the text '<see cref="operator &#43;"/>'.  To create a token for the value of

    the operator symbol (&#43;), one would call

    Token(default(SyntaxTriviaList), SyntaxKind.PlusToken, "&#43;", "+", default(SyntaxTriviaList)).
  syntax:
    content:
      CSharp: public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text from which this this token was created (e.g. lexed).
    - id: valueText
      type:
        id: System.String
        name: string
        isExternal: true
      description: How C# should interpret the text of this token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MissingToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 238
  summary: >-
    Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an

    expected token is not found. A missing token has no text and normally has associated diagnostics.
  syntax:
    content:
      CSharp: public static SyntaxToken MissingToken(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MissingToken(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 250
  summary: >-
    Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an

    expected token is not found. A missing token has no text and normally has associated diagnostics.
  syntax:
    content:
      CSharp: public static SyntaxToken MissingToken(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: A syntax kind value for a token. These have the suffix Token or Keyword.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 260
  summary: >-
    Creates a token with kind IdentifierToken containing the specified text.

    The raw text of the identifier name, including any escapes or leading '@'

    character.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(SyntaxTriviaList, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 272
  summary: Creates a token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: VerbatimIdentifier(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 285
  summary: Creates a verbatim token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken VerbatimIdentifier(SyntaxTriviaList leading, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character as it is in source.
    - id: valueText
      type:
        id: System.String
        name: string
        isExternal: true
      description: The canonical value of the token's text.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Identifier(SyntaxTriviaList, SyntaxKind, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 306
  summary: Creates a token with kind IdentifierToken containing the specified text.
  syntax:
    content:
      CSharp: public static SyntaxToken Identifier(SyntaxTriviaList leading, SyntaxKind contextualKind, string text, string valueText, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: contextualKind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: >-
        An alternative SyntaxKind that can be inferred for this token in special

        contexts. These are usually keywords.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: >-
        The raw text of the identifier name, including any escapes or leading '@'

        character.
    - id: valueText
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the identifier name without escapes or leading '@' character.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 315
  summary: Creates a token with kind NumericLiteralToken from a 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(int value)
    parameters:
    - id: value
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 325
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, int value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, int, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, int, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 337
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, int value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: The 4-byte signed integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(uint)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(uint)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 346
  summary: Creates a token with kind NumericLiteralToken from a 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(uint value)
    parameters:
    - id: value
      type:
        id: System.UInt32
        name: uint
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, uint)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, uint)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 356
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, uint value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt32
        name: uint
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, uint, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, uint, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 368
  summary: Creates a token with kind NumericLiteraToken from the text and corresponding 4-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, uint value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt32
        name: uint
        isExternal: true
      description: The 4-byte unsigned integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(long)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(long)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 377
  summary: Creates a token with kind NumericLiteralToken from an 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(long value)
    parameters:
    - id: value
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, long)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, long)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 387
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, long value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, long, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, long, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 399
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, long value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Int64
        name: long
        isExternal: true
      description: The 8-byte signed integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(ulong)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(ulong)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 408
  summary: Creates a token with kind NumericLiteralToken from an 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(ulong value)
    parameters:
    - id: value
      type:
        id: System.UInt64
        name: ulong
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, ulong)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, ulong)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 418
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, ulong value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt64
        name: ulong
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, ulong, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, ulong, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 430
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, ulong value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.UInt64
        name: ulong
        isExternal: true
      description: The 8-byte unsigned integer value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(float)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(float)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 439
  summary: Creates a token with kind NumericLiteralToken from a 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(float value)
    parameters:
    - id: value
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, float)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, float)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 449
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, float value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, float, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, float, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 461
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, float value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Single
        name: float
        isExternal: true
      description: The 4-byte floating point value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(double)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(double)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 470
  summary: Creates a token with kind NumericLiteralToken from an 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(double value)
    parameters:
    - id: value
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, double)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, double)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 480
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, double value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, double, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, double, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 492
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, double value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Double
        name: double
        isExternal: true
      description: The 8-byte floating point value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(decimal)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(decimal)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 501
  summary: Creates a token with kind NumericLiteralToken from a decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(decimal value)
    parameters:
    - id: value
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, decimal)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, decimal)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 511
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, decimal value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, decimal, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, decimal, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 523
  summary: Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, decimal value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.Decimal
        name: decimal
        isExternal: true
      description: The decimal value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 532
  summary: Creates a token with kind StringLiteralToken from a string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string value)
    parameters:
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 542
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, string value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 554
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The string value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 563
  summary: Creates a token with kind CharacterLiteralToken from a character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(char value)
    parameters:
    - id: value
      type:
        id: System.Char
        name: char
        isExternal: true
      description: The character value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(string, char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(string, char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 573
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(string text, char value)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.Char
        name: char
        isExternal: true
      description: The character value to be represented by the returned token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Literal(SyntaxTriviaList, string, char, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList, string, char, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 585
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  syntax:
    content:
      CSharp: public static SyntaxToken Literal(SyntaxTriviaList leading, string text, char value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal, including quotes and escape sequences.
    - id: value
      type:
        id: System.Char
        name: char
        isExternal: true
      description: The character value to be represented by the returned token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: BadToken(SyntaxTriviaList, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 596
  summary: Creates a token with kind BadToken.
  syntax:
    content:
      CSharp: public static SyntaxToken BadToken(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the bad token.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextLiteral(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 608
  summary: Creates a token with kind XmlTextLiteralToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlTextLiteral(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The xml text value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlTextNewLine(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 620
  summary: Creates a token with kind XmlTextLiteralNewLineToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlTextNewLine(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The xml text new line value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: XmlEntity(SyntaxTriviaList, string, string, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList, string, string, Microsoft.CodeAnalysis.SyntaxTriviaList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 632
  summary: Creates a token with kind XmlEntityLiteralToken.
  syntax:
    content:
      CSharp: public static SyntaxToken XmlEntity(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing)
    parameters:
    - id: leading
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately preceding the token.
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    - id: value
      type:
        id: System.String
        name: string
        isExternal: true
      description: The xml entity value.
    - id: trailing
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: A list of trivia immediately following the token.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DocumentationCommentExterior(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 641
  summary: Creates a trivia with kind DocumentationCommentExteriorTrivia.
  syntax:
    content:
      CSharp: public static SyntaxTrivia DocumentationCommentExterior(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The raw text of the literal.
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: List<TNode>()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List<TNode>()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 650
  summary: Creates an empty list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> List<TNode>()where TNode : SyntaxNode'
    parameters: []
    return:
      id: SyntaxList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SingletonList<TNode>(TNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList<TNode>(TNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 661
  summary: Creates a singleton list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> SingletonList<TNode>(TNode node)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: The single element node.
    return:
      id: SyntaxList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(IEnumerable{``0})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: List<TNode>(IEnumerable<TNode>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List<TNode>(IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 672
  summary: Creates a list of syntax nodes.
  syntax:
    content:
      CSharp: 'public static SyntaxList<TNode> List<TNode>(IEnumerable<TNode> nodes)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: IEnumerable{``0}
        name: IEnumerable<TNode>
        isExternal: true
      description: A sequence of element nodes.
    return:
      id: SyntaxList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(IEnumerable{``0})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 693
  summary: Creates an empty list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList()
    parameters: []
    return:
      id: SyntaxTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 702
  summary: Creates a singleton list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(SyntaxToken token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The single token.
    return:
      id: SyntaxTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(params SyntaxToken[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(params Microsoft.CodeAnalysis.SyntaxToken[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 711
  summary: Creates a list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(params SyntaxToken[] tokens)
    parameters:
    - id: tokens
      type:
        id: System.Array
        name: SyntaxToken[]
        isExternal: true
      description: An array of tokens.
    return:
      id: SyntaxTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TokenList(IEnumerable<SyntaxToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 732
  summary: Creates a list of tokens.
  syntax:
    content:
      CSharp: public static SyntaxTokenList TokenList(IEnumerable<SyntaxToken> tokens)
    parameters:
    - id: tokens
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: IEnumerable<SyntaxToken>
        isExternal: true
    return:
      id: SyntaxTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Trivia(StructuredTriviaSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 751
  summary: Creates a trivia from a StructuredTriviaSyntax node.
  syntax:
    content:
      CSharp: public static SyntaxTrivia Trivia(StructuredTriviaSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax
        name: StructuredTriviaSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.yml
    return:
      id: SyntaxTrivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 759
  summary: Creates an empty list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList()
    parameters: []
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(SyntaxTrivia)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 768
  summary: Creates a singleton list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(SyntaxTrivia trivia)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
      description: A single trivia.
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(params SyntaxTrivia[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(params Microsoft.CodeAnalysis.SyntaxTrivia[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 777
  summary: Creates a list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(params SyntaxTrivia[] trivias)
    parameters:
    - id: trivias
      type:
        id: System.Array
        name: SyntaxTrivia[]
        isExternal: true
      description: An array of trivia.
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TriviaList(IEnumerable<SyntaxTrivia>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 793
  summary: Creates a list of trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList TriviaList(IEnumerable<SyntaxTrivia> trivias)
    parameters:
    - id: trivias
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}
        name: IEnumerable<SyntaxTrivia>
        isExternal: true
      description: A sequence of trivia.
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 813
  summary: Creates an empty separated list.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>()where TNode : SyntaxNode'
    parameters: []
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SingletonSeparatedList<TNode>(TNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList<TNode>(TNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 823
  summary: Creates a singleton separated list.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SingletonSeparatedList<TNode>(TNode node)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
      description: A single node.
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<TNode>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 833
  summary: Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode> nodes)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: IEnumerable{``0}
        name: IEnumerable<TNode>
        isExternal: true
      description: A sequence of syntax nodes.
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0},IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<TNode>, IEnumerable<SyntaxToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(IEnumerable<TNode>, IEnumerable<Microsoft.CodeAnalysis.SyntaxToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 885
  summary: Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode> nodes, IEnumerable<SyntaxToken> separators)where TNode : SyntaxNode'
    parameters:
    - id: nodes
      type:
        id: IEnumerable{``0}
        name: IEnumerable<TNode>
        isExternal: true
      description: A sequence of syntax nodes.
    - id: separators
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: IEnumerable<SyntaxToken>
        isExternal: true
      description: >-
        A sequence of token to be interleaved between the nodes. The number of tokens must

        be one less than the number of nodes.
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{``0},IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 933
  summary: Creates a separated list from a sequence of nodes and tokens, starting with a node and alternating between additional nodes and separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken> nodesAndTokens)where TNode : SyntaxNode'
    parameters:
    - id: nodesAndTokens
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: IEnumerable<SyntaxNodeOrToken>
        isExternal: true
      description: A sequence of nodes or tokens, alternating between nodes and separator tokens.
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SeparatedList<TNode>(SyntaxNodeOrTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList<TNode>(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 944
  summary: >-
    Creates a separated list from a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList](), where the list elements start with a node and then alternate between

    additional nodes and separator tokens.
  syntax:
    content:
      CSharp: 'public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(SyntaxNodeOrTokenList nodesAndTokens)where TNode : SyntaxNode'
    parameters:
    - id: nodesAndTokens
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
      description: The list of nodes and tokens.
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 990
  summary: Creates an empty [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList]().
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList()
    parameters: []
    return:
      id: SyntaxNodeOrTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList(IEnumerable<SyntaxNodeOrToken>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 999
  summary: Create a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList]() from a sequence of [Microsoft.CodeAnalysis.SyntaxNodeOrToken]().
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList(IEnumerable<SyntaxNodeOrToken> nodesAndTokens)
    parameters:
    - id: nodesAndTokens
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}
        name: IEnumerable<SyntaxNodeOrToken>
        isExternal: true
      description: The sequence of nodes and tokens
    return:
      id: SyntaxNodeOrTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: NodeOrTokenList(params SyntaxNodeOrToken[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(params Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1015
  summary: Create a [Microsoft.CodeAnalysis.SyntaxNodeOrTokenList]() from one or more [Microsoft.CodeAnalysis.SyntaxNodeOrToken]().
  syntax:
    content:
      CSharp: public static SyntaxNodeOrTokenList NodeOrTokenList(params SyntaxNodeOrToken[] nodesAndTokens)
    parameters:
    - id: nodesAndTokens
      type:
        id: System.Array
        name: SyntaxNodeOrToken[]
        isExternal: true
      description: The nodes and tokens
    return:
      id: SyntaxNodeOrTokenList
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
        name: SyntaxNodeOrTokenList
        href: Microsoft.CodeAnalysis.SyntaxNodeOrTokenList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IdentifierName(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1024
  summary: Creates an IdentifierNameSyntax node.
  syntax:
    content:
      CSharp: public static IdentifierNameSyntax IdentifierName(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
      description: The identifier name.
    return:
      id: IdentifierNameSyntax
      type:
        id: IdentifierNameSyntax
        name: IdentifierNameSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: SyntaxTree(SyntaxNode, ParseOptions, string, Encoding)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ParseOptions, string, Encoding)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1034
  summary: Create a new syntax tree from a syntax node.
  syntax:
    content:
      CSharp: public static SyntaxTree SyntaxTree(SyntaxNode root, ParseOptions options = null, string path = "", Encoding encoding = null)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: string
        isExternal: true
    - id: encoding
      type:
        id: Encoding
        name: Encoding
        isExternal: true
    return:
      id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding,CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseSyntaxTree(string, ParseOptions, string, Encoding, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(string, Microsoft.CodeAnalysis.ParseOptions, string, Encoding, CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1042
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseSyntaxTree(string text, ParseOptions options = null, string path = "", Encoding encoding = null, CancellationToken cancellationToken = null)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: string
        isExternal: true
    - id: encoding
      type:
        id: Encoding
        name: Encoding
        isExternal: true
    - id: cancellationToken
      type:
        id: CancellationToken
        name: CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,Encoding,CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,CancellationToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseSyntaxTree(SourceText, ParseOptions, string, CancellationToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.ParseOptions, string, CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1055
  summary: Produces a syntax tree by parsing the source text.
  syntax:
    content:
      CSharp: public static SyntaxTree ParseSyntaxTree(SourceText text, ParseOptions options = null, string path = "", CancellationToken cancellationToken = null)
    parameters:
    - id: text
      type:
        id: Microsoft.CodeAnalysis.Text.SourceText
        name: SourceText
        href: Microsoft.CodeAnalysis.Text.SourceText
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
    - id: path
      type:
        id: System.String
        name: string
        isExternal: true
    - id: cancellationToken
      type:
        id: CancellationToken
        name: CancellationToken
        isExternal: true
    return:
      id: SyntaxTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,CancellationToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseLeadingTrivia(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1067
  summary: Parse a list of trivia rules for leading trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList ParseLeadingTrivia(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTrailingTrivia(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1086
  summary: Parse a list of trivia using the parsing rules for trailing trivia.
  syntax:
    content:
      CSharp: public static SyntaxTriviaList ParseTrailingTrivia(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: SyntaxTriviaList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseToken(string, int)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(string, int)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1123
  summary: Parse a C# language token.
  syntax:
    content:
      CSharp: public static SyntaxToken ParseToken(string text, int offset = 0)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the token including leading and trailing trivia.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    return:
      id: SyntaxToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTokens(string, int, int, CSharpParseOptions)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(string, int, int, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1138
  summary: Parse a sequence of C# language tokens.
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxToken> ParseTokens(string text, int offset = 0, int initialTokenPosition = 0, CSharpParseOptions options = null)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of all the tokens.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: initialTokenPosition
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: An integer to use as the starting position of the first token.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
      description: Parse options.
    return:
      id: IEnumerable
      type:
        id: IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}
        name: IEnumerable<SyntaxToken>
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseName(string, int, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(string, int, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1161
  summary: Parse a NameSyntax node using the grammar rule for names.
  syntax:
    content:
      CSharp: public static NameSyntax ParseName(string text, int offset = 0, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
    return:
      id: NameSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseTypeName(string, int, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(string, int, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1175
  summary: Parse a TypeNameSyntax node using the grammar rule for type names.
  syntax:
    content:
      CSharp: public static TypeSyntax ParseTypeName(string text, int offset = 0, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
    return:
      id: TypeSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseExpression(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1194
  summary: Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
  syntax:
    content:
      CSharp: public static ExpressionSyntax ParseExpression(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the expression.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ExpressionSyntax
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseStatement(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1213
  summary: Parse a StatementSyntaxNode using grammar rule for statements.
  syntax:
    content:
      CSharp: public static StatementSyntax ParseStatement(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the statement.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: StatementSyntax
      type:
        id: StatementSyntax
        name: StatementSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseCompilationUnit(string, int, CSharpParseOptions)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(string, int, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1232
  summary: >-
    Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a

    SyntaxTree instance, use CSharpSyntaxTree.ParseText instead.
  syntax:
    content:
      CSharp: public static CompilationUnitSyntax ParseCompilationUnit(string text, int offset = 0, CSharpParseOptions options = null)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the compilation unit.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
        name: CSharpParseOptions
        href: Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.yml
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    return:
      id: CompilationUnitSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
        name: CompilationUnitSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseParameterList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1253
  summary: Parse a ParameterListSyntax node.
  syntax:
    content:
      CSharp: public static ParameterListSyntax ParseParameterList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the parenthesized parameter list.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ParameterListSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseBracketedParameterList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1272
  summary: Parse a BracketedParameterListSyntax node.
  syntax:
    content:
      CSharp: public static BracketedParameterListSyntax ParseBracketedParameterList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the bracketed parameter list.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: BracketedParameterListSyntax
      type:
        id: BracketedParameterListSyntax
        name: BracketedParameterListSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1291
  summary: Parse an ArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static ArgumentListSyntax ParseArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the parenthesized argument list.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: ArgumentListSyntax
      type:
        id: ArgumentListSyntax
        name: ArgumentListSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseBracketedArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1310
  summary: Parse a BracketedArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static BracketedArgumentListSyntax ParseBracketedArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the bracketed argument list.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: BracketedArgumentListSyntax
      type:
        id: BracketedArgumentListSyntax
        name: BracketedArgumentListSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ParseAttributeArgumentList(string, int, ParseOptions, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1329
  summary: Parse an AttributeArgumentListSyntax node.
  syntax:
    content:
      CSharp: public static AttributeArgumentListSyntax ParseAttributeArgumentList(string text, int offset = 0, ParseOptions options = null, bool consumeFullText = true)
    parameters:
    - id: text
      type:
        id: System.String
        name: string
        isExternal: true
      description: The text of the attribute argument list.
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
      description: Optional offset into text.
    - id: options
      type:
        id: Microsoft.CodeAnalysis.ParseOptions
        name: ParseOptions
        href: Microsoft.CodeAnalysis.ParseOptions
      description: >-
        The optional parse options to use. If no options are specified default options are

        used.
    - id: consumeFullText
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: True if extra tokens in the input should be treated as an error
    return:
      id: AttributeArgumentListSyntax
      type:
        id: AttributeArgumentListSyntax
        name: AttributeArgumentListSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxTree, SyntaxTree, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis.SyntaxTree, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1370
  summary: Determines if two trees are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree, bool topLevel)
    parameters:
    - id: oldTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The original tree.
    - id: newTree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
      description: The new tree.
    - id: topLevel
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true then the trees are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxNode, SyntaxNode, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1394
  summary: Determines if two syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, bool topLevel)
    parameters:
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The old node.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The new node.
    - id: topLevel
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxNode, SyntaxNode, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1408
  summary: Determines if two syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, Func<SyntaxKind, bool> ignoreChildNode = null)
    parameters:
    - id: oldNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The old node.
    - id: newNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The new node.
    - id: ignoreChildNode
      type:
        id: Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: Func<SyntaxKind, bool>
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1418
  summary: Determines if two syntax tokens are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxToken oldToken, SyntaxToken newToken)
    parameters:
    - id: oldToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The old token.
    - id: newToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
      description: The new token.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent(SyntaxTokenList, SyntaxTokenList)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxTokenList)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1428
  summary: Determines if two lists of tokens are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: public static bool AreEquivalent(SyntaxTokenList oldList, SyntaxTokenList newList)
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
      description: The old token list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
      description: The new token list.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.SyntaxList<TNode>, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1443
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, bool topLevel)where TNode : CSharpSyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The new list.
    - id: topLevel
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.SyntaxList<TNode>, Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1458
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, Func<SyntaxKind, bool> ignoreChildNode = null)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: The new list.
    - id: ignoreChildNode
      type:
        id: Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: Func<SyntaxKind, bool>
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, bool)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, bool)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1474
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, bool topLevel)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The new list.
    - id: topLevel
      type:
        id: System.Boolean
        name: bool
        isExternal: true
      description: >-
        If true then the nodes are equivalent if the contained nodes and tokens declaring

        metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies

        or initializer expressions, otherwise all nodes and tokens must be equivalent.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, Func<SyntaxKind, bool>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Func<Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1489
  summary: Determines if two lists of syntax nodes are the same, disregarding trivia differences.
  syntax:
    content:
      CSharp: 'public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, Func<SyntaxKind, bool> ignoreChildNode = null)where TNode : SyntaxNode'
    parameters:
    - id: oldList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The old list.
    - id: newList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: The new list.
    - id: ignoreChildNode
      type:
        id: Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean}
        name: Func<SyntaxKind, bool>
        isExternal: true
      description: >-
        If specified called for every child syntax node (not token) that is visited during the comparison.

        It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GetStandaloneExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1533
  summary: >-
    Gets the containing expression that is actually a language expression and not just typed

    as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side

    of qualified names and member access expressions are not language expressions, yet the

    containing qualified names or member access expressions are indeed expressions.
  syntax:
    content:
      CSharp: public static ExpressionSyntax GetStandaloneExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
    return:
      id: ExpressionSyntax
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: GetNonGenericExpression(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1695
  summary: Converts a generic name expression into one without the generic arguments.
  syntax:
    content:
      CSharp: public static ExpressionSyntax GetNonGenericExpression(ExpressionSyntax expression)
    parameters:
    - id: expression
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
    return:
      id: ExpressionSyntax
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IsCompleteSubmission(SyntaxTree)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1734
  summary: Determines whether the given text is considered a syntactically complete submission.
  syntax:
    content:
      CSharp: public static bool IsCompleteSubmission(SyntaxTree tree)
    parameters:
    - id: tree
      type:
        id: Microsoft.CodeAnalysis.SyntaxTree
        name: SyntaxTree
        href: Microsoft.CodeAnalysis.SyntaxTree
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: CaseSwitchLabel(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1842
  summary: Creates a new CaseSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static CaseSwitchLabelSyntax CaseSwitchLabel(ExpressionSyntax value)
    parameters:
    - id: value
      type:
        id: ExpressionSyntax
        name: ExpressionSyntax
        isExternal: true
    return:
      id: CaseSwitchLabelSyntax
      type:
        id: CaseSwitchLabelSyntax
        name: CaseSwitchLabelSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: DefaultSwitchLabel()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1848
  summary: Creates a new DefaultSwitchLabelSyntax instance.
  syntax:
    content:
      CSharp: public static DefaultSwitchLabelSyntax DefaultSwitchLabel()
    parameters: []
    return:
      id: DefaultSwitchLabelSyntax
      type:
        id: DefaultSwitchLabelSyntax
        name: DefaultSwitchLabelSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(StatementSyntax[])
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(params StatementSyntax[])
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(params StatementSyntax[])
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1854
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(params StatementSyntax[] statements)
    parameters:
    - id: statements
      type:
        id: System.Array
        name: StatementSyntax[]
        isExternal: true
    return:
      id: BlockSyntax
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(StatementSyntax[])
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(IEnumerable{StatementSyntax})
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: Block(IEnumerable<StatementSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(IEnumerable<StatementSyntax>)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1860
  summary: Creates a new BlockSyntax instance.
  syntax:
    content:
      CSharp: public static BlockSyntax Block(IEnumerable<StatementSyntax> statements)
    parameters:
    - id: statements
      type:
        id: IEnumerable{StatementSyntax}
        name: IEnumerable<StatementSyntax>
        isExternal: true
    return:
      id: BlockSyntax
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(IEnumerable{StatementSyntax})
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: PropertyDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1865
  syntax:
    content:
      CSharp: public static PropertyDeclarationSyntax PropertyDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        isExternal: true
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: accessorList
      type:
        id: AccessorListSyntax
        name: AccessorListSyntax
        isExternal: true
    return:
      id: PropertyDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax
        name: PropertyDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: MethodDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.SyntaxToken, TypeParameterListSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, Microsoft.CodeAnalysis.SyntaxList<TypeParameterConstraintClauseSyntax>, BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1884
  syntax:
    content:
      CSharp: public static MethodDeclarationSyntax MethodDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        isExternal: true
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: TypeParameterListSyntax
        name: TypeParameterListSyntax
        isExternal: true
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax}
        name: SyntaxList<TypeParameterConstraintClauseSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax}
    - id: body
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: MethodDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax
        name: MethodDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeSyntax, ParameterListSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1910
  syntax:
    content:
      CSharp: public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: implicitOrExplicitKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: ConversionOperatorDeclarationSyntax
      type:
        id: ConversionOperatorDeclarationSyntax
        name: ConversionOperatorDeclarationSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: OperatorDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, SyntaxToken, SyntaxToken, ParameterListSyntax, BlockSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax, BlockSyntax, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1932
  syntax:
    content:
      CSharp: public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax body, SyntaxToken semicolonToken)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: operatorKeyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: operatorToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: parameterList
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax
        name: ParameterListSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.yml
    - id: body
      type:
        id: BlockSyntax
        name: BlockSyntax
        isExternal: true
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: OperatorDeclarationSyntax
      type:
        id: OperatorDeclarationSyntax
        name: OperatorDeclarationSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,BracketedParameterListSyntax,AccessorListSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: IndexerDeclaration(SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, BracketedParameterListSyntax, AccessorListSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, ExplicitInterfaceSpecifierSyntax, BracketedParameterListSyntax, AccessorListSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1954
  syntax:
    content:
      CSharp: public static IndexerDeclarationSyntax IndexerDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, BracketedParameterListSyntax parameterList, AccessorListSyntax accessorList)
    parameters:
    - id: attributeLists
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: type
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
        name: TypeSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.yml
    - id: explicitInterfaceSpecifier
      type:
        id: ExplicitInterfaceSpecifierSyntax
        name: ExplicitInterfaceSpecifierSyntax
        isExternal: true
    - id: parameterList
      type:
        id: BracketedParameterListSyntax
        name: BracketedParameterListSyntax
        isExternal: true
    - id: accessorList
      type:
        id: AccessorListSyntax
        name: AccessorListSyntax
        isExternal: true
    return:
      id: IndexerDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax
        name: IndexerDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,ExplicitInterfaceSpecifierSyntax,BracketedParameterListSyntax,AccessorListSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: UsingDirective(NameEqualsSyntax, NameSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(NameEqualsSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFactory.cs
    startLine: 1973
  summary: Creates a new UsingDirectiveSyntax instance.
  syntax:
    content:
      CSharp: public static UsingDirectiveSyntax UsingDirective(NameEqualsSyntax alias, NameSyntax name)
    parameters:
    - id: alias
      type:
        id: NameEqualsSyntax
        name: NameEqualsSyntax
        isExternal: true
    - id: name
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
        name: NameSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.yml
    return:
      id: UsingDirectiveSyntax
      type:
        id: UsingDirectiveSyntax
        name: UsingDirectiveSyntax
        isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o1
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 57
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, SyntaxToken identifier)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax
        name: TypeDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, string)
  type: Method
  source:
    remote: *o1
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 74
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, string identifier)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: TypeDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax
        name: TypeDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.yml
  name: TypeDeclaration(SyntaxKind, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax, BaseListSyntax, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.SyntaxList<AttributeListSyntax>, Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, TypeParameterListSyntax, BaseListSyntax, Microsoft.CodeAnalysis.SyntaxList<TypeParameterConstraintClauseSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxList<MemberDeclarationSyntax>, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o1
    path: src/Compilers/CSharp/Portable/Syntax/TypeDeclarationSyntax.cs
    startLine: 79
  syntax:
    content:
      CSharp: public static TypeDeclarationSyntax TypeDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributes, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax typeParameterList, BaseListSyntax baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    - id: attributes
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
        name: SyntaxList<AttributeListSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax}
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: identifier
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: typeParameterList
      type:
        id: TypeParameterListSyntax
        name: TypeParameterListSyntax
        isExternal: true
    - id: baseList
      type:
        id: BaseListSyntax
        name: BaseListSyntax
        isExternal: true
    - id: constraintClauses
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax}
        name: SyntaxList<TypeParameterConstraintClauseSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax}
    - id: openBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: members
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{MemberDeclarationSyntax}
        name: SyntaxList<MemberDeclarationSyntax>
        href: Microsoft.CodeAnalysis.SyntaxList{MemberDeclarationSyntax}
    - id: closeBraceToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: semicolonToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: TypeDeclarationSyntax
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax
        name: TypeDeclarationSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.yml
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,TypeParameterListSyntax,BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
