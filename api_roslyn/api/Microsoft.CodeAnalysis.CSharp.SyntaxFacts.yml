items:
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: SyntaxFacts
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 7
  summary: Defines a set of methods to determine how Unicode characters are treated by the C# compiler.
  syntax:
    content:
      CSharp: public static partial class SyntaxFacts
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts
  children:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(System.Char)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(System.String)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)
  - Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsWhitespace(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Parser/CharacterInfo.cs
    startLine: 91
  summary: Returns true if the Unicode character represents a whitespace.
  syntax:
    content:
      CSharp: public static bool IsWhitespace(char ch)
    parameters:
    - id: ch
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The Unicode character.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsNewLine(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Parser/CharacterInfo.cs
    startLine: 124
  summary: Returns true if the Unicode character is a newline character.
  syntax:
    content:
      CSharp: public static bool IsNewLine(char ch)
    parameters:
    - id: ch
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The Unicode character.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsIdentifierStartCharacter(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Parser/CharacterInfo.cs
    startLine: 144
  summary: Returns true if the Unicode character can be the starting character of a C# identifier.
  syntax:
    content:
      CSharp: public static bool IsIdentifierStartCharacter(char ch)
    parameters:
    - id: ch
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The Unicode character.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(System.Char)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsIdentifierPartCharacter(char)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(char)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Parser/CharacterInfo.cs
    startLine: 178
  summary: Returns true if the Unicode character can be a part of a C# identifier.
  syntax:
    content:
      CSharp: public static bool IsIdentifierPartCharacter(char ch)
    parameters:
    - id: ch
      type:
        id: System.Char
        name: System.Char
        isExternal: true
      description: The Unicode character.
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(System.Char)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsValidIdentifier(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Parser/CharacterInfo.cs
    startLine: 220
  summary: Check that the name is a valid identifier.
  syntax:
    content:
      CSharp: public static bool IsValidIdentifier(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: EqualityComparer
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer
  type: Field
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindEqualityComparer.cs
    startLine: 28
  summary: A custom equality comparer for [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml)
  syntax:
    content:
      CSharp: EqualityComparer
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsKeywordKind(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 8
  syntax:
    content:
      CSharp: public static bool IsKeywordKind(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetReservedKeywordKinds()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 13
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxKind> GetReservedKeywordKinds()
    parameters: []
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetKeywordKinds()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 21
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxKind> GetKeywordKinds()
    parameters: []
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsReservedKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 34
  syntax:
    content:
      CSharp: public static bool IsReservedKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAttributeTargetSpecifier(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 39
  syntax:
    content:
      CSharp: public static bool IsAttributeTargetSpecifier(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAccessibilityModifier(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 51
  syntax:
    content:
      CSharp: public static bool IsAccessibilityModifier(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPreprocessorKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 65
  syntax:
    content:
      CSharp: public static bool IsPreprocessorKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPreprocessorKeywordKinds()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 121
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxKind> GetPreprocessorKeywordKinds()
    parameters: []
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPunctuation(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 133
  syntax:
    content:
      CSharp: public static bool IsPunctuation(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsLanguagePunctuation(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 138
  syntax:
    content:
      CSharp: public static bool IsLanguagePunctuation(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPreprocessorPunctuation(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 143
  syntax:
    content:
      CSharp: public static bool IsPreprocessorPunctuation(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPunctuationKinds()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 154
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxKind> GetPunctuationKinds()
    parameters: []
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPunctuationOrKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 162
  syntax:
    content:
      CSharp: public static bool IsPunctuationOrKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAnyToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 185
  syntax:
    content:
      CSharp: public static bool IsAnyToken(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsTrivia(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 201
  syntax:
    content:
      CSharp: public static bool IsTrivia(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPreprocessorDirective(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 219
  syntax:
    content:
      CSharp: public static bool IsPreprocessorDirective(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsName(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 244
  syntax:
    content:
      CSharp: public static bool IsName(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPredefinedType(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 258
  syntax:
    content:
      CSharp: public static bool IsPredefinedType(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsTypeSyntax(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 284
  syntax:
    content:
      CSharp: public static bool IsTypeSyntax(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsTypeDeclaration(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 298
  syntax:
    content:
      CSharp: public static bool IsTypeDeclaration(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsGlobalMemberDeclaration(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 317
  summary: Member declarations that can appear in global code (other than type declarations).
  syntax:
    content:
      CSharp: public static bool IsGlobalMemberDeclaration(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsNamespaceMemberDeclaration(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 332
  syntax:
    content:
      CSharp: public static bool IsNamespaceMemberDeclaration(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAnyUnaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 348
  syntax:
    content:
      CSharp: public static bool IsAnyUnaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPrefixUnaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 353
  syntax:
    content:
      CSharp: public static bool IsPrefixUnaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPrefixUnaryExpressionOperatorToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 358
  syntax:
    content:
      CSharp: public static bool IsPrefixUnaryExpressionOperatorToken(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPrefixUnaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 363
  syntax:
    content:
      CSharp: public static SyntaxKind GetPrefixUnaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPostfixUnaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 388
  syntax:
    content:
      CSharp: public static bool IsPostfixUnaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPostfixUnaryExpressionToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 393
  syntax:
    content:
      CSharp: public static bool IsPostfixUnaryExpressionToken(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPostfixUnaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 398
  syntax:
    content:
      CSharp: public static SyntaxKind GetPostfixUnaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsUnaryOperatorDeclarationToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 411
  syntax:
    content:
      CSharp: public static bool IsUnaryOperatorDeclarationToken(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAnyOverloadableOperator(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 418
  syntax:
    content:
      CSharp: public static bool IsAnyOverloadableOperator(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsOverloadableBinaryOperator(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 423
  syntax:
    content:
      CSharp: public static bool IsOverloadableBinaryOperator(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsOverloadableUnaryOperator(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 449
  syntax:
    content:
      CSharp: public static bool IsOverloadableUnaryOperator(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsPrimaryFunction(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 467
  syntax:
    content:
      CSharp: public static bool IsPrimaryFunction(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPrimaryFunction(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 472
  syntax:
    content:
      CSharp: public static SyntaxKind GetPrimaryFunction(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsLiteralExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 497
  syntax:
    content:
      CSharp: public static bool IsLiteralExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetLiteralExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 502
  syntax:
    content:
      CSharp: public static SyntaxKind GetLiteralExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsInstanceExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 525
  syntax:
    content:
      CSharp: public static bool IsInstanceExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetInstanceExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 530
  syntax:
    content:
      CSharp: public static SyntaxKind GetInstanceExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsBinaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 543
  syntax:
    content:
      CSharp: public static bool IsBinaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsBinaryExpressionOperatorToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 548
  syntax:
    content:
      CSharp: public static bool IsBinaryExpressionOperatorToken(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetBinaryExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 553
  syntax:
    content:
      CSharp: public static SyntaxKind GetBinaryExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAssignmentExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 604
  syntax:
    content:
      CSharp: public static bool IsAssignmentExpression(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAssignmentExpressionOperatorToken(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 625
  syntax:
    content:
      CSharp: public static bool IsAssignmentExpressionOperatorToken(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetAssignmentExpression(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 646
  syntax:
    content:
      CSharp: public static SyntaxKind GetAssignmentExpression(SyntaxKind token)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetCheckStatement(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 677
  syntax:
    content:
      CSharp: public static SyntaxKind GetCheckStatement(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetAccessorDeclarationKind(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 690
  syntax:
    content:
      CSharp: public static SyntaxKind GetAccessorDeclarationKind(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAccessorDeclaration(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 707
  syntax:
    content:
      CSharp: public static bool IsAccessorDeclaration(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAccessorDeclarationKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 721
  syntax:
    content:
      CSharp: public static bool IsAccessorDeclarationKeyword(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetSwitchLabelKind(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 735
  syntax:
    content:
      CSharp: public static SyntaxKind GetSwitchLabelKind(SyntaxKind keyword)
    parameters:
    - id: keyword
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetBaseTypeDeclarationKind(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 748
  syntax:
    content:
      CSharp: public static SyntaxKind GetBaseTypeDeclarationKind(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetTypeDeclarationKind(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 753
  syntax:
    content:
      CSharp: public static SyntaxKind GetTypeDeclarationKind(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetKeywordKind(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 768
  syntax:
    content:
      CSharp: public static SyntaxKind GetKeywordKind(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetOperatorKind(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 939
  syntax:
    content:
      CSharp: public static SyntaxKind GetOperatorKind(string operatorMetadataName)
    parameters:
    - id: operatorMetadataName
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetPreprocessorKeywordKind(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 978
  syntax:
    content:
      CSharp: public static SyntaxKind GetPreprocessorKeywordKind(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetContextualKeywordKinds()
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1027
  syntax:
    content:
      CSharp: public static IEnumerable<SyntaxKind> GetContextualKeywordKinds()
    parameters: []
    return:
      id: IEnumerable
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsContextualKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1035
  syntax:
    content:
      CSharp: public static bool IsContextualKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsQueryContextualKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1078
  syntax:
    content:
      CSharp: public static bool IsQueryContextualKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(System.String)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetContextualKeywordKind(string)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(string)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1101
  syntax:
    content:
      CSharp: public static SyntaxKind GetContextualKeywordKind(string text)
    parameters:
    - id: text
      type:
        id: System.String
        name: System.String
        isExternal: true
    return:
      id: SyntaxKind
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(System.String)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetText(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1176
  syntax:
    content:
      CSharp: public static string GetText(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: String
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsTypeParameterVarianceKeyword(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1577
  syntax:
    content:
      CSharp: public static bool IsTypeParameterVarianceKeyword(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsDocumentationCommentTrivia(SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxKindFacts.cs
    startLine: 1582
  syntax:
    content:
      CSharp: public static bool IsDocumentationCommentTrivia(SyntaxKind kind)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAliasQualifier(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 12
  summary: Returns true if the node is the alias of an AliasQualifiedNameSyntax
  syntax:
    content:
      CSharp: public static bool IsAliasQualifier(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsAttributeName(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 18
  syntax:
    content:
      CSharp: public static bool IsAttributeName(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsInvoked(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 44
  summary: Returns true if the node is the object of an invocation expression.
  syntax:
    content:
      CSharp: public static bool IsInvoked(ExpressionSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsIndexed(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 54
  summary: Returns true if the node is the object of an element access expression.
  syntax:
    content:
      CSharp: public static bool IsIndexed(ExpressionSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsNamespaceAliasQualifier(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 61
  syntax:
    content:
      CSharp: public static bool IsNamespaceAliasQualifier(ExpressionSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsInTypeOnlyContext(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 72
  summary: Returns true if the node is in a tree location that is expected to be a type
  syntax:
    content:
      CSharp: public static bool IsInTypeOnlyContext(ExpressionSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsInNamespaceOrTypeContext(ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 192
  summary: Returns true if a node is in a tree location that is expected to be either a namespace or type
  syntax:
    content:
      CSharp: public static bool IsInNamespaceOrTypeContext(ExpressionSyntax node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
        name: ExpressionSyntax
        href: Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsNamedArgumentName(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 225
  summary: >-
    Is the node the name of a named argument of an invocation, object creation expression,

    constructor initializer, or element access, but not an attribute.
  syntax:
    content:
      CSharp: public static bool IsNamedArgumentName(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsFixedStatementExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 267
  summary: Is the expression the initializer in a fixed statement?
  syntax:
    content:
      CSharp: public static bool IsFixedStatementExpression(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: GetText(Accessibility)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 282
  syntax:
    content:
      CSharp: public static string GetText(Accessibility accessibility)
    parameters:
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    return:
      id: String
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)
- uid: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.yml
  name: IsLambdaBody(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/Syntax/SyntaxFacts.cs
    startLine: 371
  summary: >-
    Returns true if the specified  is a body of an anonymous method, lambda,

    or a part of a query clause that is syntactically translated to a lambda body.
  syntax:
    content:
      CSharp: public static bool IsLambdaBody(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)
