items:
- uid: Microsoft.CodeAnalysis.CSharpExtensions
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: CSharpExtensions
  fullName: Microsoft.CodeAnalysis.CSharpExtensions
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 14
  syntax:
    content:
      CSharp: public static class CSharpExtensions
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: Microsoft.CodeAnalysis.CSharpExtensions
  children:
  - Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  - Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IsKind(SyntaxToken, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 16
  syntax:
    content:
      CSharp: public static bool IsKind(this SyntaxToken token, SyntaxKind kind)
    parameters:
    - id: token
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IsKind(SyntaxTrivia, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 21
  syntax:
    content:
      CSharp: public static bool IsKind(this SyntaxTrivia trivia, SyntaxKind kind)
    parameters:
    - id: trivia
      type:
        id: Microsoft.CodeAnalysis.SyntaxTrivia
        name: SyntaxTrivia
        href: Microsoft.CodeAnalysis.SyntaxTrivia
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IsKind(SyntaxNode, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 26
  syntax:
    content:
      CSharp: public static bool IsKind(this SyntaxNode node, SyntaxKind kind)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IsKind(SyntaxNodeOrToken, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 31
  syntax:
    content:
      CSharp: public static bool IsKind(this SyntaxNodeOrToken nodeOrToken, SyntaxKind kind)
    parameters:
    - id: nodeOrToken
      type:
        id: Microsoft.CodeAnalysis.SyntaxNodeOrToken
        name: SyntaxNodeOrToken
        href: Microsoft.CodeAnalysis.SyntaxNodeOrToken
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IndexOf<TNode>(SyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 47
  summary: Returns the index of the first node of a specified kind in the node list.
  syntax:
    content:
      CSharp: 'public static int IndexOf<TNode>(this SyntaxList<TNode> list, SyntaxKind kind)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
      description: Node list.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: The [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml) to find.
    return:
      id: Int32
      description: Returns non-negative index if the list contains a node which matches , -1 otherwise.
  id: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: Any<TNode>(SyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 56
  summary: True if the list has at least one node of the specified kind.
  syntax:
    content:
      CSharp: 'public static bool Any<TNode>(this SyntaxList<TNode> list, SyntaxKind kind)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IndexOf<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 68
  summary: Returns the index of the first node of a specified kind in the node list.
  syntax:
    content:
      CSharp: 'public static int IndexOf<TNode>(this SeparatedSyntaxList<TNode> list, SyntaxKind kind)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
      description: Node list.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: The [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml) to find.
    return:
      id: Int32
      description: Returns non-negative index if the list contains a node which matches , -1 otherwise.
  id: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 77
  summary: True if the list has at least one node of the specified kind.
  syntax:
    content:
      CSharp: 'public static bool Any<TNode>(this SeparatedSyntaxList<TNode> list, SyntaxKind kind)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IndexOf(SyntaxTriviaList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 89
  summary: Returns the index of the first trivia of a specified kind in the trivia list.
  syntax:
    content:
      CSharp: public static int IndexOf(this SyntaxTriviaList list, SyntaxKind kind)
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
      description: Trivia list.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: The [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml) to find.
    return:
      id: Int32
      description: Returns non-negative index if the list contains a trivia which matches , -1 otherwise.
  id: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: Any(SyntaxTriviaList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 97
  summary: True if the list has at least one trivia of the specified kind.
  syntax:
    content:
      CSharp: public static bool Any(this SyntaxTriviaList list, SyntaxKind kind)
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxTriviaList
        name: SyntaxTriviaList
        href: Microsoft.CodeAnalysis.SyntaxTriviaList
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: IndexOf(SyntaxTokenList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 108
  summary: Returns the index of the first token of a specified kind in the token list.
  syntax:
    content:
      CSharp: public static int IndexOf(this SyntaxTokenList list, SyntaxKind kind)
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
      description: Token list.
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: The [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml) to find.
    return:
      id: Int32
      description: Returns non-negative index if the list contains a token which matches , -1 otherwise.
  id: Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
- uid: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  href: Microsoft.CodeAnalysis.CSharpExtensions.yml
  name: Any(SyntaxTokenList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/CSharp/Portable/CSharpExtensions.cs
    startLine: 119
  summary: Tests whether a list contains a token of a particular kind.
  syntax:
    content:
      CSharp: public static bool Any(this SyntaxTokenList list, SyntaxKind kind)
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxTokenList
        name: SyntaxTokenList
        href: Microsoft.CodeAnalysis.SyntaxTokenList
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.CSharp.SyntaxKind
        name: SyntaxKind
        href: Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml
      description: The [Microsoft.CodeAnalysis.CSharp.SyntaxKind](Microsoft.CodeAnalysis.CSharp.SyntaxKind.yml) to test for.
    return:
      id: Boolean
      description: Returns true if the list contains a token which matches
  id: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
