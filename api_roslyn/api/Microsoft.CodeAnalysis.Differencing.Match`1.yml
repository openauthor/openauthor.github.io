items:
- uid: Microsoft.CodeAnalysis.Differencing.Match`1
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: Match<TNode>
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>
  type: Class
  source:
    remote:
      path: src/Workspaces/Core/Portable/Differencing/Match.LongestCommonSubsequence.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Workspaces/Core/Portable/Differencing/Match.LongestCommonSubsequence.cs
    startLine: 8
  syntax:
    content:
      CSharp: public sealed class Match<TNode>
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1
  children:
  - Microsoft.CodeAnalysis.Differencing.Match`1.Comparer
  - Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot
  - Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot
  - Microsoft.CodeAnalysis.Differencing.Match`1.Matches
  - Microsoft.CodeAnalysis.Differencing.Match`1.ReverseMatches
  - Microsoft.CodeAnalysis.Differencing.Match`1.TryGetNewNode(`0,`0@)
  - Microsoft.CodeAnalysis.Differencing.Match`1.TryGetOldNode(`0,`0@)
  - Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits
  - Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.Comparer
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: Comparer
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.Comparer
  type: Property
  source:
    remote: &o0
      path: src/Workspaces/Core/Portable/Differencing/Match.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 315
  syntax:
    content:
      CSharp: public TreeComparer<TNode> Comparer { get; }
    parameters:
    - id: Comparer
      type:
        id: Microsoft.CodeAnalysis.Differencing.TreeComparer{`0}
        name: TreeComparer<TNode>
        href: Microsoft.CodeAnalysis.Differencing.TreeComparer{`0}
  id: Microsoft.CodeAnalysis.Differencing.Match`1.Comparer
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: OldRoot
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.OldRoot
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 323
  syntax:
    content:
      CSharp: public TNode OldRoot { get; }
    parameters:
    - id: OldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
  id: Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: NewRoot
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.NewRoot
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 331
  syntax:
    content:
      CSharp: public TNode NewRoot { get; }
    parameters:
    - id: NewRoot
      type:
        id: TNode
        name: TNode
        href: TNode
  id: Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.Matches
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: Matches
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.Matches
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 339
  syntax:
    content:
      CSharp: public IReadOnlyDictionary<TNode, TNode> Matches { get; }
    parameters:
    - id: Matches
      type:
        id: System.Collections.Generic.IReadOnlyDictionary{`0,`0}
        name: IReadOnlyDictionary<TNode, TNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1.Matches
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.ReverseMatches
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: ReverseMatches
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.ReverseMatches
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 347
  syntax:
    content:
      CSharp: public IReadOnlyDictionary<TNode, TNode> ReverseMatches { get; }
    parameters:
    - id: ReverseMatches
      type:
        id: System.Collections.Generic.IReadOnlyDictionary{`0,`0}
        name: IReadOnlyDictionary<TNode, TNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1.ReverseMatches
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetNewNode(`0,`0@)
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: TryGetNewNode(TNode, out TNode)
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetNewNode(TNode, out TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 355
  syntax:
    content:
      CSharp: public bool TryGetNewNode(TNode oldNode, out TNode newNode)
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetNewNode(`0,`0@)
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetOldNode(`0,`0@)
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: TryGetOldNode(TNode, out TNode)
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetOldNode(TNode, out TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 360
  syntax:
    content:
      CSharp: public bool TryGetOldNode(TNode newNode, out TNode oldNode)
    parameters:
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetOldNode(`0,`0@)
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: GetTreeEdits()
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetTreeEdits()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 369
  summary: >-
    Returns an edit script (a sequence of edits) that transform [Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot](Microsoft.CodeAnalysis.Differencing.Match`1.yml) subtree

    to [Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot](Microsoft.CodeAnalysis.Differencing.Match`1.yml) subtree.
  syntax:
    content:
      CSharp: public EditScript<TNode> GetTreeEdits()
    parameters: []
    return:
      id: EditScript
      type:
        id: Microsoft.CodeAnalysis.Differencing.EditScript{`0}
        name: EditScript<TNode>
        href: Microsoft.CodeAnalysis.Differencing.EditScript{`0}
  id: Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits
- uid: Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yml
  name: GetSequenceEdits(IEnumerable<TNode>, IEnumerable<TNode>)
  fullName: Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetSequenceEdits(System.Collections.Generic.IEnumerable<TNode>, System.Collections.Generic.IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 379
  summary: >-
    Returns an edit script (a sequence of edits) that transform a sequence of nodes

    to a sequence of nodes .
  syntax:
    content:
      CSharp: public IEnumerable<Edit<TNode>> GetSequenceEdits(IEnumerable<TNode> oldNodes, IEnumerable<TNode> newNodes)
    parameters:
    - id: oldNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<TNode>
        isExternal: true
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: IEnumerable<TNode>
        isExternal: true
    return:
      id: IEnumerable
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Differencing.Edit{`0}}
        name: IEnumerable<Edit<TNode>>
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})
