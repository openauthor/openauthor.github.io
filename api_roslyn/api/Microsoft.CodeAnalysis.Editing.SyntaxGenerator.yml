items:
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SyntaxGenerator
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
  type: Class
  source:
    remote: &o0
      path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      key: e7db1294
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 21
  summary: >-
    A language agnostic factory for creating syntax nodes.



    This API can be used to create language specific syntax nodes that are semantically similar between languages.
  syntax:
    content:
      CSharp: 'public abstract class SyntaxGenerator : ILanguageService'
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
  children:
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace,System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.RefKind)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.String[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode,System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia``1(``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia``1(Microsoft.CodeAnalysis.SyntaxNode,``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia``1(``0)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(System.Object)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.ITypeSymbol[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(System.String,Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.ITypeSymbol)
  - Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DefaultRemoveOptions
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions
  type: Field
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 23
  syntax:
    content:
      CSharp: public static SyntaxRemoveOptions DefaultRemoveOptions;
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace,System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetGenerator(Workspace, string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace, string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 28
  summary: Gets the [Microsoft.CodeAnalysis.Editing.SyntaxGenerator](Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml) for the specified language.
  syntax:
    content:
      CSharp: public static SyntaxGenerator GetGenerator(Workspace workspace, string language)
    parameters:
    - id: workspace
      type:
        id: Microsoft.CodeAnalysis.Workspace
        name: Workspace
        href: Microsoft.CodeAnalysis.Workspace.yml
    - id: language
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxGenerator
      type:
        id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
        name: SyntaxGenerator
        href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace,System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetGenerator(Document)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 36
  summary: Gets the [Microsoft.CodeAnalysis.Editing.SyntaxGenerator](Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml) for the language corresponding to the document.
  syntax:
    content:
      CSharp: public static SyntaxGenerator GetGenerator(Document document)
    parameters:
    - id: document
      type:
        id: Microsoft.CodeAnalysis.Document
        name: Document
        href: Microsoft.CodeAnalysis.Document.yml
    return:
      id: SyntaxGenerator
      type:
        id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator
        name: SyntaxGenerator
        href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetDeclaration(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 46
  summary: Returns the node if it is a declaration, the immediate enclosing declaration if one exists, or null.
  syntax:
    content:
      CSharp: public SyntaxNode GetDeclaration(SyntaxNode node)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetDeclaration(SyntaxNode, DeclarationKind)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Editing.DeclarationKind)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 66
  summary: Returns the enclosing declaration of the specified kind or null.
  syntax:
    content:
      CSharp: public SyntaxNode GetDeclaration(SyntaxNode node, DeclarationKind kind)
    parameters:
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationKind
        name: DeclarationKind
        href: Microsoft.CodeAnalysis.Editing.DeclarationKind.yml
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: FieldDeclaration(string, SyntaxNode, Accessibility, DeclarationModifiers, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(string, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 86
  summary: Creates a field declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode FieldDeclaration(string name, SyntaxNode type, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, SyntaxNode initializer = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: FieldDeclaration(IFieldSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 96
  summary: Creates a field declaration matching an existing field symbol.
  syntax:
    content:
      CSharp: public SyntaxNode FieldDeclaration(IFieldSymbol field)
    parameters:
    - id: field
      type:
        id: Microsoft.CodeAnalysis.IFieldSymbol
        name: IFieldSymbol
        href: Microsoft.CodeAnalysis.IFieldSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: FieldDeclaration(IFieldSymbol, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 105
  summary: Creates a field declaration matching an existing field symbol.
  syntax:
    content:
      CSharp: public SyntaxNode FieldDeclaration(IFieldSymbol field, SyntaxNode initializer)
    parameters:
    - id: field
      type:
        id: Microsoft.CodeAnalysis.IFieldSymbol
        name: IFieldSymbol
        href: Microsoft.CodeAnalysis.IFieldSymbol
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: MethodDeclaration(string, IEnumerable<SyntaxNode>, IEnumerable<string>, SyntaxNode, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<string>, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 118
  summary: Creates a method declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode MethodDeclaration(string name, IEnumerable<SyntaxNode> parameters = null, IEnumerable<string> typeParameters = null, SyntaxNode returnType = null, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> statements = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: MethodDeclaration(IMethodSymbol, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 130
  summary: Creates a method declaration matching an existing method symbol.
  syntax:
    content:
      CSharp: public SyntaxNode MethodDeclaration(IMethodSymbol method, IEnumerable<SyntaxNode> statements = null)
    parameters:
    - id: method
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: Microsoft.CodeAnalysis.IMethodSymbol
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.RefKind)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ParameterDeclaration(string, SyntaxNode, SyntaxNode, RefKind)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(string, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.RefKind)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 151
  summary: Creates a parameter declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ParameterDeclaration(string name, SyntaxNode type = null, SyntaxNode initializer = null, RefKind refKind = 0)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: refKind
      type:
        id: Microsoft.CodeAnalysis.RefKind
        name: RefKind
        href: Microsoft.CodeAnalysis.RefKind
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.RefKind)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ParameterDeclaration(IParameterSymbol, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 160
  summary: Creates a parameter declaration matching an existing parameter symbol.
  syntax:
    content:
      CSharp: public SyntaxNode ParameterDeclaration(IParameterSymbol symbol, SyntaxNode initializer = null)
    parameters:
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.IParameterSymbol
        name: IParameterSymbol
        href: Microsoft.CodeAnalysis.IParameterSymbol
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: PropertyDeclaration(string, SyntaxNode, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(string, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 172
  summary: Creates a property declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode PropertyDeclaration(string name, SyntaxNode type, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> getAccessorStatements = null, IEnumerable<SyntaxNode> setAccessorStatements = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: getAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: setAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: PropertyDeclaration(IPropertySymbol, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 183
  summary: Creates a property declaration using an existing property symbol as a signature.
  syntax:
    content:
      CSharp: public SyntaxNode PropertyDeclaration(IPropertySymbol property, IEnumerable<SyntaxNode> getAccessorStatements = null, IEnumerable<SyntaxNode> setAccessorStatements = null)
    parameters:
    - id: property
      type:
        id: Microsoft.CodeAnalysis.IPropertySymbol
        name: IPropertySymbol
        href: Microsoft.CodeAnalysis.IPropertySymbol
    - id: getAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: setAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IndexerDeclaration(IEnumerable<SyntaxNode>, SyntaxNode, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 200
  summary: Creates an indexer declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode IndexerDeclaration(IEnumerable<SyntaxNode> parameters, SyntaxNode type, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> getAccessorStatements = null, IEnumerable<SyntaxNode> setAccessorStatements = null)
    parameters:
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: getAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: setAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IndexerDeclaration(IPropertySymbol, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 211
  summary: Creates an indexer declaration matching an existing indexer symbol.
  syntax:
    content:
      CSharp: public SyntaxNode IndexerDeclaration(IPropertySymbol indexer, IEnumerable<SyntaxNode> getAccessorStatements = null, IEnumerable<SyntaxNode> setAccessorStatements = null)
    parameters:
    - id: indexer
      type:
        id: Microsoft.CodeAnalysis.IPropertySymbol
        name: IPropertySymbol
        href: Microsoft.CodeAnalysis.IPropertySymbol
    - id: getAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: setAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: EventDeclaration(string, SyntaxNode, Accessibility, DeclarationModifiers)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(string, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 228
  summary: Creates an event declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode EventDeclaration(string name, SyntaxNode type, Accessibility accessibility = 0, DeclarationModifiers modifiers = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: EventDeclaration(IEventSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 237
  summary: Creates an event declaration from an existing event symbol
  syntax:
    content:
      CSharp: public SyntaxNode EventDeclaration(IEventSymbol symbol)
    parameters:
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.IEventSymbol
        name: IEventSymbol
        href: Microsoft.CodeAnalysis.IEventSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CustomEventDeclaration(string, SyntaxNode, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(string, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 249
  summary: Creates a custom event declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode CustomEventDeclaration(string name, SyntaxNode type, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> parameters = null, IEnumerable<SyntaxNode> addAccessorStatements = null, IEnumerable<SyntaxNode> removeAccessorStatements = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: addAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: removeAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CustomEventDeclaration(IEventSymbol, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 261
  summary: Creates a custom event declaration from an existing event symbol.
  syntax:
    content:
      CSharp: public SyntaxNode CustomEventDeclaration(IEventSymbol symbol, IEnumerable<SyntaxNode> addAccessorStatements = null, IEnumerable<SyntaxNode> removeAccessorStatements = null)
    parameters:
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.IEventSymbol
        name: IEventSymbol
        href: Microsoft.CodeAnalysis.IEventSymbol
    - id: addAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: removeAccessorStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ConstructorDeclaration(string, IEnumerable<SyntaxNode>, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 282
  summary: Creates a constructor declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ConstructorDeclaration(string containingTypeName = null, IEnumerable<SyntaxNode> parameters = null, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> baseConstructorArguments = null, IEnumerable<SyntaxNode> statements = null)
    parameters:
    - id: containingTypeName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: baseConstructorArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ConstructorDeclaration(IMethodSymbol, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 293
  summary: Create a constructor declaration using
  syntax:
    content:
      CSharp: public SyntaxNode ConstructorDeclaration(IMethodSymbol constructorMethod, IEnumerable<SyntaxNode> baseConstructorArguments = null, IEnumerable<SyntaxNode> statements = null)
    parameters:
    - id: constructorMethod
      type:
        id: Microsoft.CodeAnalysis.IMethodSymbol
        name: IMethodSymbol
        href: Microsoft.CodeAnalysis.IMethodSymbol
    - id: baseConstructorArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AsPublicInterfaceImplementation(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 311
  summary: >-
    Converts method, property and indexer declarations into public interface implementations.

    This is equivalent to an implicit C# interface implementation (you can access it via the interface or directly via the named member.)
  syntax:
    content:
      CSharp: public abstract SyntaxNode AsPublicInterfaceImplementation(SyntaxNode declaration, SyntaxNode interfaceType)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: interfaceType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AsPrivateInterfaceImplementation(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 317
  summary: >-
    Converts method, property and indexer declarations into private interface implementations.

    This is equivalent to a C# explicit interface implementation (you can declare it for access via the interface, but cannot call it directly).
  syntax:
    content:
      CSharp: public abstract SyntaxNode AsPrivateInterfaceImplementation(SyntaxNode declaration, SyntaxNode interfaceType)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: interfaceType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ClassDeclaration(string, IEnumerable<string>, Accessibility, DeclarationModifiers, SyntaxNode, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(string, System.Collections.Generic.IEnumerable<string>, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 322
  summary: Creates a class declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ClassDeclaration(string name, IEnumerable<string> typeParameters = null, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, SyntaxNode baseType = null, IEnumerable<SyntaxNode> interfaceTypes = null, IEnumerable<SyntaxNode> members = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: baseType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: interfaceTypes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: StructDeclaration(string, IEnumerable<string>, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(string, System.Collections.Generic.IEnumerable<string>, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 334
  summary: Creates a struct declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode StructDeclaration(string name, IEnumerable<string> typeParameters = null, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> interfaceTypes = null, IEnumerable<SyntaxNode> members = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: interfaceTypes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InterfaceDeclaration(string, IEnumerable<string>, Accessibility, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(string, System.Collections.Generic.IEnumerable<string>, Microsoft.CodeAnalysis.Accessibility, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 345
  summary: Creates a interface declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InterfaceDeclaration(string name, IEnumerable<string> typeParameters = null, Accessibility accessibility = 0, IEnumerable<SyntaxNode> interfaceTypes = null, IEnumerable<SyntaxNode> members = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: interfaceTypes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: EnumDeclaration(string, Accessibility, DeclarationModifiers, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(string, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 355
  summary: Creates an enum declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode EnumDeclaration(string name, Accessibility accessibility = 0, DeclarationModifiers modifiers = null, IEnumerable<SyntaxNode> members = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: EnumMember(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 364
  summary: Creates an enum member
  syntax:
    content:
      CSharp: public abstract SyntaxNode EnumMember(string name, SyntaxNode expression = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DelegateDeclaration(string, IEnumerable<SyntaxNode>, IEnumerable<string>, SyntaxNode, Accessibility, DeclarationModifiers)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<string>, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility, Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 369
  summary: Creates a delegate declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode DelegateDeclaration(string name, IEnumerable<SyntaxNode> parameters = null, IEnumerable<string> typeParameters = null, SyntaxNode returnType = null, Accessibility accessibility = 0, DeclarationModifiers modifiers = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    - id: returnType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Declaration(ISymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 380
  summary: Creates a declaration matching an existing symbol.
  syntax:
    content:
      CSharp: public SyntaxNode Declaration(ISymbol symbol)
    parameters:
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeParameters(SyntaxNode, IEnumerable<string>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<string>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 540
  summary: Converts a declaration (method, class, etc) into a declaration with type parameters.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithTypeParameters(SyntaxNode declaration, IEnumerable<string> typeParameters)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeParameters
      type:
        id: System.Collections.Generic.IEnumerable{System.String}
        name: IEnumerable<string>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.String[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeParameters(SyntaxNode, params string[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode, params string[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 545
  summary: Converts a declaration (method, class, etc) into a declaration with type parameters.
  syntax:
    content:
      CSharp: public SyntaxNode WithTypeParameters(SyntaxNode declaration, params string[] typeParameters)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeParameters
      type:
        id: System.Array
        name: string[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.String[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeConstraint(SyntaxNode, string, SpecialTypeConstraintKind, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode, string, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 553
  summary: Adds a type constraint to a type parameter of a declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithTypeConstraint(SyntaxNode declaration, string typeParameterName, SpecialTypeConstraintKind kinds, IEnumerable<SyntaxNode> types = null)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeParameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: kinds
      type:
        id: Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind
        name: SpecialTypeConstraintKind
        href: Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.yml
    - id: types
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeConstraint(SyntaxNode, string, SpecialTypeConstraintKind, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode, string, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 558
  summary: Adds a type constraint to a type parameter of a declaration.
  syntax:
    content:
      CSharp: public SyntaxNode WithTypeConstraint(SyntaxNode declaration, string typeParameterName, SpecialTypeConstraintKind kinds, params SyntaxNode[] types)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeParameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: kinds
      type:
        id: Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind
        name: SpecialTypeConstraintKind
        href: Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind.yml
    - id: types
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeConstraint(SyntaxNode, string, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode, string, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 566
  summary: Adds a type constraint to a type parameter of a declaration.
  syntax:
    content:
      CSharp: public SyntaxNode WithTypeConstraint(SyntaxNode declaration, string typeParameterName, params SyntaxNode[] types)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeParameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: types
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceDeclaration(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 576
  summary: Creates a namespace declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode NamespaceDeclaration(SyntaxNode name, IEnumerable<SyntaxNode> declarations)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The name of the namespace.
    - id: declarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: Zero or more namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceDeclaration(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 583
  summary: Creates a namespace declaration.
  syntax:
    content:
      CSharp: public SyntaxNode NamespaceDeclaration(SyntaxNode name, params SyntaxNode[] declarations)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The name of the namespace.
    - id: declarations
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
      description: Zero or more namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceDeclaration(string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 593
  summary: Creates a namespace declaration.
  syntax:
    content:
      CSharp: public SyntaxNode NamespaceDeclaration(string name, IEnumerable<SyntaxNode> declarations)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
      description: The name of the namespace.
    - id: declarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: Zero or more namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceDeclaration(string, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(string, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 603
  summary: Creates a namespace declaration.
  syntax:
    content:
      CSharp: public SyntaxNode NamespaceDeclaration(string name, params SyntaxNode[] declarations)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
      description: The name of the namespace.
    - id: declarations
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
      description: Zero or more namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CompilationUnit(IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 612
  summary: Creates a compilation unit declaration
  syntax:
    content:
      CSharp: public abstract SyntaxNode CompilationUnit(IEnumerable<SyntaxNode> declarations)
    parameters:
    - id: declarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: Zero or more namespace import, namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CompilationUnit(params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 618
  summary: Creates a compilation unit declaration
  syntax:
    content:
      CSharp: public SyntaxNode CompilationUnit(params SyntaxNode[] declarations)
    parameters:
    - id: declarations
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
      description: Zero or more namespace import, namespace or type declarations.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceImportDeclaration(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 627
  summary: Creates a namespace import declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode NamespaceImportDeclaration(SyntaxNode name)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The name of the namespace being imported.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NamespaceImportDeclaration(string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 633
  summary: Creates a namespace import declaration.
  syntax:
    content:
      CSharp: public SyntaxNode NamespaceImportDeclaration(string name)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
      description: The name of the namespace being imported.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Attribute(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 641
  summary: Creates an attribute.
  syntax:
    content:
      CSharp: public abstract SyntaxNode Attribute(SyntaxNode name, IEnumerable<SyntaxNode> attributeArguments = null)
    parameters:
    - id: name
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Attribute(string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 646
  summary: Creates an attribute.
  syntax:
    content:
      CSharp: public SyntaxNode Attribute(string name, IEnumerable<SyntaxNode> attributeArguments = null)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: attributeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Attribute(string, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(string, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 654
  summary: Creates an attribute.
  syntax:
    content:
      CSharp: public SyntaxNode Attribute(string name, params SyntaxNode[] attributeArguments)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: attributeArguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Attribute(AttributeData)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 662
  summary: Creates an attribute matching existing attribute data.
  syntax:
    content:
      CSharp: public SyntaxNode Attribute(AttributeData attribute)
    parameters:
    - id: attribute
      type:
        id: Microsoft.CodeAnalysis.AttributeData
        name: AttributeData
        href: Microsoft.CodeAnalysis.AttributeData
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AttributeArgument(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 681
  summary: Creates an attribute argument.
  syntax:
    content:
      CSharp: public abstract SyntaxNode AttributeArgument(string name, SyntaxNode expression)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AttributeArgument(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 686
  summary: Creates an attribute argument.
  syntax:
    content:
      CSharp: public SyntaxNode AttributeArgument(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: RemoveAllAttributes(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 694
  summary: Removes all attributes from the declaration, including return attributes.
  syntax:
    content:
      CSharp: public SyntaxNode RemoveAllAttributes(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetAttributes(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 702
  summary: Gets the attributes of a declaration, not including the return attributes.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetAttributes(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertAttributes(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 707
  summary: Creates a new instance of the declaration with the attributes inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertAttributes(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: attributes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertAttributes(SyntaxNode, int, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode, int, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 712
  summary: Creates a new instance of the declaration with the attributes inserted.
  syntax:
    content:
      CSharp: public SyntaxNode InsertAttributes(SyntaxNode declaration, int index, params SyntaxNode[] attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: attributes
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddAttributes(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 720
  summary: Creates a new instance of a declaration with the specified attributes added.
  syntax:
    content:
      CSharp: public SyntaxNode AddAttributes(SyntaxNode declaration, IEnumerable<SyntaxNode> attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddAttributes(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 728
  summary: Creates a new instance of a declaration with the specified attributes added.
  syntax:
    content:
      CSharp: public SyntaxNode AddAttributes(SyntaxNode declaration, params SyntaxNode[] attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributes
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetReturnAttributes(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 736
  summary: Gets the return attributes from the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetReturnAttributes(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertReturnAttributes(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 741
  summary: Creates a new instance of a method declaration with return attributes inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertReturnAttributes(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: attributes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertReturnAttributes(SyntaxNode, int, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode, int, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 746
  summary: Creates a new instance of a method declaration with return attributes inserted.
  syntax:
    content:
      CSharp: public SyntaxNode InsertReturnAttributes(SyntaxNode declaration, int index, params SyntaxNode[] attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: attributes
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddReturnAttributes(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 754
  summary: Creates a new instance of a method declaration with return attributes added.
  syntax:
    content:
      CSharp: public SyntaxNode AddReturnAttributes(SyntaxNode declaration, IEnumerable<SyntaxNode> attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributes
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddReturnAttributes(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 762
  summary: Creates a new instance of a method declaration node with return attributes added.
  syntax:
    content:
      CSharp: public SyntaxNode AddReturnAttributes(SyntaxNode declaration, params SyntaxNode[] attributes)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributes
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetAttributeArguments(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 770
  summary: Gets the attribute arguments for the attribute declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetAttributeArguments(SyntaxNode attributeDeclaration)
    parameters:
    - id: attributeDeclaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertAttributeArguments(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 775
  summary: Creates a new instance of the attribute with the arguments inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertAttributeArguments(SyntaxNode attributeDeclaration, int index, IEnumerable<SyntaxNode> attributeArguments)
    parameters:
    - id: attributeDeclaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: attributeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddAttributeArguments(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 780
  summary: Creates a new instance of the attribute with the arguments added.
  syntax:
    content:
      CSharp: public SyntaxNode AddAttributeArguments(SyntaxNode attributeDeclaration, IEnumerable<SyntaxNode> attributeArguments)
    parameters:
    - id: attributeDeclaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: attributeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetNamespaceImports(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 788
  summary: Gets the namespace imports that are part of the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetNamespaceImports(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertNamespaceImports(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 793
  summary: Creates a new instance of the declaration with the namespace imports inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertNamespaceImports(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> imports)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: imports
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertNamespaceImports(SyntaxNode, int, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode, int, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 798
  summary: Creates a new instance of the declaration with the namespace imports inserted.
  syntax:
    content:
      CSharp: public SyntaxNode InsertNamespaceImports(SyntaxNode declaration, int index, params SyntaxNode[] imports)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: imports
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddNamespaceImports(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 806
  summary: Creates a new instance of the declaration with the namespace imports added.
  syntax:
    content:
      CSharp: public SyntaxNode AddNamespaceImports(SyntaxNode declaration, IEnumerable<SyntaxNode> imports)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: imports
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddNamespaceImports(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 814
  summary: Creates a new instance of the declaration with the namespace imports added.
  syntax:
    content:
      CSharp: public SyntaxNode AddNamespaceImports(SyntaxNode declaration, params SyntaxNode[] imports)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: imports
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetMembers(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 822
  summary: Gets the current members of the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetMembers(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertMembers(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 827
  summary: Creates a new instance of the declaration with the members inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertMembers(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> members)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertMembers(SyntaxNode, int, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode, int, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 832
  summary: Creates a new instance of the declaration with the members inserted.
  syntax:
    content:
      CSharp: public SyntaxNode InsertMembers(SyntaxNode declaration, int index, params SyntaxNode[] members)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: members
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddMembers(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 840
  summary: Creates a new instance of the declaration with the members added to the end.
  syntax:
    content:
      CSharp: public SyntaxNode AddMembers(SyntaxNode declaration, IEnumerable<SyntaxNode> members)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: members
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddMembers(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 848
  summary: Creates a new instance of the declaration with the members added to the end.
  syntax:
    content:
      CSharp: public SyntaxNode AddMembers(SyntaxNode declaration, params SyntaxNode[] members)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: members
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetAccessibility(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 856
  summary: Gets the accessibility of the declaration.
  syntax:
    content:
      CSharp: public abstract Accessibility GetAccessibility(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: Accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithAccessibility(SyntaxNode, Accessibility)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Accessibility)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 861
  summary: Changes the accessibility of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithAccessibility(SyntaxNode declaration, Accessibility accessibility)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessibility
      type:
        id: Microsoft.CodeAnalysis.Accessibility
        name: Accessibility
        href: Microsoft.CodeAnalysis.Accessibility
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetModifiers(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 866
  summary: Gets the [Microsoft.CodeAnalysis.Editing.DeclarationModifiers](Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml) for the declaration.
  syntax:
    content:
      CSharp: public abstract DeclarationModifiers GetModifiers(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: DeclarationModifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithModifiers(SyntaxNode, DeclarationModifiers)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 871
  summary: Changes the [Microsoft.CodeAnalysis.Editing.DeclarationModifiers](Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml) for the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithModifiers(SyntaxNode declaration, DeclarationModifiers modifiers)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: modifiers
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationModifiers
        name: DeclarationModifiers
        href: Microsoft.CodeAnalysis.Editing.DeclarationModifiers.yml
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetDeclarationKind(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 876
  summary: Gets the [Microsoft.CodeAnalysis.Editing.DeclarationKind](Microsoft.CodeAnalysis.Editing.DeclarationKind.yml) for the declaration.
  syntax:
    content:
      CSharp: public abstract DeclarationKind GetDeclarationKind(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: DeclarationKind
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationKind
        name: DeclarationKind
        href: Microsoft.CodeAnalysis.Editing.DeclarationKind.yml
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetName(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 881
  summary: Gets the name of the declaration.
  syntax:
    content:
      CSharp: public abstract string GetName(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: String
      type:
        id: System.String
        name: string
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode,System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithName(SyntaxNode, string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode, string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 886
  summary: Changes the name of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithName(SyntaxNode declaration, string name)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode,System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetType(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 891
  summary: Gets the type of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode GetType(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithType(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 896
  summary: Changes the type of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithType(SyntaxNode declaration, SyntaxNode type)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetParameters(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 901
  summary: Gets the list of parameters for the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetParameters(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertParameters(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 906
  summary: Inserts the parameters at the specified index into the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertParameters(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> parameters)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddParameters(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 911
  summary: Adds the parameters to the declaration.
  syntax:
    content:
      CSharp: public SyntaxNode AddParameters(SyntaxNode declaration, IEnumerable<SyntaxNode> parameters)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: parameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 919
  summary: Gets the expression associated with the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode GetExpression(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 924
  summary: Changes the expression associated with the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithExpression(SyntaxNode declaration, SyntaxNode expression)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetStatements(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 929
  summary: Gets the statements for the body of the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetStatements(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithStatements(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 934
  summary: Changes the statements for the body of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithStatements(SyntaxNode declaration, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetAccessors(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 939
  summary: Gets the accessors for the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetAccessors(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetAccessor(SyntaxNode, DeclarationKind)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Editing.DeclarationKind)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 944
  summary: Gets the accessor of the specified kind for the declaration.
  syntax:
    content:
      CSharp: public SyntaxNode GetAccessor(SyntaxNode declaration, DeclarationKind kind)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.Editing.DeclarationKind
        name: DeclarationKind
        href: Microsoft.CodeAnalysis.Editing.DeclarationKind.yml
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertAccessors(SyntaxNode, int, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode, int, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 952
  summary: Creates a new instance of the declaration with the accessors inserted.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InsertAccessors(SyntaxNode declaration, int index, IEnumerable<SyntaxNode> accessors)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: index
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: accessors
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddAccessors(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 957
  summary: Creates a new instance of the declaration with the accessors added.
  syntax:
    content:
      CSharp: public SyntaxNode AddAccessors(SyntaxNode declaration, IEnumerable<SyntaxNode> accessors)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: accessors
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetGetAccessorStatements(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 965
  summary: Gets the statements for the body of the get-accessor of the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetGetAccessorStatements(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithGetAccessorStatements(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 970
  summary: Changes the statements for the body of the get-accessor of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithGetAccessorStatements(SyntaxNode declaration, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetSetAccessorStatements(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 975
  summary: Gets the statements for the body of the set-accessor of the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetSetAccessorStatements(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithSetAccessorStatements(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 980
  summary: Changes the statements for the body of the set-accessor of the declaration.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithSetAccessorStatements(SyntaxNode declaration, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GetBaseAndInterfaceTypes(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 985
  summary: Gets a list of the base and interface types for the declaration.
  syntax:
    content:
      CSharp: public abstract IReadOnlyList<SyntaxNode> GetBaseAndInterfaceTypes(SyntaxNode declaration)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: IReadOnlyList
      type:
        id: System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.SyntaxNode}
        name: IReadOnlyList<SyntaxNode>
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddBaseType(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 990
  summary: Adds a base type to the declaration
  syntax:
    content:
      CSharp: public abstract SyntaxNode AddBaseType(SyntaxNode declaration, SyntaxNode baseType)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: baseType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddInterfaceType(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 995
  summary: Adds an interface type to the declaration
  syntax:
    content:
      CSharp: public abstract SyntaxNode AddInterfaceType(SyntaxNode declaration, SyntaxNode interfaceType)
    parameters:
    - id: declaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: interfaceType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReplaceNode(SyntaxNode, SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1003
  summary: Replaces the node in the root's tree with the new node.
  syntax:
    content:
      CSharp: public virtual SyntaxNode ReplaceNode(SyntaxNode root, SyntaxNode node, SyntaxNode newDeclaration)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: newDeclaration
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertNodesBefore(SyntaxNode, SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1018
  summary: Inserts the new node before the specified declaration.
  syntax:
    content:
      CSharp: public virtual SyntaxNode InsertNodesBefore(SyntaxNode root, SyntaxNode node, IEnumerable<SyntaxNode> newDeclarations)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: newDeclarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InsertNodesAfter(SyntaxNode, SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1026
  summary: Inserts the new node before the specified declaration.
  syntax:
    content:
      CSharp: public virtual SyntaxNode InsertNodesAfter(SyntaxNode root, SyntaxNode node, IEnumerable<SyntaxNode> newDeclarations)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: newDeclarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: RemoveNode(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1034
  summary: Removes the node from the sub tree starting at the root.
  syntax:
    content:
      CSharp: public virtual SyntaxNode RemoveNode(SyntaxNode root, SyntaxNode node)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: RemoveNodes(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1042
  summary: Removes all the declarations from the sub tree starting at the root.
  syntax:
    content:
      CSharp: public SyntaxNode RemoveNodes(SyntaxNode root, IEnumerable<SyntaxNode> declarations)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: declarations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia``1(``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: PreserveTrivia<TNode>(TNode, Func<TNode, SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia<TNode>(TNode, System.Func<TNode, Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1057
  syntax:
    content:
      CSharp: 'protected static SyntaxNode PreserveTrivia<TNode>(TNode node, Func<TNode, SyntaxNode> nodeChanger)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: nodeChanger
      type:
        id: System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode}
        name: Func<TNode, SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia``1(``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReplaceWithTrivia(SyntaxNode, SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1075
  syntax:
    content:
      CSharp: protected static SyntaxNode ReplaceWithTrivia(SyntaxNode root, SyntaxNode original, SyntaxNode replacement)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: original
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: replacement
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia``1(Microsoft.CodeAnalysis.SyntaxNode,``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReplaceWithTrivia<TNode>(SyntaxNode, TNode, Func<TNode, SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia<TNode>(Microsoft.CodeAnalysis.SyntaxNode, TNode, System.Func<TNode, Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1084
  syntax:
    content:
      CSharp: 'protected static SyntaxNode ReplaceWithTrivia<TNode>(SyntaxNode root, TNode original, Func<TNode, SyntaxNode> replacer)where TNode : SyntaxNode'
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: original
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: replacer
      type:
        id: System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode}
        name: Func<TNode, SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia``1(Microsoft.CodeAnalysis.SyntaxNode,``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReplaceWithTrivia(SyntaxNode, SyntaxToken, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1090
  syntax:
    content:
      CSharp: protected static SyntaxNode ReplaceWithTrivia(SyntaxNode root, SyntaxToken original, SyntaxToken replacement)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: original
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    - id: replacement
      type:
        id: Microsoft.CodeAnalysis.SyntaxToken
        name: SyntaxToken
        href: Microsoft.CodeAnalysis.SyntaxToken
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia``1(``0)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ClearTrivia<TNode>(TNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia<TNode>(TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1102
  summary: Creates a new instance of the node with the leading and trailing trivia removed and replaced with elastic markers.
  syntax:
    content:
      CSharp: 'public abstract TNode ClearTrivia<TNode>(TNode node)where TNode : SyntaxNode'
    parameters:
    - id: node
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: TNode
      type:
        id: TNode
        name: TNode
        href: TNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia``1(``0)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IndexOf<T>(IReadOnlyList<T>, T)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf<T>(System.Collections.Generic.IReadOnlyList<T>, T)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1104
  syntax:
    content:
      CSharp: protected int IndexOf<T>(IReadOnlyList<T> list, T element)
    parameters:
    - id: list
      type:
        id: System.Collections.Generic.IReadOnlyList{``0}
        name: IReadOnlyList<T>
        isExternal: true
    - id: element
      type:
        id: T
        name: T
        href: T
    return:
      id: Int32
      type:
        id: System.Int32
        name: int
        isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReplaceRange(SyntaxNode, SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1117
  syntax:
    content:
      CSharp: protected static SyntaxNode ReplaceRange(SyntaxNode root, SyntaxNode node, IEnumerable<SyntaxNode> replacements)
    parameters:
    - id: root
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: node
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: replacements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: RemoveRange<TNode>(SeparatedSyntaxList<TNode>, int, int)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>, int, int)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1126
  syntax:
    content:
      CSharp: 'protected static SeparatedSyntaxList<TNode> RemoveRange<TNode>(SeparatedSyntaxList<TNode> list, int offset, int count)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: SeparatedSyntaxList
      type:
        id: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
        name: SeparatedSyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SeparatedSyntaxList{``0}
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: RemoveRange<TNode>(SyntaxList<TNode>, int, int)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode>, int, int)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1137
  syntax:
    content:
      CSharp: 'protected static SyntaxList<TNode> RemoveRange<TNode>(SyntaxList<TNode> list, int offset, int count)where TNode : SyntaxNode'
    parameters:
    - id: list
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
    - id: offset
      type:
        id: System.Int32
        name: int
        isExternal: true
    - id: count
      type:
        id: System.Int32
        name: int
        isExternal: true
    return:
      id: SyntaxList
      type:
        id: Microsoft.CodeAnalysis.SyntaxList{``0}
        name: SyntaxList<TNode>
        href: Microsoft.CodeAnalysis.SyntaxList{``0}
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ExpressionStatement(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1156
  summary: >-
    Creates statement that allows an expression to execute in a statement context.

    This is typically an invocation or assignment expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ExpressionStatement(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: The expression that is to be executed. This is usually a method invocation expression.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReturnStatement(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1162
  summary: Creates a statement that can be used to return a value from a method body.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ReturnStatement(SyntaxNode expression = null)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: An optional expression that can be returned.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ThrowStatement(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1168
  summary: Creates a statement that can be used to throw and exception.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ThrowStatement(SyntaxNode expression = null)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: An optional expression that can be thrown.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LocalDeclarationStatement(SyntaxNode, string, SyntaxNode, bool)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode, string, Microsoft.CodeAnalysis.SyntaxNode, bool)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1173
  summary: Creates a statement that declares a single local variable.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LocalDeclarationStatement(SyntaxNode type, string identifier, SyntaxNode initializer = null, bool isConst = false)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: isConst
      type:
        id: System.Boolean
        name: bool
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LocalDeclarationStatement(ITypeSymbol, string, SyntaxNode, bool)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol, string, Microsoft.CodeAnalysis.SyntaxNode, bool)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1178
  summary: Creates a statement that declares a single local variable.
  syntax:
    content:
      CSharp: public SyntaxNode LocalDeclarationStatement(ITypeSymbol type, string name, SyntaxNode initializer = null, bool isConst = false)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: isConst
      type:
        id: System.Boolean
        name: bool
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LocalDeclarationStatement(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1186
  summary: Creates a statement that declares a single local variable.
  syntax:
    content:
      CSharp: public SyntaxNode LocalDeclarationStatement(string name, SyntaxNode initializer)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: initializer
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IfStatement(SyntaxNode, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1197
  summary: Creates an if-statement
  syntax:
    content:
      CSharp: public abstract SyntaxNode IfStatement(SyntaxNode condition, IEnumerable<SyntaxNode> trueStatements, IEnumerable<SyntaxNode> falseStatements = null)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: A condition expression.
    - id: trueStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: The statements that are executed if the condition is true.
    - id: falseStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: The statements that are executed if the condition is false.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IfStatement(SyntaxNode, IEnumerable<SyntaxNode>, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1205
  summary: Creates an if statement
  syntax:
    content:
      CSharp: public SyntaxNode IfStatement(SyntaxNode condition, IEnumerable<SyntaxNode> trueStatements, SyntaxNode falseStatement)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: A condition expression.
    - id: trueStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
      description: The statements that are executed if the condition is true.
    - id: falseStatement
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
      description: A single statement that is executed if the condition is false.
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SwitchStatement(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1213
  summary: Creates a switch statement that branches to individual sections based on the value of the specified expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode SwitchStatement(SyntaxNode expression, IEnumerable<SyntaxNode> sections)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: sections
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SwitchStatement(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1218
  summary: Creates a switch statement that branches to individual sections based on the value of the specified expression.
  syntax:
    content:
      CSharp: public SyntaxNode SwitchStatement(SyntaxNode expression, params SyntaxNode[] sections)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: sections
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SwitchSection(IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1226
  summary: Creates a section for a switch statement.
  syntax:
    content:
      CSharp: public abstract SyntaxNode SwitchSection(IEnumerable<SyntaxNode> caseExpressions, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: caseExpressions
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SwitchSection(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1231
  summary: Creates a single-case section a switch statement.
  syntax:
    content:
      CSharp: public SyntaxNode SwitchSection(SyntaxNode caseExpression, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: caseExpression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DefaultSwitchSection(IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1239
  summary: Creates a default section for a switch statement.
  syntax:
    content:
      CSharp: public abstract SyntaxNode DefaultSwitchSection(IEnumerable<SyntaxNode> statements)
    parameters:
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ExitSwitchStatement()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1244
  summary: Create a statement that exits a switch statement and continues after it.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ExitSwitchStatement()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: UsingStatement(SyntaxNode, string, SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode, string, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1249
  summary: Creates a statement that represents a using-block pattern.
  syntax:
    content:
      CSharp: public abstract SyntaxNode UsingStatement(SyntaxNode type, string name, SyntaxNode expression, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: UsingStatement(string, SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(string, Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1254
  summary: Creates a statement that represents a using-block pattern.
  syntax:
    content:
      CSharp: public SyntaxNode UsingStatement(string name, SyntaxNode expression, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: UsingStatement(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1262
  summary: Creates a statement that represents a using-block pattern.
  syntax:
    content:
      CSharp: public abstract SyntaxNode UsingStatement(SyntaxNode expression, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TryCatchStatement(IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1267
  summary: Creates a try-catch or try-catch-finally statement.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TryCatchStatement(IEnumerable<SyntaxNode> tryStatements, IEnumerable<SyntaxNode> catchClauses, IEnumerable<SyntaxNode> finallyStatements = null)
    parameters:
    - id: tryStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: catchClauses
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: finallyStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TryCatchStatement(IEnumerable<SyntaxNode>, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1272
  summary: Creates a try-catch or try-catch-finally statement.
  syntax:
    content:
      CSharp: public SyntaxNode TryCatchStatement(IEnumerable<SyntaxNode> tryStatements, params SyntaxNode[] catchClauses)
    parameters:
    - id: tryStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: catchClauses
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TryFinallyStatement(IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1280
  summary: Creates a try-finally statement.
  syntax:
    content:
      CSharp: public SyntaxNode TryFinallyStatement(IEnumerable<SyntaxNode> tryStatements, IEnumerable<SyntaxNode> finallyStatements)
    parameters:
    - id: tryStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: finallyStatements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CatchClause(SyntaxNode, string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode, string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1288
  summary: Creates a catch-clause.
  syntax:
    content:
      CSharp: public abstract SyntaxNode CatchClause(SyntaxNode type, string identifier, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CatchClause(ITypeSymbol, string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol, string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1293
  summary: Creates a catch-clause.
  syntax:
    content:
      CSharp: public SyntaxNode CatchClause(ITypeSymbol type, string identifer, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: identifer
      type:
        id: System.String
        name: string
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WhileStatement(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1301
  summary: Creates a while-loop statement
  syntax:
    content:
      CSharp: public abstract SyntaxNode WhileStatement(SyntaxNode condition, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DefaultExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1310
  summary: >-
    An expression that represents the default value of a type.

    This is typically a null value for reference types or a zero-filled value for value types.
  syntax:
    content:
      CSharp: public abstract SyntaxNode DefaultExpression(SyntaxNode type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DefaultExpression(ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1311
  syntax:
    content:
      CSharp: public abstract SyntaxNode DefaultExpression(ITypeSymbol type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ThisExpression()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1316
  summary: Creates an expression that denotes the containing method's this-parameter.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ThisExpression()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: BaseExpression()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1321
  summary: Creates an expression that denotes the containing method's base-parameter.
  syntax:
    content:
      CSharp: public abstract SyntaxNode BaseExpression()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(System.Object)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LiteralExpression(object)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(object)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1326
  summary: Creates a literal expression. This is typically numeric primitives, strings or chars.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LiteralExpression(object value)
    parameters:
    - id: value
      type:
        id: System.Object
        name: object
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(System.Object)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TypedConstantExpression(TypedConstant)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1331
  summary: Creates an expression for a typed constant.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TypedConstantExpression(TypedConstant value)
    parameters:
    - id: value
      type:
        id: Microsoft.CodeAnalysis.TypedConstant
        name: TypedConstant
        href: Microsoft.CodeAnalysis.TypedConstant
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: FalseLiteralExpression()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1336
  summary: Creates an expression that denotes the boolean false literal.
  syntax:
    content:
      CSharp: public SyntaxNode FalseLiteralExpression()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TrueLiteralExpression()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1344
  summary: Creates an expression that denotes the boolean true literal.
  syntax:
    content:
      CSharp: public SyntaxNode TrueLiteralExpression()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NullLiteralExpression()
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1352
  summary: Creates an expression that denotes the null literal.
  syntax:
    content:
      CSharp: public SyntaxNode NullLiteralExpression()
    parameters: []
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IdentifierName(string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1362
  summary: Creates an expression that denotes a simple identifier name.
  syntax:
    content:
      CSharp: public abstract SyntaxNode IdentifierName(string identifier)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GenericName(string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1367
  summary: Creates an expression that denotes a generic identifier name.
  syntax:
    content:
      CSharp: public abstract SyntaxNode GenericName(string identifier, IEnumerable<SyntaxNode> typeArguments)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GenericName(string, IEnumerable<ITypeSymbol>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ITypeSymbol>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1372
  summary: Creates an expression that denotes a generic identifier name.
  syntax:
    content:
      CSharp: public SyntaxNode GenericName(string identifier, IEnumerable<ITypeSymbol> typeArguments)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol}
        name: IEnumerable<ITypeSymbol>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GenericName(string, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1380
  summary: Creates an expression that denotes a generic identifier name.
  syntax:
    content:
      CSharp: public SyntaxNode GenericName(string identifier, params SyntaxNode[] typeArguments)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeArguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.ITypeSymbol[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GenericName(string, params ITypeSymbol[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(string, params Microsoft.CodeAnalysis.ITypeSymbol[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1388
  summary: Creates an expression that denotes a generic identifier name.
  syntax:
    content:
      CSharp: public SyntaxNode GenericName(string identifier, params ITypeSymbol[] typeArguments)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: typeArguments
      type:
        id: System.Array
        name: ITypeSymbol[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.ITypeSymbol[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeArguments(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1397
  summary: >-
    Converts an expression that ends in a name into an expression that ends in a generic name.

    If the expression already ends in a generic name, the new type arguments are used instead.
  syntax:
    content:
      CSharp: public abstract SyntaxNode WithTypeArguments(SyntaxNode expression, IEnumerable<SyntaxNode> typeArguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeArguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: WithTypeArguments(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1403
  summary: >-
    Converts an expression that ends in a name into an expression that ends in a generic name.

    If the expression already ends in a generic name, the new type arguments are used instead.
  syntax:
    content:
      CSharp: public SyntaxNode WithTypeArguments(SyntaxNode expression, params SyntaxNode[] typeArguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: typeArguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: QualifiedName(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1413
  summary: >-
    Creates a name expression that denotes a qualified name.

    The left operand can be any name expression.

    The right operand can be either and identifier or generic name.
  syntax:
    content:
      CSharp: public abstract SyntaxNode QualifiedName(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DottedName(string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1418
  summary: Creates a name expression from a dotted name string.
  syntax:
    content:
      CSharp: public SyntaxNode DottedName(string dottedName)
    parameters:
    - id: dottedName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TypeExpression(ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1448
  summary: Creates an expression that denotes a type.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TypeExpression(ITypeSymbol typeSymbol)
    parameters:
    - id: typeSymbol
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TypeExpression(SpecialType)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1453
  summary: Creates an expression that denotes a special type name.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TypeExpression(SpecialType specialType)
    parameters:
    - id: specialType
      type:
        id: Microsoft.CodeAnalysis.SpecialType
        name: SpecialType
        href: Microsoft.CodeAnalysis.SpecialType
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ArrayTypeExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1458
  summary: Creates an expression that denotes an array type.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ArrayTypeExpression(SyntaxNode type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NullableTypeExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1463
  summary: Creates an expression that denotes a nullable type.
  syntax:
    content:
      CSharp: public abstract SyntaxNode NullableTypeExpression(SyntaxNode type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AssignmentStatement(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1468
  summary: Creates an expression that denotes an assignment from the right argument to left argument.
  syntax:
    content:
      CSharp: public abstract SyntaxNode AssignmentStatement(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueEqualsExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1473
  summary: Creates an expression that denotes a value-type equality test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ValueEqualsExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReferenceEqualsExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1478
  summary: Creates an expression that denotes a reference-type equality test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ReferenceEqualsExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueNotEqualsExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1483
  summary: Creates an expression that denotes a value-type inequality test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ValueNotEqualsExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ReferenceNotEqualsExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1488
  summary: Creates an expression that denotes a reference-type inequality test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ReferenceNotEqualsExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LessThanExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1493
  summary: Creates an expression that denotes a less-than test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LessThanExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LessThanOrEqualExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1498
  summary: Creates an expression that denotes a less-than-or-equal test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LessThanOrEqualExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GreaterThanExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1503
  summary: Creates an expression that denotes a greater-than test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode GreaterThanExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: GreaterThanOrEqualExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1508
  summary: Creates an expression that denotes a greater-than-or-equal test operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode GreaterThanOrEqualExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: NegateExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1513
  summary: Creates an expression that denotes a unary negation operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode NegateExpression(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AddExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1518
  summary: Creates an expression that denotes an addition operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode AddExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: SubtractExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1523
  summary: Creates an expression that denotes an subtraction operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode SubtractExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: MultiplyExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1528
  summary: Creates an expression that denotes a multiplication operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode MultiplyExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: DivideExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1533
  summary: Creates an expression that denotes a division operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode DivideExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ModuloExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1538
  summary: Creates an expression that denotes a modulo operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ModuloExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: BitwiseAndExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1543
  summary: Creates an expression that denotes a bitwise-and operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode BitwiseAndExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: BitwiseOrExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1548
  summary: Creates an expression that denotes a bitwise-or operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode BitwiseOrExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: BitwiseNotExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1553
  summary: Creates an expression that denotes a bitwise-not operation
  syntax:
    content:
      CSharp: public abstract SyntaxNode BitwiseNotExpression(SyntaxNode operand)
    parameters:
    - id: operand
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LogicalAndExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1558
  summary: Creates an expression that denotes a logical-and operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LogicalAndExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LogicalOrExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1563
  summary: Creates an expression that denotes a logical-or operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LogicalOrExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LogicalNotExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1568
  summary: Creates an expression that denotes a logical not operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LogicalNotExpression(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ConditionalExpression(SyntaxNode, SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1573
  summary: Creates an expression that denotes a conditional evaluation operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ConditionalExpression(SyntaxNode condition, SyntaxNode whenTrue, SyntaxNode whenFalse)
    parameters:
    - id: condition
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: whenTrue
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: whenFalse
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CoalesceExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1578
  summary: Creates an expression that denotes a coalesce operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode CoalesceExpression(SyntaxNode left, SyntaxNode right)
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: right
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: MemberAccessExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1583
  summary: Creates a member access expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode MemberAccessExpression(SyntaxNode expression, SyntaxNode memberName)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: memberName
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: MemberAccessExpression(SyntaxNode, string)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode, string)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1588
  summary: Creates a member access expression.
  syntax:
    content:
      CSharp: public SyntaxNode MemberAccessExpression(SyntaxNode expression, string memberName)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: memberName
      type:
        id: System.String
        name: string
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ObjectCreationExpression(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1596
  summary: Creates an object creation expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ObjectCreationExpression(SyntaxNode namedType, IEnumerable<SyntaxNode> arguments)
    parameters:
    - id: namedType
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ObjectCreationExpression(ITypeSymbol, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1601
  summary: Creates an object creation expression.
  syntax:
    content:
      CSharp: public SyntaxNode ObjectCreationExpression(ITypeSymbol type, IEnumerable<SyntaxNode> arguments)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: arguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ObjectCreationExpression(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1609
  summary: Creates an object creation expression.
  syntax:
    content:
      CSharp: public SyntaxNode ObjectCreationExpression(SyntaxNode type, params SyntaxNode[] arguments)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ObjectCreationExpression(ITypeSymbol, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1617
  summary: Creates an object creation expression.
  syntax:
    content:
      CSharp: public SyntaxNode ObjectCreationExpression(ITypeSymbol type, params SyntaxNode[] arguments)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: arguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InvocationExpression(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1625
  summary: Creates a invocation expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode InvocationExpression(SyntaxNode expression, IEnumerable<SyntaxNode> arguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: InvocationExpression(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1630
  summary: Creates a invocation expression
  syntax:
    content:
      CSharp: public SyntaxNode InvocationExpression(SyntaxNode expression, params SyntaxNode[] arguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(System.String,Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Argument(string, RefKind, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(string, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1638
  summary: Creates a node that is an argument to an invocation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode Argument(string name, RefKind refKind, SyntaxNode expression)
    parameters:
    - id: name
      type:
        id: System.String
        name: string
        isExternal: true
    - id: refKind
      type:
        id: Microsoft.CodeAnalysis.RefKind
        name: RefKind
        href: Microsoft.CodeAnalysis.RefKind
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(System.String,Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Argument(RefKind, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1643
  summary: Creates a node that is an argument to an invocation.
  syntax:
    content:
      CSharp: public SyntaxNode Argument(RefKind refKind, SyntaxNode expression)
    parameters:
    - id: refKind
      type:
        id: Microsoft.CodeAnalysis.RefKind
        name: RefKind
        href: Microsoft.CodeAnalysis.RefKind
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: Argument(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1651
  summary: Creates a node that is an argument to an invocation.
  syntax:
    content:
      CSharp: public SyntaxNode Argument(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ElementAccessExpression(SyntaxNode, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1659
  summary: Creates an expression that access an element of an array or indexer.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ElementAccessExpression(SyntaxNode expression, IEnumerable<SyntaxNode> arguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ElementAccessExpression(SyntaxNode, params SyntaxNode[])
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode, params Microsoft.CodeAnalysis.SyntaxNode[])
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1664
  summary: Creates an expression that access an element of an array or indexer.
  syntax:
    content:
      CSharp: public SyntaxNode ElementAccessExpression(SyntaxNode expression, params SyntaxNode[] arguments)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: arguments
      type:
        id: System.Array
        name: SyntaxNode[]
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TypeOfExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1672
  summary: Creates an expression that evaluates to the type at runtime.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TypeOfExpression(SyntaxNode type)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IsTypeExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1677
  summary: Creates an expression that denotes an is-type-check operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode IsTypeExpression(SyntaxNode expression, SyntaxNode type)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: IsTypeExpression(SyntaxNode, ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1682
  summary: Creates an expression that denotes an is-type-check operation.
  syntax:
    content:
      CSharp: public SyntaxNode IsTypeExpression(SyntaxNode expression, ITypeSymbol type)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TryCastExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1690
  summary: Creates an expression that denotes an try-cast operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode TryCastExpression(SyntaxNode expression, SyntaxNode type)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: TryCastExpression(SyntaxNode, ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1695
  summary: Creates an expression that denotes an try-cast operation.
  syntax:
    content:
      CSharp: public SyntaxNode TryCastExpression(SyntaxNode expression, ITypeSymbol type)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CastExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1703
  summary: Creates an expression that denotes a type cast operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode CastExpression(SyntaxNode type, SyntaxNode expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: CastExpression(ITypeSymbol, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1708
  summary: Creates an expression that denotes a type cast operation.
  syntax:
    content:
      CSharp: public SyntaxNode CastExpression(ITypeSymbol type, SyntaxNode expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ConvertExpression(SyntaxNode, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1716
  summary: Creates an expression that denotes a type conversion operation.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ConvertExpression(SyntaxNode type, SyntaxNode expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ConvertExpression(ITypeSymbol, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1721
  summary: Creates an expression that denotes a type conversion operation.
  syntax:
    content:
      CSharp: public SyntaxNode ConvertExpression(ITypeSymbol type, SyntaxNode expression)
    parameters:
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(IEnumerable<SyntaxNode>, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1729
  summary: Creates an expression that declares a value returning lambda expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ValueReturningLambdaExpression(IEnumerable<SyntaxNode> lambdaParameters, SyntaxNode expression)
    parameters:
    - id: lambdaParameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(IEnumerable<SyntaxNode>, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1734
  summary: Creates an expression that declares a void returning lambda expression
  syntax:
    content:
      CSharp: public abstract SyntaxNode VoidReturningLambdaExpression(IEnumerable<SyntaxNode> lambdaParameters, SyntaxNode expression)
    parameters:
    - id: lambdaParameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1739
  summary: Creates an expression that declares a value returning lambda expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode ValueReturningLambdaExpression(IEnumerable<SyntaxNode> lambdaParameters, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: lambdaParameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(IEnumerable<SyntaxNode>, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1744
  summary: Creates an expression that declares a void returning lambda expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode VoidReturningLambdaExpression(IEnumerable<SyntaxNode> lambdaParameters, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: lambdaParameters
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1749
  summary: Creates an expression that declares a single parameter value returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode ValueReturningLambdaExpression(string parameterName, SyntaxNode expression)
    parameters:
    - id: parameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1757
  summary: Creates an expression that declares a single parameter void returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode VoidReturningLambdaExpression(string parameterName, SyntaxNode expression)
    parameters:
    - id: parameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1765
  summary: Creates an expression that declares a single parameter value returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode ValueReturningLambdaExpression(string parameterName, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: parameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(string, IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(string, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1773
  summary: Creates an expression that declares a single parameter void returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode VoidReturningLambdaExpression(string parameterName, IEnumerable<SyntaxNode> statements)
    parameters:
    - id: parameterName
      type:
        id: System.String
        name: string
        isExternal: true
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1781
  summary: Creates an expression that declares a zero parameter value returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode ValueReturningLambdaExpression(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1789
  summary: Creates an expression that declares a zero parameter void returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode VoidReturningLambdaExpression(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: ValueReturningLambdaExpression(IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1797
  summary: Creates an expression that declares a zero parameter value returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode ValueReturningLambdaExpression(IEnumerable<SyntaxNode> statements)
    parameters:
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: VoidReturningLambdaExpression(IEnumerable<SyntaxNode>)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1805
  summary: Creates an expression that declares a zero parameter void returning lambda expression.
  syntax:
    content:
      CSharp: public SyntaxNode VoidReturningLambdaExpression(IEnumerable<SyntaxNode> statements)
    parameters:
    - id: statements
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}
        name: IEnumerable<SyntaxNode>
        isExternal: true
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LambdaParameter(string, SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(string, Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1813
  summary: Creates a lambda parameter.
  syntax:
    content:
      CSharp: public abstract SyntaxNode LambdaParameter(string identifier, SyntaxNode type = null)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.SyntaxNode)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.ITypeSymbol)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: LambdaParameter(string, ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(string, Microsoft.CodeAnalysis.ITypeSymbol)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1818
  summary: Creates a lambda parameter.
  syntax:
    content:
      CSharp: public SyntaxNode LambdaParameter(string identifier, ITypeSymbol type)
    parameters:
    - id: identifier
      type:
        id: System.String
        name: string
        isExternal: true
    - id: type
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.ITypeSymbol)
- uid: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)
  href: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.yml
  name: AwaitExpression(SyntaxNode)
  fullName: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SyntaxGenerator.cs
    startLine: 1826
  summary: Creates an await expression.
  syntax:
    content:
      CSharp: public abstract SyntaxNode AwaitExpression(SyntaxNode expression)
    parameters:
    - id: expression
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
    return:
      id: SyntaxNode
      type:
        id: Microsoft.CodeAnalysis.SyntaxNode
        name: SyntaxNode
        href: Microsoft.CodeAnalysis.SyntaxNode
  id: Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)
