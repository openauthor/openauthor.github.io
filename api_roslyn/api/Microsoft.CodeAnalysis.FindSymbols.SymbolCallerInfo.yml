items:
- uid: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  href: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yml
  name: SymbolCallerInfo
  fullName: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  type: Struct
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Workspaces/Core/Portable/FindSymbols/SymbolCallerInfo.cs
    startLine: 24
  summary: >-
    Contains information about a call from one symbol to another.  The symbol making the call is

    stored in CallingSymbol and the symbol that the call was made to is stored in CalledSymbol.

    Whether or not the call is direct or indirect is also stored.  A direct call is a call that

    does not go through any other symbols in the inheritance hierarchy of CalledSymbol, while an

    indirect call does go through the inheritance hierarchy.  For example, calls through a base

    member that this symbol overrides, or through an interface member that this symbol

    implements will be considered 'indirect'.
  syntax:
    content:
      CSharp: public struct SymbolCallerInfo
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: System.ValueType
    name: System.ValueType
    isExternal: true
  id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo
  children:
  - Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol
  - Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations
  - Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol
  - Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect
- uid: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol
  href: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yml
  name: CallingSymbol
  fullName: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/SymbolCallerInfo.cs
    startLine: 29
  summary: The symbol that is calling the symbol being called.
  syntax:
    content:
      CSharp: public ISymbol CallingSymbol { get; private set; }
    parameters:
    - id: CallingSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
  id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CallingSymbol
- uid: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations
  href: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yml
  name: Locations
  fullName: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/SymbolCallerInfo.cs
    startLine: 34
  summary: The locations inside the calling symbol where the called symbol is referenced.
  syntax:
    content:
      CSharp: public IEnumerable<Location> Locations { get; private set; }
    parameters:
    - id: Locations
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        name: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location}
        isExternal: true
  id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.Locations
- uid: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol
  href: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yml
  name: CalledSymbol
  fullName: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/SymbolCallerInfo.cs
    startLine: 39
  summary: The symbol being called.
  syntax:
    content:
      CSharp: public ISymbol CalledSymbol { get; private set; }
    parameters:
    - id: CalledSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
  id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.CalledSymbol
- uid: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect
  href: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.yml
  name: IsDirect
  fullName: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/FindSymbols/SymbolCallerInfo.cs
    startLine: 47
  summary: >-
    True if the CallingSymbol is directly calling CalledSymbol.  False if it is calling a

    symbol in the inheritance hierarchy of the CalledSymbol.  For example, if the called

    symbol is a class method, then an indirect call might be through an interface method that

    the class method implements.
  syntax:
    content:
      CSharp: public bool IsDirect { get; private set; }
    parameters:
    - id: IsDirect
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.FindSymbols.SymbolCallerInfo.IsDirect
