items:
- uid: Microsoft.CodeAnalysis.ProjectReference
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: ProjectReference
  fullName: Microsoft.CodeAnalysis.ProjectReference
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: ef085ea0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 11
  syntax:
    content:
      CSharp: public sealed class ProjectReference
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: Microsoft.CodeAnalysis.ProjectReference
  children:
  - Microsoft.CodeAnalysis.ProjectReference.#ctor(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
  - Microsoft.CodeAnalysis.ProjectReference.ProjectId
  - Microsoft.CodeAnalysis.ProjectReference.Aliases
  - Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
  - Microsoft.CodeAnalysis.ProjectReference.Equals(System.Object)
  - Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
  - Microsoft.CodeAnalysis.ProjectReference.op_Equality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  - Microsoft.CodeAnalysis.ProjectReference.op_Inequality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  - Microsoft.CodeAnalysis.ProjectReference.GetHashCode
- uid: Microsoft.CodeAnalysis.ProjectReference.#ctor(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: ProjectReference(ProjectId, ImmutableArray<string>, bool)
  fullName: Microsoft.CodeAnalysis.ProjectReference.ProjectReference(Microsoft.CodeAnalysis.ProjectId, System.Collections.Immutable.ImmutableArray<string>, bool)
  type: Constructor
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 18
  syntax:
    content:
      CSharp: public ProjectReference(ProjectId projectId, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yml
    - id: aliases
      type:
        id: System.Collections.Immutable.ImmutableArray{System.String}
        name: System.Collections.Immutable.ImmutableArray{System.String}
        isExternal: true
    - id: embedInteropTypes
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.ProjectReference.#ctor(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
- uid: Microsoft.CodeAnalysis.ProjectReference.ProjectId
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: ProjectId
  fullName: Microsoft.CodeAnalysis.ProjectReference.ProjectId
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 27
  syntax:
    content:
      CSharp: public ProjectId ProjectId { get; }
    parameters:
    - id: ProjectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: Microsoft.CodeAnalysis.ProjectId.yml
  id: Microsoft.CodeAnalysis.ProjectReference.ProjectId
- uid: Microsoft.CodeAnalysis.ProjectReference.Aliases
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: Aliases
  fullName: Microsoft.CodeAnalysis.ProjectReference.Aliases
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 32
  summary: Aliases for the reference. Empty if the reference has no aliases.
  syntax:
    content:
      CSharp: public ImmutableArray<string> Aliases { get; }
    parameters:
    - id: Aliases
      type:
        id: System.Collections.Immutable.ImmutableArray{System.String}
        name: System.Collections.Immutable.ImmutableArray{System.String}
        isExternal: true
  id: Microsoft.CodeAnalysis.ProjectReference.Aliases
- uid: Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: EmbedInteropTypes
  fullName: Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 37
  summary: True if interop types defined in the referenced project should be embedded into the referencing project.
  syntax:
    content:
      CSharp: public bool EmbedInteropTypes { get; }
    parameters:
    - id: EmbedInteropTypes
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
- uid: Microsoft.CodeAnalysis.ProjectReference.Equals(System.Object)
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: Equals(object)
  fullName: Microsoft.CodeAnalysis.ProjectReference.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 39
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.ProjectReference.Equals(System.Object)
- uid: Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: Equals(ProjectReference)
  fullName: Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 44
  syntax:
    content:
      CSharp: public bool Equals(ProjectReference reference)
    parameters:
    - id: reference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
- uid: Microsoft.CodeAnalysis.ProjectReference.op_Equality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: operator ==(ProjectReference, ProjectReference)
  fullName: Microsoft.CodeAnalysis.ProjectReference.operator ==(Microsoft.CodeAnalysis.ProjectReference, Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 57
  syntax:
    content:
      CSharp: public static bool operator ==(ProjectReference left, ProjectReference right) { return EqualityComparer<ProjectReference>.Default.Equals(left, right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.ProjectReference.op_Equality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
- uid: Microsoft.CodeAnalysis.ProjectReference.op_Inequality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: operator !=(ProjectReference, ProjectReference)
  fullName: Microsoft.CodeAnalysis.ProjectReference.operator !=(Microsoft.CodeAnalysis.ProjectReference, Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 62
  syntax:
    content:
      CSharp: public static bool operator !=(ProjectReference left, ProjectReference right) { return !(left == right); }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yml
    - id: right
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: Microsoft.CodeAnalysis.ProjectReference.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.ProjectReference.op_Inequality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
- uid: Microsoft.CodeAnalysis.ProjectReference.GetHashCode
  href: Microsoft.CodeAnalysis.ProjectReference.yml
  name: GetHashCode()
  fullName: Microsoft.CodeAnalysis.ProjectReference.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 67
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
  id: Microsoft.CodeAnalysis.ProjectReference.GetHashCode
