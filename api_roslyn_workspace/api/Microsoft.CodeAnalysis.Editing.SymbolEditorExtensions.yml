items:
- uid: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions
  href: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.yml
  name: SymbolEditorExtensions
  fullName: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: v1.0-12-gef085ea
    path: src/Workspaces/Core/Portable/Editing/SymbolEditorExtensions.cs
    startLine: 12
  syntax:
    content:
      CSharp: public static class SymbolEditorExtensions
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  id: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions
  children:
  - Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)
  - Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.yml
  name: GetBaseOrInterfaceDeclarationReferenceAsync(SymbolEditor, ISymbol, ITypeSymbol, CancellationToken)
  fullName: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor, Microsoft.CodeAnalysis.ISymbol, Microsoft.CodeAnalysis.ITypeSymbol, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SymbolEditorExtensions.cs
    startLine: 17
  summary: Gets the reference to the declaration of the base or interface type as part of the symbol's declaration.
  syntax:
    content:
      CSharp: public static async Task<SyntaxNode> GetBaseOrInterfaceDeclarationReferenceAsync(this SymbolEditor editor, ISymbol symbol, ITypeSymbol baseOrInterfaceType, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: editor
      type:
        id: Microsoft.CodeAnalysis.Editing.SymbolEditor
        name: SymbolEditor
        href: Microsoft.CodeAnalysis.Editing.SymbolEditor.yml
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
    - id: baseOrInterfaceType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
  id: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.GetBaseOrInterfaceDeclarationReferenceAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.yml
  name: SetBaseTypeAsync(SymbolEditor, INamedTypeSymbol, Func<SyntaxGenerator, SyntaxNode>, CancellationToken)
  fullName: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor, Microsoft.CodeAnalysis.INamedTypeSymbol, System.Func<Microsoft.CodeAnalysis.Editing.SyntaxGenerator, Microsoft.CodeAnalysis.SyntaxNode>, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SymbolEditorExtensions.cs
    startLine: 55
  summary: Changes the base type of the symbol.
  syntax:
    content:
      CSharp: public static async Task<ISymbol> SetBaseTypeAsync(this SymbolEditor editor, INamedTypeSymbol symbol, Func<SyntaxGenerator, SyntaxNode> getNewBaseType, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: editor
      type:
        id: Microsoft.CodeAnalysis.Editing.SymbolEditor
        name: SymbolEditor
        href: Microsoft.CodeAnalysis.Editing.SymbolEditor.yml
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: Microsoft.CodeAnalysis.INamedTypeSymbol
    - id: getNewBaseType
      type:
        id: System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
  id: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)
- uid: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.yml
  name: SetBaseTypeAsync(SymbolEditor, INamedTypeSymbol, ITypeSymbol, CancellationToken)
  fullName: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor, Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.ITypeSymbol, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Editing/SymbolEditorExtensions.cs
    startLine: 91
  summary: Changes the base type of the symbol.
  syntax:
    content:
      CSharp: public static Task<ISymbol> SetBaseTypeAsync(this SymbolEditor editor, INamedTypeSymbol symbol, ITypeSymbol newBaseType, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: editor
      type:
        id: Microsoft.CodeAnalysis.Editing.SymbolEditor
        name: SymbolEditor
        href: Microsoft.CodeAnalysis.Editing.SymbolEditor.yml
    - id: symbol
      type:
        id: Microsoft.CodeAnalysis.INamedTypeSymbol
        name: INamedTypeSymbol
        href: Microsoft.CodeAnalysis.INamedTypeSymbol
    - id: newBaseType
      type:
        id: Microsoft.CodeAnalysis.ITypeSymbol
        name: ITypeSymbol
        href: Microsoft.CodeAnalysis.ITypeSymbol
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
  id: Microsoft.CodeAnalysis.Editing.SymbolEditorExtensions.SetBaseTypeAsync(Microsoft.CodeAnalysis.Editing.SymbolEditor,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Threading.CancellationToken)
