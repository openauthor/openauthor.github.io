id: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage
href: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.yaml
name:
  CSharp: ITemporaryStreamStorage
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage
type: Interface
source:
  remote: &o0
    branch: master
    repo: https://github.com/vicancy/roslyn
  path: src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/ITemporaryStorage.cs
  startLine: 21
syntax:
  content:
    CSharp: public interface ITemporaryStreamStorage
items:
- id: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStream(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.yaml
  name:
    CSharp: ReadStream
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStream(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/ITemporaryStorage.cs
    startLine: 23
  syntax:
    content:
      CSharp: Stream ReadStream(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Stream
- id: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStreamAsync(System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.yaml
  name:
    CSharp: ReadStreamAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.ReadStreamAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/ITemporaryStorage.cs
    startLine: 24
  syntax:
    content:
      CSharp: Task<Stream> ReadStreamAsync(CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStream(System.IO.Stream,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.yaml
  name:
    CSharp: WriteStream
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStream(System.IO.Stream,System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/ITemporaryStorage.cs
    startLine: 25
  syntax:
    content:
      CSharp: void WriteStream(Stream stream, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: stream
      type:
        id: System.IO.Stream
        name: System.IO.Stream
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Void
- id: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  href: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.yaml
  name:
    CSharp: WriteStreamAsync
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage.WriteStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Workspace/Host/TemporaryStorage/ITemporaryStorage.cs
    startLine: 26
  syntax:
    content:
      CSharp: Task WriteStreamAsync(Stream stream, CancellationToken cancellationToken = default (CancellationToken));
    parameters:
    - id: stream
      type:
        id: System.IO.Stream
        name: System.IO.Stream
        isExternal: true
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        name: System.Threading.CancellationToken
        isExternal: true
    return:
      id: Task
